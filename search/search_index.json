{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CovidSEIR.jl \u00b6 Index \u00b6 CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Package Docs"},{"location":"#covidseirjl","text":"","title":"CovidSEIR.jl"},{"location":"#index","text":"CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Index"},{"location":"canada/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata(); Canada \u00b6 We estimate the model with the following code. It takes about an hour. canada = CountryData(covdf, \"Canada\"); using Turing canmod = CovidSEIR.TimeVarying.countrymodel(canada) cc = Turing.psample(canmod, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/canada_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/canada_tv_2020-04-03.jld2\" cc dayt0; Estimates \u00b6 plot(cc) We can see that there might be convergence issues. There are large differences between the four chains for some parameters. describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.3663 0.2493 0.0020 0.0162 109.8516 1.0508 pE0 0.0000 0.0000 0.0000 0.0000 69.0298 1.1447 p[1] 0.2249 0.2090 0.0017 0.0152 68.9411 1.3644 p[2] 0.0087 0.0138 0.0001 0.0011 64.2570 1.7916 sigC 87.8113 8.0934 0.0640 0.4845 137.3117 1.0642 sigD 2.9818 0.2639 0.0021 0.0146 123.8674 1.0790 sigRc 120.5234 11.2212 0.0887 0.6369 181.6979 1.0479 \u03b2[1] 0.6730 0.5646 0.0045 0.0374 85.0754 1.0638 \u03b2[2] 0.7252 0.5969 0.0047 0.0421 72.8147 1.1185 \u03b2[3] 0.8204 0.5753 0.0045 0.0354 129.0891 1.0235 \u03b3[1] 0.3462 0.3724 0.0029 0.0264 64.2570 1.4844 \u03b3[2] 0.0697 0.0933 0.0007 0.0072 64.2570 1.8599 \u03c1[1] 0.7800 0.1430 0.0011 0.0092 94.7969 1.0980 \u03c1[2] 62.6193 0.8948 0.0071 0.0586 82.1667 1.2138 \u03c4 0.6859 1.1848 0.0094 0.0891 64.2570 2.3084 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0761 0.1626 0.2850 0.5259 0.9303 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0159 0.0487 0.1410 0.3693 0.7103 p[2] 0.0023 0.0024 0.0024 0.0036 0.0537 sigC 73.0827 82.2443 87.4223 92.8061 105.5131 sigD 2.4923 2.8060 2.9732 3.1460 3.5283 sigRc 100.7446 112.6183 119.6341 127.6296 144.6780 \u03b2[1] 0.0082 0.2626 0.5366 0.9317 2.1050 \u03b2[2] 0.1011 0.2765 0.5101 1.0400 2.2667 \u03b2[3] 0.0448 0.3767 0.7180 1.1543 2.1747 \u03b3[1] 0.0012 0.0093 0.2504 0.5756 1.2408 \u03b3[2] 0.0207 0.0242 0.0260 0.0369 0.3570 \u03c1[1] 0.4902 0.6719 0.7961 0.9020 0.9848 \u03c1[2] 60.8948 61.9923 62.6388 63.2614 64.2878 \u03c4 0.0001 0.0007 0.0065 0.9963 3.9571 The parameter estimates are generally not very precise. Fit \u00b6 sdf = simtrajectories(cc, canada, 1:200) f = plotvars(sdf, canada) f.fit In this figure, solid lines are observed data, dashed lines are posterior means, and the shaded region is a pointwise 90% credible interval. Implications \u00b6 We now look at the model\u2019s projections for some observed and unobserved variables. for fig in f.trajectories display(fig) end In general we see a similar pattern as noted above: the posteriors for observed variables are fairly precise. However, the posteriors for unobserved variables, such as the portion of undetected infections and the portion of mild infections, are very imprecise.","title":"Canada"},{"location":"canada/#canada","text":"We estimate the model with the following code. It takes about an hour. canada = CountryData(covdf, \"Canada\"); using Turing canmod = CovidSEIR.TimeVarying.countrymodel(canada) cc = Turing.psample(canmod, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/canada_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/canada_tv_2020-04-03.jld2\" cc dayt0;","title":"Canada"},{"location":"canada/#estimates","text":"plot(cc) We can see that there might be convergence issues. There are large differences between the four chains for some parameters. describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.3663 0.2493 0.0020 0.0162 109.8516 1.0508 pE0 0.0000 0.0000 0.0000 0.0000 69.0298 1.1447 p[1] 0.2249 0.2090 0.0017 0.0152 68.9411 1.3644 p[2] 0.0087 0.0138 0.0001 0.0011 64.2570 1.7916 sigC 87.8113 8.0934 0.0640 0.4845 137.3117 1.0642 sigD 2.9818 0.2639 0.0021 0.0146 123.8674 1.0790 sigRc 120.5234 11.2212 0.0887 0.6369 181.6979 1.0479 \u03b2[1] 0.6730 0.5646 0.0045 0.0374 85.0754 1.0638 \u03b2[2] 0.7252 0.5969 0.0047 0.0421 72.8147 1.1185 \u03b2[3] 0.8204 0.5753 0.0045 0.0354 129.0891 1.0235 \u03b3[1] 0.3462 0.3724 0.0029 0.0264 64.2570 1.4844 \u03b3[2] 0.0697 0.0933 0.0007 0.0072 64.2570 1.8599 \u03c1[1] 0.7800 0.1430 0.0011 0.0092 94.7969 1.0980 \u03c1[2] 62.6193 0.8948 0.0071 0.0586 82.1667 1.2138 \u03c4 0.6859 1.1848 0.0094 0.0891 64.2570 2.3084 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0761 0.1626 0.2850 0.5259 0.9303 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0159 0.0487 0.1410 0.3693 0.7103 p[2] 0.0023 0.0024 0.0024 0.0036 0.0537 sigC 73.0827 82.2443 87.4223 92.8061 105.5131 sigD 2.4923 2.8060 2.9732 3.1460 3.5283 sigRc 100.7446 112.6183 119.6341 127.6296 144.6780 \u03b2[1] 0.0082 0.2626 0.5366 0.9317 2.1050 \u03b2[2] 0.1011 0.2765 0.5101 1.0400 2.2667 \u03b2[3] 0.0448 0.3767 0.7180 1.1543 2.1747 \u03b3[1] 0.0012 0.0093 0.2504 0.5756 1.2408 \u03b3[2] 0.0207 0.0242 0.0260 0.0369 0.3570 \u03c1[1] 0.4902 0.6719 0.7961 0.9020 0.9848 \u03c1[2] 60.8948 61.9923 62.6388 63.2614 64.2878 \u03c4 0.0001 0.0007 0.0065 0.9963 3.9571 The parameter estimates are generally not very precise.","title":"Estimates"},{"location":"canada/#fit","text":"sdf = simtrajectories(cc, canada, 1:200) f = plotvars(sdf, canada) f.fit In this figure, solid lines are observed data, dashed lines are posterior means, and the shaded region is a pointwise 90% credible interval.","title":"Fit"},{"location":"canada/#implications","text":"We now look at the model\u2019s projections for some observed and unobserved variables. for fig in f.trajectories display(fig) end In general we see a similar pattern as noted above: the posteriors for observed variables are fairly precise. However, the posteriors for unobserved variables, such as the portion of undetected infections and the portion of mild infections, are very imprecise.","title":"Implications"},{"location":"china/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata(); China \u00b6 using Dates dayt0 = Dates.Date(\"2020-01-22\") - Dates.Day(1) china = CountryData(covdf, \"China\", 1) CountryData{Float64,Int64}(1.39273e9, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 64 , 65, 66, 67, 68, 69, 70, 71, 72, 73], [17.0, 18.0, 26.0, 42.0, 56.0, 82.0, 131.0, 133.0, 171.0, 213.0 \u2026 3285.0, 3291.0, 3296.0, 3299.0, 3304.0, 330 8.0, 3309.0, 3316.0, 3322.0, 3326.0], [28.0, 30.0, 36.0, 39.0, 49.0, 58.0, 101.0, 120.0, 135.0, 214.0 \u2026 73773.0, 74181.0, 74720.0, 75100.0, 75582.0, 75923.0, 76206.0, 76405.0, 76565.0, 76760.0], [503.0, 595.0, 858.0, 1325.0 , 1970.0, 2737.0, 5277.0, 5834.0, 7835.0, 9375.0 \u2026 4603.0, 4310.0, 3881.0 , 3600.0, 3236.0, 2967.0, 2764.0, 2640.0, 2545.0, 2425.0]) using Turing mdl = CovidSEIR.TimeVarying.countrymodel(china) cc = Turing.psample(mdl, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/china_$(Dates.today()).jld2\" cc dayt0 JLD2.@load \"$jmddir/china_tv_2020-04-03.jld2\" cc dayt0; cc = cc[:,:,1] Object of type Chains, with data of type 4000\u00d727\u00d71 Array{Float64,3} Iterations = 1:4000 Thinning interval = 1 Chains = 1 Samples per chain = 4000 internals = acceptance_rate, hamiltonian_energy, hamiltonian_energy _error, is_accept, log_density, lp, max_hamiltonian_energy_error, n_steps, nom_step_size, numerical_error, step_size, tree_depth parameters = a, pE0, p[1], p[2], sigC, sigD, sigRc, \u03b2[1], \u03b2[2], \u03b2[3] , \u03b3[1], \u03b3[2], \u03c1[1], \u03c1[2], \u03c4 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.4762 0.1125 0.0018 0.0073 256.5630 1.0020 pE0 0.0000 0.0000 0.0000 0.0000 230.1645 1.0081 p[1] 0.0930 0.0071 0.0001 0.0004 271.9785 1.0011 p[2] 0.0046 0.0004 0.0000 0.0000 270.3874 1.0004 sigC 2654.0677 304.9502 4.8217 13.3442 460.7165 1.0006 sigD 540.5723 48.0220 0.7593 1.8585 516.5709 0.9998 sigRc 3312.6131 378.8981 5.9909 19.2014 402.2769 1.0068 \u03b2[1] 0.1090 0.0973 0.0015 0.0069 204.6074 1.0066 \u03b2[2] 0.0005 0.0005 0.0000 0.0000 643.0540 0.9998 \u03b2[3] 2.0367 0.9693 0.0153 0.0588 271.6578 1.0058 \u03b3[1] 0.0004 0.0004 0.0000 0.0000 908.4804 1.0001 \u03b3[2] 0.0893 0.0066 0.0001 0.0004 270.6960 1.0006 \u03c1[1] 0.9791 0.0312 0.0005 0.0017 359.5796 1.0087 \u03c1[2] 23.0981 0.6907 0.0109 0.0406 330.7326 1.0023 \u03c4 2.9659 1.1414 0.0180 0.0591 302.4217 1.0008 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.3059 0.3999 0.4585 0.5295 0.7857 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0804 0.0882 0.0925 0.0974 0.1085 p[2] 0.0040 0.0044 0.0046 0.0048 0.0054 sigC 2162.4566 2438.1695 2625.2616 2825.6502 3386.1569 sigD 459.0614 507.3368 535.6730 568.9067 644.4137 sigRc 2625.4344 3048.4072 3294.4249 3556.8522 4098.2755 \u03b2[1] 0.0012 0.0178 0.0762 0.2009 0.2914 \u03b2[2] 0.0000 0.0002 0.0004 0.0007 0.0019 \u03b2[3] 0.2316 1.2911 2.1268 2.7283 3.7503 \u03b3[1] 0.0000 0.0001 0.0003 0.0006 0.0017 \u03b3[2] 0.0776 0.0848 0.0887 0.0932 0.1035 \u03c1[1] 0.8814 0.9760 0.9915 0.9969 0.9998 \u03c1[2] 21.6331 22.6663 23.1264 23.5639 24.4635 \u03c4 1.4465 2.1049 2.6838 3.6083 5.7400 Estimates \u00b6 plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.4762 0.1125 0.0018 0.0073 256.5630 1.0020 pE0 0.0000 0.0000 0.0000 0.0000 230.1645 1.0081 p[1] 0.0930 0.0071 0.0001 0.0004 271.9785 1.0011 p[2] 0.0046 0.0004 0.0000 0.0000 270.3874 1.0004 sigC 2654.0677 304.9502 4.8217 13.3442 460.7165 1.0006 sigD 540.5723 48.0220 0.7593 1.8585 516.5709 0.9998 sigRc 3312.6131 378.8981 5.9909 19.2014 402.2769 1.0068 \u03b2[1] 0.1090 0.0973 0.0015 0.0069 204.6074 1.0066 \u03b2[2] 0.0005 0.0005 0.0000 0.0000 643.0540 0.9998 \u03b2[3] 2.0367 0.9693 0.0153 0.0588 271.6578 1.0058 \u03b3[1] 0.0004 0.0004 0.0000 0.0000 908.4804 1.0001 \u03b3[2] 0.0893 0.0066 0.0001 0.0004 270.6960 1.0006 \u03c1[1] 0.9791 0.0312 0.0005 0.0017 359.5796 1.0087 \u03c1[2] 23.0981 0.6907 0.0109 0.0406 330.7326 1.0023 \u03c4 2.9659 1.1414 0.0180 0.0591 302.4217 1.0008 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.3059 0.3999 0.4585 0.5295 0.7857 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0804 0.0882 0.0925 0.0974 0.1085 p[2] 0.0040 0.0044 0.0046 0.0048 0.0054 sigC 2162.4566 2438.1695 2625.2616 2825.6502 3386.1569 sigD 459.0614 507.3368 535.6730 568.9067 644.4137 sigRc 2625.4344 3048.4072 3294.4249 3556.8522 4098.2755 \u03b2[1] 0.0012 0.0178 0.0762 0.2009 0.2914 \u03b2[2] 0.0000 0.0002 0.0004 0.0007 0.0019 \u03b2[3] 0.2316 1.2911 2.1268 2.7283 3.7503 \u03b3[1] 0.0000 0.0001 0.0003 0.0006 0.0017 \u03b3[2] 0.0776 0.0848 0.0887 0.0932 0.1035 \u03c1[1] 0.8814 0.9760 0.9915 0.9969 0.9998 \u03c1[2] 21.6331 22.6663 23.1264 23.5639 24.4635 \u03c4 1.4465 2.1049 2.6838 3.6083 5.7400 Fit \u00b6 sdf = simtrajectories(cc, china, 1:150) f = plotvars(sdf, china, dayt0=dayt0) plot(f.fit, xlim=nothing, ylim=(0, maximum(china.active)*2)) Implications \u00b6 for fig in f.trajectories display(plot(fig, xlim=nothing)) end","title":"China"},{"location":"china/#china","text":"using Dates dayt0 = Dates.Date(\"2020-01-22\") - Dates.Day(1) china = CountryData(covdf, \"China\", 1) CountryData{Float64,Int64}(1.39273e9, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 64 , 65, 66, 67, 68, 69, 70, 71, 72, 73], [17.0, 18.0, 26.0, 42.0, 56.0, 82.0, 131.0, 133.0, 171.0, 213.0 \u2026 3285.0, 3291.0, 3296.0, 3299.0, 3304.0, 330 8.0, 3309.0, 3316.0, 3322.0, 3326.0], [28.0, 30.0, 36.0, 39.0, 49.0, 58.0, 101.0, 120.0, 135.0, 214.0 \u2026 73773.0, 74181.0, 74720.0, 75100.0, 75582.0, 75923.0, 76206.0, 76405.0, 76565.0, 76760.0], [503.0, 595.0, 858.0, 1325.0 , 1970.0, 2737.0, 5277.0, 5834.0, 7835.0, 9375.0 \u2026 4603.0, 4310.0, 3881.0 , 3600.0, 3236.0, 2967.0, 2764.0, 2640.0, 2545.0, 2425.0]) using Turing mdl = CovidSEIR.TimeVarying.countrymodel(china) cc = Turing.psample(mdl, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/china_$(Dates.today()).jld2\" cc dayt0 JLD2.@load \"$jmddir/china_tv_2020-04-03.jld2\" cc dayt0; cc = cc[:,:,1] Object of type Chains, with data of type 4000\u00d727\u00d71 Array{Float64,3} Iterations = 1:4000 Thinning interval = 1 Chains = 1 Samples per chain = 4000 internals = acceptance_rate, hamiltonian_energy, hamiltonian_energy _error, is_accept, log_density, lp, max_hamiltonian_energy_error, n_steps, nom_step_size, numerical_error, step_size, tree_depth parameters = a, pE0, p[1], p[2], sigC, sigD, sigRc, \u03b2[1], \u03b2[2], \u03b2[3] , \u03b3[1], \u03b3[2], \u03c1[1], \u03c1[2], \u03c4 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.4762 0.1125 0.0018 0.0073 256.5630 1.0020 pE0 0.0000 0.0000 0.0000 0.0000 230.1645 1.0081 p[1] 0.0930 0.0071 0.0001 0.0004 271.9785 1.0011 p[2] 0.0046 0.0004 0.0000 0.0000 270.3874 1.0004 sigC 2654.0677 304.9502 4.8217 13.3442 460.7165 1.0006 sigD 540.5723 48.0220 0.7593 1.8585 516.5709 0.9998 sigRc 3312.6131 378.8981 5.9909 19.2014 402.2769 1.0068 \u03b2[1] 0.1090 0.0973 0.0015 0.0069 204.6074 1.0066 \u03b2[2] 0.0005 0.0005 0.0000 0.0000 643.0540 0.9998 \u03b2[3] 2.0367 0.9693 0.0153 0.0588 271.6578 1.0058 \u03b3[1] 0.0004 0.0004 0.0000 0.0000 908.4804 1.0001 \u03b3[2] 0.0893 0.0066 0.0001 0.0004 270.6960 1.0006 \u03c1[1] 0.9791 0.0312 0.0005 0.0017 359.5796 1.0087 \u03c1[2] 23.0981 0.6907 0.0109 0.0406 330.7326 1.0023 \u03c4 2.9659 1.1414 0.0180 0.0591 302.4217 1.0008 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.3059 0.3999 0.4585 0.5295 0.7857 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0804 0.0882 0.0925 0.0974 0.1085 p[2] 0.0040 0.0044 0.0046 0.0048 0.0054 sigC 2162.4566 2438.1695 2625.2616 2825.6502 3386.1569 sigD 459.0614 507.3368 535.6730 568.9067 644.4137 sigRc 2625.4344 3048.4072 3294.4249 3556.8522 4098.2755 \u03b2[1] 0.0012 0.0178 0.0762 0.2009 0.2914 \u03b2[2] 0.0000 0.0002 0.0004 0.0007 0.0019 \u03b2[3] 0.2316 1.2911 2.1268 2.7283 3.7503 \u03b3[1] 0.0000 0.0001 0.0003 0.0006 0.0017 \u03b3[2] 0.0776 0.0848 0.0887 0.0932 0.1035 \u03c1[1] 0.8814 0.9760 0.9915 0.9969 0.9998 \u03c1[2] 21.6331 22.6663 23.1264 23.5639 24.4635 \u03c4 1.4465 2.1049 2.6838 3.6083 5.7400","title":"China"},{"location":"china/#estimates","text":"plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.4762 0.1125 0.0018 0.0073 256.5630 1.0020 pE0 0.0000 0.0000 0.0000 0.0000 230.1645 1.0081 p[1] 0.0930 0.0071 0.0001 0.0004 271.9785 1.0011 p[2] 0.0046 0.0004 0.0000 0.0000 270.3874 1.0004 sigC 2654.0677 304.9502 4.8217 13.3442 460.7165 1.0006 sigD 540.5723 48.0220 0.7593 1.8585 516.5709 0.9998 sigRc 3312.6131 378.8981 5.9909 19.2014 402.2769 1.0068 \u03b2[1] 0.1090 0.0973 0.0015 0.0069 204.6074 1.0066 \u03b2[2] 0.0005 0.0005 0.0000 0.0000 643.0540 0.9998 \u03b2[3] 2.0367 0.9693 0.0153 0.0588 271.6578 1.0058 \u03b3[1] 0.0004 0.0004 0.0000 0.0000 908.4804 1.0001 \u03b3[2] 0.0893 0.0066 0.0001 0.0004 270.6960 1.0006 \u03c1[1] 0.9791 0.0312 0.0005 0.0017 359.5796 1.0087 \u03c1[2] 23.0981 0.6907 0.0109 0.0406 330.7326 1.0023 \u03c4 2.9659 1.1414 0.0180 0.0591 302.4217 1.0008 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.3059 0.3999 0.4585 0.5295 0.7857 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0804 0.0882 0.0925 0.0974 0.1085 p[2] 0.0040 0.0044 0.0046 0.0048 0.0054 sigC 2162.4566 2438.1695 2625.2616 2825.6502 3386.1569 sigD 459.0614 507.3368 535.6730 568.9067 644.4137 sigRc 2625.4344 3048.4072 3294.4249 3556.8522 4098.2755 \u03b2[1] 0.0012 0.0178 0.0762 0.2009 0.2914 \u03b2[2] 0.0000 0.0002 0.0004 0.0007 0.0019 \u03b2[3] 0.2316 1.2911 2.1268 2.7283 3.7503 \u03b3[1] 0.0000 0.0001 0.0003 0.0006 0.0017 \u03b3[2] 0.0776 0.0848 0.0887 0.0932 0.1035 \u03c1[1] 0.8814 0.9760 0.9915 0.9969 0.9998 \u03c1[2] 21.6331 22.6663 23.1264 23.5639 24.4635 \u03c4 1.4465 2.1049 2.6838 3.6083 5.7400","title":"Estimates"},{"location":"china/#fit","text":"sdf = simtrajectories(cc, china, 1:150) f = plotvars(sdf, china, dayt0=dayt0) plot(f.fit, xlim=nothing, ylim=(0, maximum(china.active)*2))","title":"Fit"},{"location":"china/#implications","text":"for fig in f.trajectories display(plot(fig, xlim=nothing)) end","title":"Implications"},{"location":"covid/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR using Plots Plots.pyplot() using DataFrames, JLD2 jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) \"/home/paul/.julia/dev/CovidSEIR/docs/jmd\" Introduction \u00b6 Data \u00b6 We will use data from Johns Hopkins University Center for Systems Science and Engineering . It is gathered from a variety of sources and updated daily. JHU CSSE uses the data for this interactive website. . For another course, I wrote some notes using this data in python here. This data has daily cumulative counts of confirmed cases, recoveries, and deaths in each country (and provinces within some countries). covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 1 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 nmissing \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 Int64 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-04-03 \u2502 73 \u2502 0 \u2502 \u2502 2 \u2502 confirmed \u2502 724.544 \u2502 0 \u2502 0.0 \u2502 275586 \u2502 \u2502 292 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 80 \u2502 13286 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 181 \u2502 0 \u2502 \u2502 5 \u2502 Lat \u2502 21.562 \u2502 -41.4545 \u2502 23.6597 \u2502 71.7069 \u2502 \u2502 0 \u2502 \u2502 6 \u2502 Long \u2502 22.8574 \u2502 -135.0 \u2502 20.9727 \u2502 178.065 \u2502 \u2502 0 \u2502 \u2502 7 \u2502 deaths \u2502 31.4631 \u2502 0 \u2502 0.0 \u2502 14681 \u2502 \u2502 292 \u2502 \u2502 8 \u2502 recovered \u2502 208.677 \u2502 0 \u2502 0.0 \u2502 63612 \u2502 \u2502 1314 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 175 \u2502 438 \u2502 \u2502 10 \u2502 cpop \u2502 2.2724e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 1825 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502 15257 \u2502 Model \u00b6 We will estimate a susceptible, exposed, infectious, recovered (SEIR) epidemiological model of Covid transmission. In particular, we will use a version based on this webapp by Allison Hill . The model contains the following variables, all of which are functions of time $S$: Susceptible individuals $E$: Exposed individuals - infected but not yet infectious or symptomatic $I_i$: Undetected infected individuals in severity class $i$. Severity increaes with $i$ and we assume individuals must pass through all previous classes $I_1$: Mild infection $I_2$: Severe infection $C_i$ confirmed infected individuals in severity class $i$ $R = R_u + R_c$: individuals who have recovered from disease and are now immune $R_u$ recovered individuals whose infection were never detected $R_c$ recovered individuals who were confirmed cases $X$: Dead individuals Compared to Hill\u2019s model, we have reduced the number of severity classes and from 3 to 2, and we have added undetected infections and recoveries. In the data, we observe active confirmed cases $\\approx \\sum_i C_i$, deaths $\\approx X$, and confirmed recoveries $\\approx R_c$. These variables evolve according to the following system of differential equations. \\begin{align*} \\dot{S} & = -S \\left( R(t)(\\beta_1C_1 + (\\beta_1 + \\beta_3)I_1) + C_2 \\beta_2 \\right)/N \\\\ \\dot{E} & = S \\left( R(t)(\\beta_1C_1 + (\\beta_1 + \\beta_3)I_1) + C_2 \\beta_2 \\right)/N - a E \\\\ \\dot{I_1} & = a E - \\gamma_1 I_1 - p_1 I_1 - \\tau C_1 \\\\ \\dot{I_2} & = 0 \\\\ \\dot{C_1} & = \\tau I - \\gamma_1 C_1 - p_1 C_1 \\\\ \\dot{C_2} & = p_1(I_1 + C_1) - \\gamma_2 C_2 - p_2 C_2 \\\\ \\dot{R_u} & = \\sum_i \\gamma_i I_i \\\\ \\dot{R_c} & = \\sum_i \\gamma_i C_i \\\\ \\dot{X} & = p_2 C_2 \\end{align*} Where the parameters are : $\\beta_1$, $\\beta_2$ baseline rate at which confirmed infected individuals in class $i$ contact susceptibles and infect them $\\beta_1+\\beta_3$ baseline rate at which undetected infected individuals infect others $R(t)$ reduction in infection rate due to isolation, quarantine, and/or lockdown $a$ rate of progression from the exposed to infected class $\\gamma_i$ rate at which infected individuals in class $i$ recover from disease and become immune $p_1$ rate at which infected individuals in class $i$ progress to class $i+1$ $p_2$ death rate for individuals in the most severe stage of disease $\\tau$ rate at which infections of class $1$ are detected Note that we are assuming that all severe infections are detected (and hence $I_2 = 0$). We are also assuming that confirmed and unconfirmed cases have the same recovery and progression rates. Empirical Model \u00b6 Our data has country population, $N$, daily cumulative confirmed cases, $c_t$, deaths, $d_t$, and recoveries, $r_t$. We will assume that at a known time 0, there is an unknown portion of exposed individuals, $p_0$, so \\begin{align*} S(0) = & (1-p_0) N \\\\ E(0) = & p_0 N \\end{align*} and all other model variables are 0 at time 0. We assume that the observed data is distributed as \\begin{align*} d_t \\sim & N(X(t), \\sigma_X^2) \\\\ r_t \\sim & N(R_c(t), \\sigma_R^2) \\\\ c_t - d_t - r_t \\sim & N(C_1(t) + C_2(t), \\sigma_C^2) \\end{align*} We parameterize the reduction in infection rates from public policy as R(t) = 1- \\frac{\\rho_1}{1+\\exp(\\rho_2 -t)} This implies that infection rates drop by roughly 100$\\rho_1$ percent in the week centered on $t=\\rho_2$. Model Limitations \u00b6 An important limitation is that the model assumes all other parameters are constant over time. Although we allow changes in the infection rate, efforts have also been made to increase $\\tau$. Innovations in treatment and crowding of the medical system likely lead to variation in $\\gamma$ and $p$. Single Country Estimates \u00b6 Priors \u00b6 We use the follow prior distributions. The means of these are loosely based on Hill\u2019s defaults . using Distributions defaultcountrypriors() = Dict( \"a\" => truncated(Normal(1/5, 3), 1/14, 1.0), \"p[1]\" => truncated(Normal(0.05, 0.3), 0, 1), \"p[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b3[1]\" => truncated(Normal(0.133, 0.5), 0, 3), \"\u03b3[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b2[1]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03b2[2]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03c4\" => truncated(Normal(0.2, 2), 0, 10), \"pE0\" => truncated(Normal(0.001, 0.1), 0, 1), \"sigD\" => InverseGamma(2,3), \"sigC\" => InverseGamma(2,3), \"sigRc\" => InverseGamma(2,3), \"\u03c1[1]\" => truncated(Normal(0.5, 2), 0, 1), \"\u03c1[2]\" => truncated(Normal(30, 30), 0, 100) Summary statistics of draws from this prior distribution are below. priors = CovidSEIR.TimeVarying.defaultpriors() population=1e6 T = 150 ode = CovidSEIR.TimeVarying.odeSEIR() model=CovidSEIR.TimeVarying.turingmodel1(population, 1:T, missing, missing, missing,ode, priors); pr = CovidSEIR.priorreport(priors, 150,population,model=model) pr.tbl 15\u00d76 DataFrame \u2502 Row \u2502 parameter \u2502 mean \u2502 stddev \u2502 q5 \u2502 q50 \u2502 q95 \u2502 \u2502 \u2502 Any \u2502 Any \u2502 Any \u2502 Any \u2502 Any \u2502 Any \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2524 \u2502 1 \u2502 a \u2502 0.532233 \u2502 0.268347 \u2502 0.117241 \u2502 0.529217 \u2502 0.952566 \u2502 \u2502 2 \u2502 pE0 \u2502 0.079982 \u2502 0.0606146 \u2502 0.00648737 \u2502 0.067807 \u2502 0.195279 \u2502 \u2502 3 \u2502 p[1] \u2502 0.260924 \u2502 0.189688 \u2502 0.0229611 \u2502 0.224989 \u2502 0.625901 \u2502 \u2502 4 \u2502 p[2] \u2502 0.256997 \u2502 0.188511 \u2502 0.0218352 \u2502 0.220018 \u2502 0.622577 \u2502 \u2502 5 \u2502 sigC \u2502 3.01639 \u2502 6.44899 \u2502 0.629848 \u2502 1.78798 \u2502 8.60258 \u2502 \u2502 6 \u2502 sigD \u2502 3.18102 \u2502 12.3328 \u2502 0.633754 \u2502 1.805 \u2502 8.47742 \u2502 \u2502 7 \u2502 sigRc \u2502 2.99855 \u2502 6.49071 \u2502 0.628772 \u2502 1.79023 \u2502 8.49601 \u2502 \u2502 8 \u2502 \u03b2[1] \u2502 1.00466 \u2502 0.685058 \u2502 0.0976812 \u2502 0.894471 \u2502 2.28216 \u2502 \u2502 9 \u2502 \u03b2[2] \u2502 1.00318 \u2502 0.692572 \u2502 0.0918427 \u2502 0.886808 \u2502 2.31021 \u2502 \u2502 10 \u2502 \u03b2[3] \u2502 1.00481 \u2502 0.699168 \u2502 0.100009 \u2502 0.881171 \u2502 2.3245 \u2502 \u2502 11 \u2502 \u03b3[1] \u2502 0.453147 \u2502 0.326712 \u2502 0.0398693 \u2502 0.397213 \u2502 1.07346 \u2502 \u2502 12 \u2502 \u03b3[2] \u2502 0.258675 \u2502 0.186718 \u2502 0.0213659 \u2502 0.222894 \u2502 0.62579 \u2502 \u2502 13 \u2502 \u03c1[1] \u2502 0.503067 \u2502 0.287865 \u2502 0.0507148 \u2502 0.506703 \u2502 0.95071 \u2502 \u2502 14 \u2502 \u03c1[2] \u2502 38.0231 \u2502 22.7154 \u2502 4.88198 \u2502 35.7385 \u2502 79.5496 \u2502 \u2502 15 \u2502 \u03c4 \u2502 1.68004 \u2502 1.25971 \u2502 0.140418 \u2502 1.41916 \u2502 4.11939 \u2502 The following plots show the implications of this prior for the observed data. The faint lines on each figure shows 1000 trajectories sampled from the prior distribution. The black line is the prior mean. The shaded region is a pointwise 90% prior credible interval. plot(pr.figs[1], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[2], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[3], xlabel=\"Days\", ylabel=\"Portion of population\") Subjectively this prior seems reasonable. It is perhaps too concentrated on relatively fast epidemics. I may alter it, but it\u2019s what I used for the current results. Estimation \u00b6 We estimate the model by MCMC. Specifically, we use the Turing.jl package (Ge, Xu, and Ghahramani 2018 ) . For sampling, we use the No-U-Turn-Sampler variant of Hamiltonian Monte Carlo. In the results below we use 4 chains with 1000 warmup iterations, and 4000 iterations for the results. Results \u00b6 Canada Italy South Korea China United States Extensions \u00b6 Improve chain mixing. Estimate a multi-country model with some parameters common across countries and others multi-level distributions. About this document \u00b6 This document was created using Weave.jl. The code is available in on github . Ge, Hong, Kai Xu, and Zoubin Ghahramani. 2018. \u201cTuring: A Language for Flexible Probabilistic Inference.\u201d In International Conference on Artificial Intelligence and Statistics, AISTATS 2018, 9-11 April 2018, Playa Blanca, Lanzarote, Canary Islands, Spain , 1682\u201390. http://proceedings.mlr.press/v84/ge18b.html .","title":"Model"},{"location":"covid/#introduction","text":"","title":"Introduction"},{"location":"covid/#data","text":"We will use data from Johns Hopkins University Center for Systems Science and Engineering . It is gathered from a variety of sources and updated daily. JHU CSSE uses the data for this interactive website. . For another course, I wrote some notes using this data in python here. This data has daily cumulative counts of confirmed cases, recoveries, and deaths in each country (and provinces within some countries). covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 1 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 nmissing \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 Int64 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-04-03 \u2502 73 \u2502 0 \u2502 \u2502 2 \u2502 confirmed \u2502 724.544 \u2502 0 \u2502 0.0 \u2502 275586 \u2502 \u2502 292 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 80 \u2502 13286 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 181 \u2502 0 \u2502 \u2502 5 \u2502 Lat \u2502 21.562 \u2502 -41.4545 \u2502 23.6597 \u2502 71.7069 \u2502 \u2502 0 \u2502 \u2502 6 \u2502 Long \u2502 22.8574 \u2502 -135.0 \u2502 20.9727 \u2502 178.065 \u2502 \u2502 0 \u2502 \u2502 7 \u2502 deaths \u2502 31.4631 \u2502 0 \u2502 0.0 \u2502 14681 \u2502 \u2502 292 \u2502 \u2502 8 \u2502 recovered \u2502 208.677 \u2502 0 \u2502 0.0 \u2502 63612 \u2502 \u2502 1314 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 175 \u2502 438 \u2502 \u2502 10 \u2502 cpop \u2502 2.2724e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 1825 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502 15257 \u2502","title":"Data"},{"location":"covid/#model","text":"We will estimate a susceptible, exposed, infectious, recovered (SEIR) epidemiological model of Covid transmission. In particular, we will use a version based on this webapp by Allison Hill . The model contains the following variables, all of which are functions of time $S$: Susceptible individuals $E$: Exposed individuals - infected but not yet infectious or symptomatic $I_i$: Undetected infected individuals in severity class $i$. Severity increaes with $i$ and we assume individuals must pass through all previous classes $I_1$: Mild infection $I_2$: Severe infection $C_i$ confirmed infected individuals in severity class $i$ $R = R_u + R_c$: individuals who have recovered from disease and are now immune $R_u$ recovered individuals whose infection were never detected $R_c$ recovered individuals who were confirmed cases $X$: Dead individuals Compared to Hill\u2019s model, we have reduced the number of severity classes and from 3 to 2, and we have added undetected infections and recoveries. In the data, we observe active confirmed cases $\\approx \\sum_i C_i$, deaths $\\approx X$, and confirmed recoveries $\\approx R_c$. These variables evolve according to the following system of differential equations. \\begin{align*} \\dot{S} & = -S \\left( R(t)(\\beta_1C_1 + (\\beta_1 + \\beta_3)I_1) + C_2 \\beta_2 \\right)/N \\\\ \\dot{E} & = S \\left( R(t)(\\beta_1C_1 + (\\beta_1 + \\beta_3)I_1) + C_2 \\beta_2 \\right)/N - a E \\\\ \\dot{I_1} & = a E - \\gamma_1 I_1 - p_1 I_1 - \\tau C_1 \\\\ \\dot{I_2} & = 0 \\\\ \\dot{C_1} & = \\tau I - \\gamma_1 C_1 - p_1 C_1 \\\\ \\dot{C_2} & = p_1(I_1 + C_1) - \\gamma_2 C_2 - p_2 C_2 \\\\ \\dot{R_u} & = \\sum_i \\gamma_i I_i \\\\ \\dot{R_c} & = \\sum_i \\gamma_i C_i \\\\ \\dot{X} & = p_2 C_2 \\end{align*} Where the parameters are : $\\beta_1$, $\\beta_2$ baseline rate at which confirmed infected individuals in class $i$ contact susceptibles and infect them $\\beta_1+\\beta_3$ baseline rate at which undetected infected individuals infect others $R(t)$ reduction in infection rate due to isolation, quarantine, and/or lockdown $a$ rate of progression from the exposed to infected class $\\gamma_i$ rate at which infected individuals in class $i$ recover from disease and become immune $p_1$ rate at which infected individuals in class $i$ progress to class $i+1$ $p_2$ death rate for individuals in the most severe stage of disease $\\tau$ rate at which infections of class $1$ are detected Note that we are assuming that all severe infections are detected (and hence $I_2 = 0$). We are also assuming that confirmed and unconfirmed cases have the same recovery and progression rates.","title":"Model"},{"location":"covid/#empirical-model","text":"Our data has country population, $N$, daily cumulative confirmed cases, $c_t$, deaths, $d_t$, and recoveries, $r_t$. We will assume that at a known time 0, there is an unknown portion of exposed individuals, $p_0$, so \\begin{align*} S(0) = & (1-p_0) N \\\\ E(0) = & p_0 N \\end{align*} and all other model variables are 0 at time 0. We assume that the observed data is distributed as \\begin{align*} d_t \\sim & N(X(t), \\sigma_X^2) \\\\ r_t \\sim & N(R_c(t), \\sigma_R^2) \\\\ c_t - d_t - r_t \\sim & N(C_1(t) + C_2(t), \\sigma_C^2) \\end{align*} We parameterize the reduction in infection rates from public policy as R(t) = 1- \\frac{\\rho_1}{1+\\exp(\\rho_2 -t)} This implies that infection rates drop by roughly 100$\\rho_1$ percent in the week centered on $t=\\rho_2$.","title":"Empirical Model"},{"location":"covid/#model-limitations","text":"An important limitation is that the model assumes all other parameters are constant over time. Although we allow changes in the infection rate, efforts have also been made to increase $\\tau$. Innovations in treatment and crowding of the medical system likely lead to variation in $\\gamma$ and $p$.","title":"Model Limitations"},{"location":"covid/#single-country-estimates","text":"","title":"Single Country Estimates"},{"location":"covid/#priors","text":"We use the follow prior distributions. The means of these are loosely based on Hill\u2019s defaults . using Distributions defaultcountrypriors() = Dict( \"a\" => truncated(Normal(1/5, 3), 1/14, 1.0), \"p[1]\" => truncated(Normal(0.05, 0.3), 0, 1), \"p[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b3[1]\" => truncated(Normal(0.133, 0.5), 0, 3), \"\u03b3[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b2[1]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03b2[2]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03c4\" => truncated(Normal(0.2, 2), 0, 10), \"pE0\" => truncated(Normal(0.001, 0.1), 0, 1), \"sigD\" => InverseGamma(2,3), \"sigC\" => InverseGamma(2,3), \"sigRc\" => InverseGamma(2,3), \"\u03c1[1]\" => truncated(Normal(0.5, 2), 0, 1), \"\u03c1[2]\" => truncated(Normal(30, 30), 0, 100) Summary statistics of draws from this prior distribution are below. priors = CovidSEIR.TimeVarying.defaultpriors() population=1e6 T = 150 ode = CovidSEIR.TimeVarying.odeSEIR() model=CovidSEIR.TimeVarying.turingmodel1(population, 1:T, missing, missing, missing,ode, priors); pr = CovidSEIR.priorreport(priors, 150,population,model=model) pr.tbl 15\u00d76 DataFrame \u2502 Row \u2502 parameter \u2502 mean \u2502 stddev \u2502 q5 \u2502 q50 \u2502 q95 \u2502 \u2502 \u2502 Any \u2502 Any \u2502 Any \u2502 Any \u2502 Any \u2502 Any \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2524 \u2502 1 \u2502 a \u2502 0.532233 \u2502 0.268347 \u2502 0.117241 \u2502 0.529217 \u2502 0.952566 \u2502 \u2502 2 \u2502 pE0 \u2502 0.079982 \u2502 0.0606146 \u2502 0.00648737 \u2502 0.067807 \u2502 0.195279 \u2502 \u2502 3 \u2502 p[1] \u2502 0.260924 \u2502 0.189688 \u2502 0.0229611 \u2502 0.224989 \u2502 0.625901 \u2502 \u2502 4 \u2502 p[2] \u2502 0.256997 \u2502 0.188511 \u2502 0.0218352 \u2502 0.220018 \u2502 0.622577 \u2502 \u2502 5 \u2502 sigC \u2502 3.01639 \u2502 6.44899 \u2502 0.629848 \u2502 1.78798 \u2502 8.60258 \u2502 \u2502 6 \u2502 sigD \u2502 3.18102 \u2502 12.3328 \u2502 0.633754 \u2502 1.805 \u2502 8.47742 \u2502 \u2502 7 \u2502 sigRc \u2502 2.99855 \u2502 6.49071 \u2502 0.628772 \u2502 1.79023 \u2502 8.49601 \u2502 \u2502 8 \u2502 \u03b2[1] \u2502 1.00466 \u2502 0.685058 \u2502 0.0976812 \u2502 0.894471 \u2502 2.28216 \u2502 \u2502 9 \u2502 \u03b2[2] \u2502 1.00318 \u2502 0.692572 \u2502 0.0918427 \u2502 0.886808 \u2502 2.31021 \u2502 \u2502 10 \u2502 \u03b2[3] \u2502 1.00481 \u2502 0.699168 \u2502 0.100009 \u2502 0.881171 \u2502 2.3245 \u2502 \u2502 11 \u2502 \u03b3[1] \u2502 0.453147 \u2502 0.326712 \u2502 0.0398693 \u2502 0.397213 \u2502 1.07346 \u2502 \u2502 12 \u2502 \u03b3[2] \u2502 0.258675 \u2502 0.186718 \u2502 0.0213659 \u2502 0.222894 \u2502 0.62579 \u2502 \u2502 13 \u2502 \u03c1[1] \u2502 0.503067 \u2502 0.287865 \u2502 0.0507148 \u2502 0.506703 \u2502 0.95071 \u2502 \u2502 14 \u2502 \u03c1[2] \u2502 38.0231 \u2502 22.7154 \u2502 4.88198 \u2502 35.7385 \u2502 79.5496 \u2502 \u2502 15 \u2502 \u03c4 \u2502 1.68004 \u2502 1.25971 \u2502 0.140418 \u2502 1.41916 \u2502 4.11939 \u2502 The following plots show the implications of this prior for the observed data. The faint lines on each figure shows 1000 trajectories sampled from the prior distribution. The black line is the prior mean. The shaded region is a pointwise 90% prior credible interval. plot(pr.figs[1], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[2], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[3], xlabel=\"Days\", ylabel=\"Portion of population\") Subjectively this prior seems reasonable. It is perhaps too concentrated on relatively fast epidemics. I may alter it, but it\u2019s what I used for the current results.","title":"Priors"},{"location":"covid/#estimation","text":"We estimate the model by MCMC. Specifically, we use the Turing.jl package (Ge, Xu, and Ghahramani 2018 ) . For sampling, we use the No-U-Turn-Sampler variant of Hamiltonian Monte Carlo. In the results below we use 4 chains with 1000 warmup iterations, and 4000 iterations for the results.","title":"Estimation"},{"location":"covid/#results","text":"Canada Italy South Korea China United States","title":"Results"},{"location":"covid/#extensions","text":"Improve chain mixing. Estimate a multi-country model with some parameters common across countries and others multi-level distributions.","title":"Extensions"},{"location":"covid/#about-this-document","text":"This document was created using Weave.jl. The code is available in on github . Ge, Hong, Kai Xu, and Zoubin Ghahramani. 2018. \u201cTuring: A Language for Flexible Probabilistic Inference.\u201d In International Conference on Artificial Intelligence and Statistics, AISTATS 2018, 9-11 April 2018, Playa Blanca, Lanzarote, Canary Islands, Spain , 1682\u201390. http://proceedings.mlr.press/v84/ge18b.html .","title":"About this document"},{"location":"functions/","text":"Function Reference \u00b6 # CovidSEIR.countrymodel \u2014 Function . countrymodel(data::CountryData, priors=defaultcountrypriors(), ::Type{R}=Float64) where {R <: Real} = begni Returns Turing model for single country source # CovidSEIR.covidjhudata \u2014 Method . covidjhudata() Downloads most recent JHU CSSE data on covid cases, deaths, and recoveries. Returns a DataFrame source # CovidSEIR.plotvars \u2014 Method . plotvars(simdf::DataFrames.AbstractDataFrame, data::CountryData; dayt0=Dates.Date(\"2020-01-21\"), # one day before JHU data begins colors=ColorSchemes.colorschemes[:Set1_9]) Create plots showing fit and implications of simulated trajectories. source # CovidSEIR.priorreport \u2014 Function . priorreport((priors=defaultcountrypriors(), T=100, population=1e7) Create tables and figures summarizing priors. source # CovidSEIR.simtrajectories \u2014 Method . simtrajectories(cc::AbstractMCMC.AbstractChains, data::CountryData, ts; ic=Iterators.product(StatsBase.sample(1:size(cc,1),300, replace=false), 1:size(cc,3))) Simulate trajectories based on parameter values in chain cc . source # CovidSEIR.odeSEIR \u2014 Method . odeSEIR() Sets up ODE for SEIR model with unconfirmed cases. Returns an ODEProblem source # CovidSEIR.paramvars \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.paramvec \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.systemvars \u2014 Method . Transfrom ODE variables to/from vector source # CovidSEIR.systemvec \u2014 Method . Transfrom ODE variables to/from vector source Index \u00b6 CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Functions"},{"location":"functions/#function-reference","text":"# CovidSEIR.countrymodel \u2014 Function . countrymodel(data::CountryData, priors=defaultcountrypriors(), ::Type{R}=Float64) where {R <: Real} = begni Returns Turing model for single country source # CovidSEIR.covidjhudata \u2014 Method . covidjhudata() Downloads most recent JHU CSSE data on covid cases, deaths, and recoveries. Returns a DataFrame source # CovidSEIR.plotvars \u2014 Method . plotvars(simdf::DataFrames.AbstractDataFrame, data::CountryData; dayt0=Dates.Date(\"2020-01-21\"), # one day before JHU data begins colors=ColorSchemes.colorschemes[:Set1_9]) Create plots showing fit and implications of simulated trajectories. source # CovidSEIR.priorreport \u2014 Function . priorreport((priors=defaultcountrypriors(), T=100, population=1e7) Create tables and figures summarizing priors. source # CovidSEIR.simtrajectories \u2014 Method . simtrajectories(cc::AbstractMCMC.AbstractChains, data::CountryData, ts; ic=Iterators.product(StatsBase.sample(1:size(cc,1),300, replace=false), 1:size(cc,3))) Simulate trajectories based on parameter values in chain cc . source # CovidSEIR.odeSEIR \u2014 Method . odeSEIR() Sets up ODE for SEIR model with unconfirmed cases. Returns an ODEProblem source # CovidSEIR.paramvars \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.paramvec \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.systemvars \u2014 Method . Transfrom ODE variables to/from vector source # CovidSEIR.systemvec \u2014 Method . Transfrom ODE variables to/from vector source","title":"Function Reference"},{"location":"functions/#index","text":"CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Index"},{"location":"italy/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata(); Italy \u00b6 italy = CountryData(covdf, \"Italy\"); itmod = CovidSEIR.TimeVarying.countrymodel(italy) cc = Turing.psample(itmod, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/italy_tv_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/italy_tv_2020-04-03.jld2\" cc; Estimates \u00b6 plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.3009 0.3013 0.0024 0.0234 64.2570 4.2629 pE0 0.0000 0.0000 0.0000 0.0000 64.2570 3.0792 p[1] 0.0068 0.0041 0.0000 0.0003 64.2570 3.7877 p[2] 0.1561 0.0485 0.0004 0.0037 64.2570 1.9704 sigC 669.4793 70.1421 0.5545 3.6608 158.4678 1.0734 sigD 61.2248 8.5288 0.0674 0.5321 72.8818 1.3144 sigRc 160.9732 14.0880 0.1114 0.5927 424.0173 1.0384 \u03b2[1] 0.2241 0.1423 0.0011 0.0097 70.0549 1.2430 \u03b2[2] 0.3739 0.5601 0.0044 0.0364 64.2570 1.6862 \u03b2[3] 0.3111 0.1763 0.0014 0.0120 67.2841 1.2820 \u03b3[1] 0.0067 0.0011 0.0000 0.0001 72.5685 1.2931 \u03b3[2] 0.1323 0.0434 0.0003 0.0033 64.2570 2.0327 \u03c1[1] 0.9906 0.0132 0.0001 0.0006 238.2584 1.0670 \u03c1[2] 53.3803 2.4897 0.0197 0.1947 64.2570 4.5280 \u03c4 0.0296 0.0193 0.0002 0.0015 64.2570 2.4590 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0942 0.1189 0.1396 0.3641 0.9796 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0000 0.0022 0.0085 0.0097 0.0114 p[2] 0.0816 0.1027 0.1630 0.1887 0.2501 sigC 550.3235 619.9723 662.6114 712.8723 823.7611 sigD 45.7483 55.2060 61.0244 66.9251 78.5129 sigRc 136.4018 151.0618 159.8513 169.6996 192.3234 \u03b2[1] 0.0107 0.1131 0.2034 0.3157 0.5369 \u03b2[2] 0.0076 0.0523 0.1275 0.3773 2.0700 \u03b2[3] 0.0365 0.1757 0.2897 0.4343 0.6782 \u03b3[1] 0.0047 0.0059 0.0066 0.0074 0.0088 \u03b3[2] 0.0657 0.0832 0.1384 0.1622 0.2124 \u03c1[1] 0.9604 0.9882 0.9944 0.9977 0.9998 \u03c1[2] 51.3458 51.7934 52.1321 54.1699 58.7875 \u03c4 0.0001 0.0056 0.0346 0.0437 0.0598 Fit \u00b6 sdf = simtrajectories(cc, italy, 1:200) f = plotvars(sdf, italy) f.fit As with Canada, the fit is very good, and the posterior distribution of observables is very precise. Implications \u00b6 for fig in f.trajectories display(fig) end","title":"Italy"},{"location":"italy/#italy","text":"italy = CountryData(covdf, \"Italy\"); itmod = CovidSEIR.TimeVarying.countrymodel(italy) cc = Turing.psample(itmod, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/italy_tv_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/italy_tv_2020-04-03.jld2\" cc;","title":"Italy"},{"location":"italy/#estimates","text":"plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.3009 0.3013 0.0024 0.0234 64.2570 4.2629 pE0 0.0000 0.0000 0.0000 0.0000 64.2570 3.0792 p[1] 0.0068 0.0041 0.0000 0.0003 64.2570 3.7877 p[2] 0.1561 0.0485 0.0004 0.0037 64.2570 1.9704 sigC 669.4793 70.1421 0.5545 3.6608 158.4678 1.0734 sigD 61.2248 8.5288 0.0674 0.5321 72.8818 1.3144 sigRc 160.9732 14.0880 0.1114 0.5927 424.0173 1.0384 \u03b2[1] 0.2241 0.1423 0.0011 0.0097 70.0549 1.2430 \u03b2[2] 0.3739 0.5601 0.0044 0.0364 64.2570 1.6862 \u03b2[3] 0.3111 0.1763 0.0014 0.0120 67.2841 1.2820 \u03b3[1] 0.0067 0.0011 0.0000 0.0001 72.5685 1.2931 \u03b3[2] 0.1323 0.0434 0.0003 0.0033 64.2570 2.0327 \u03c1[1] 0.9906 0.0132 0.0001 0.0006 238.2584 1.0670 \u03c1[2] 53.3803 2.4897 0.0197 0.1947 64.2570 4.5280 \u03c4 0.0296 0.0193 0.0002 0.0015 64.2570 2.4590 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0942 0.1189 0.1396 0.3641 0.9796 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0000 0.0022 0.0085 0.0097 0.0114 p[2] 0.0816 0.1027 0.1630 0.1887 0.2501 sigC 550.3235 619.9723 662.6114 712.8723 823.7611 sigD 45.7483 55.2060 61.0244 66.9251 78.5129 sigRc 136.4018 151.0618 159.8513 169.6996 192.3234 \u03b2[1] 0.0107 0.1131 0.2034 0.3157 0.5369 \u03b2[2] 0.0076 0.0523 0.1275 0.3773 2.0700 \u03b2[3] 0.0365 0.1757 0.2897 0.4343 0.6782 \u03b3[1] 0.0047 0.0059 0.0066 0.0074 0.0088 \u03b3[2] 0.0657 0.0832 0.1384 0.1622 0.2124 \u03c1[1] 0.9604 0.9882 0.9944 0.9977 0.9998 \u03c1[2] 51.3458 51.7934 52.1321 54.1699 58.7875 \u03c4 0.0001 0.0056 0.0346 0.0437 0.0598","title":"Estimates"},{"location":"italy/#fit","text":"sdf = simtrajectories(cc, italy, 1:200) f = plotvars(sdf, italy) f.fit As with Canada, the fit is very good, and the posterior distribution of observables is very precise.","title":"Fit"},{"location":"italy/#implications","text":"for fig in f.trajectories display(fig) end","title":"Implications"},{"location":"korea/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata(); South Korea \u00b6 korea = CountryData(covdf, \"Korea, South\") CountryData{Float64,Int64}(5.1635256e7, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0 \u2026 126.0, 131.0, 139.0, 144.0, 152.0, 158.0, 162.0, 165.0, 169.0, 174.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 3730. 0, 4144.0, 4528.0, 4811.0, 5033.0, 5228.0, 5408.0, 5567.0, 5828.0, 6021.0], [1.0, 1.0, 2.0, 2.0, 3.0, 4.0, 4.0, 4.0, 4.0, 11.0 \u2026 5281.0, 4966.0, 466 5.0, 4523.0, 4398.0, 4275.0, 4216.0, 4155.0, 3979.0, 3867.0]) using Turing mdl = CovidSEIR.TimeVarying.countrymodel(korea) cc = Turing.psample(mdl, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/korea_tv_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/korea_tv_2020-04-03.jld2\" cc dayt0; Estimates \u00b6 plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.3318 0.1198 0.0009 0.0055 202.5444 1.0440 pE0 0.0000 0.0000 0.0000 0.0000 127.1879 1.0589 p[1] 0.0406 0.0278 0.0002 0.0020 64.2570 1.8436 p[2] 0.1086 0.1981 0.0016 0.0138 64.2570 1.6839 sigC 263.1219 61.4888 0.4861 4.3856 64.2570 1.7283 sigD 7.3173 1.4366 0.0114 0.0928 64.2570 1.4225 sigRc 635.9013 103.0874 0.8150 6.7176 64.2570 1.4837 \u03b2[1] 0.3423 0.1827 0.0014 0.0112 70.1779 1.3082 \u03b2[2] 0.0660 0.1728 0.0014 0.0090 86.6956 1.2103 \u03b2[3] 0.5721 0.4471 0.0035 0.0193 203.7240 1.0716 \u03b3[1] 0.0070 0.0096 0.0001 0.0008 64.2570 2.6411 \u03b3[2] 0.1350 0.1560 0.0012 0.0100 65.7633 1.3472 \u03c1[1] 0.9966 0.0089 0.0001 0.0003 554.6391 1.0362 \u03c1[2] 39.5956 0.9166 0.0072 0.0482 98.0607 1.1285 \u03c4 0.8106 0.8588 0.0068 0.0374 391.5204 1.0285 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.2026 0.2501 0.2998 0.3734 0.6811 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0008 0.0027 0.0483 0.0599 0.0842 p[2] 0.0014 0.0019 0.0024 0.1507 0.6727 sigC 188.9998 218.0311 239.0684 309.5063 401.1423 sigD 4.9916 6.1158 7.3347 8.3122 10.2576 sigRc 476.9011 559.0011 614.9013 710.2584 855.0331 \u03b2[1] 0.0153 0.2023 0.3449 0.4805 0.6640 \u03b2[2] 0.0000 0.0003 0.0010 0.0243 0.6046 \u03b2[3] 0.0313 0.2425 0.4611 0.8003 1.6856 \u03b3[1] 0.0000 0.0003 0.0009 0.0203 0.0237 \u03b3[2] 0.0383 0.0546 0.0680 0.1152 0.6220 \u03c1[1] 0.9813 0.9968 0.9986 0.9995 0.9999 \u03c1[2] 37.8331 38.9631 39.5679 40.1664 41.5414 \u03c4 0.2153 0.3125 0.4618 0.8724 3.4682 Fit \u00b6 sdf = simtrajectories(cc, korea, 1:150) f = plotvars(sdf, korea, dayt0=dayt0) plot!(f.fit, xlim=nothing) We see that the model does not fit the rapid drop in new cases in South Korea. This may be caused by the model\u2019s implausible assumption that transmission and testing rates are constant over time. Implications \u00b6 for fig in f.trajectories display(plot(fig, xlim=nothing)) end","title":"South Korea"},{"location":"korea/#south-korea","text":"korea = CountryData(covdf, \"Korea, South\") CountryData{Float64,Int64}(5.1635256e7, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0 \u2026 126.0, 131.0, 139.0, 144.0, 152.0, 158.0, 162.0, 165.0, 169.0, 174.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 3730. 0, 4144.0, 4528.0, 4811.0, 5033.0, 5228.0, 5408.0, 5567.0, 5828.0, 6021.0], [1.0, 1.0, 2.0, 2.0, 3.0, 4.0, 4.0, 4.0, 4.0, 11.0 \u2026 5281.0, 4966.0, 466 5.0, 4523.0, 4398.0, 4275.0, 4216.0, 4155.0, 3979.0, 3867.0]) using Turing mdl = CovidSEIR.TimeVarying.countrymodel(korea) cc = Turing.psample(mdl, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/korea_tv_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/korea_tv_2020-04-03.jld2\" cc dayt0;","title":"South Korea"},{"location":"korea/#estimates","text":"plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.3318 0.1198 0.0009 0.0055 202.5444 1.0440 pE0 0.0000 0.0000 0.0000 0.0000 127.1879 1.0589 p[1] 0.0406 0.0278 0.0002 0.0020 64.2570 1.8436 p[2] 0.1086 0.1981 0.0016 0.0138 64.2570 1.6839 sigC 263.1219 61.4888 0.4861 4.3856 64.2570 1.7283 sigD 7.3173 1.4366 0.0114 0.0928 64.2570 1.4225 sigRc 635.9013 103.0874 0.8150 6.7176 64.2570 1.4837 \u03b2[1] 0.3423 0.1827 0.0014 0.0112 70.1779 1.3082 \u03b2[2] 0.0660 0.1728 0.0014 0.0090 86.6956 1.2103 \u03b2[3] 0.5721 0.4471 0.0035 0.0193 203.7240 1.0716 \u03b3[1] 0.0070 0.0096 0.0001 0.0008 64.2570 2.6411 \u03b3[2] 0.1350 0.1560 0.0012 0.0100 65.7633 1.3472 \u03c1[1] 0.9966 0.0089 0.0001 0.0003 554.6391 1.0362 \u03c1[2] 39.5956 0.9166 0.0072 0.0482 98.0607 1.1285 \u03c4 0.8106 0.8588 0.0068 0.0374 391.5204 1.0285 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.2026 0.2501 0.2998 0.3734 0.6811 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0008 0.0027 0.0483 0.0599 0.0842 p[2] 0.0014 0.0019 0.0024 0.1507 0.6727 sigC 188.9998 218.0311 239.0684 309.5063 401.1423 sigD 4.9916 6.1158 7.3347 8.3122 10.2576 sigRc 476.9011 559.0011 614.9013 710.2584 855.0331 \u03b2[1] 0.0153 0.2023 0.3449 0.4805 0.6640 \u03b2[2] 0.0000 0.0003 0.0010 0.0243 0.6046 \u03b2[3] 0.0313 0.2425 0.4611 0.8003 1.6856 \u03b3[1] 0.0000 0.0003 0.0009 0.0203 0.0237 \u03b3[2] 0.0383 0.0546 0.0680 0.1152 0.6220 \u03c1[1] 0.9813 0.9968 0.9986 0.9995 0.9999 \u03c1[2] 37.8331 38.9631 39.5679 40.1664 41.5414 \u03c4 0.2153 0.3125 0.4618 0.8724 3.4682","title":"Estimates"},{"location":"korea/#fit","text":"sdf = simtrajectories(cc, korea, 1:150) f = plotvars(sdf, korea, dayt0=dayt0) plot!(f.fit, xlim=nothing) We see that the model does not fit the rapid drop in new cases in South Korea. This may be caused by the model\u2019s implausible assumption that transmission and testing rates are constant over time.","title":"Fit"},{"location":"korea/#implications","text":"for fig in f.trajectories display(plot(fig, xlim=nothing)) end","title":"Implications"},{"location":"license/","text":"The model and results are licensed under a Creative Commons Attribution-ShareAlike 4.0 International License and were written by Paul Schrimpf. BibTeX citation. The license for the package source code is here.","title":"License"},{"location":"us/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots, Dates Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata(); United States \u00b6 us = CountryData(covdf, \"US\") CountryData{Float64,Int64}(3.2716743e8, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0 \u2026 942.0, 1209.0, 1581.0, 2026.0, 2467.0, 2978.0, 3873.0, 4757.0, 5926.0, 7087.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 361.0, 681.0, 869.0, 1072.0, 2665.0, 5644.0, 7024.0, 8474.0, 9001.0, 97 07.0], [1.0, 1.0, 2.0, 2.0, 5.0, 5.0, 5.0, 5.0, 5.0, 7.0 \u2026 64475.0, 81946 .0, 99207.0, 118380.0, 135754.0, 153185.0, 177275.0, 200141.0, 228526.0, 25 8792.0]) using Turing mdl = CovidSEIR.TimeVarying.countrymodel(us) cc = Turing.psample(mdl, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/us_tv_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/us_tv_2020-04-03.jld2\" cc; Estimates \u00b6 plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.1498 0.0680 0.0005 0.0050 65.8057 1.3093 pE0 0.0000 0.0000 0.0000 0.0000 64.2570 1.0602 p[1] 0.1184 0.1003 0.0008 0.0078 64.2570 1.5549 p[2] 0.0141 0.0093 0.0001 0.0007 64.2570 2.4426 sigC 899.6472 789.9190 6.2449 62.1384 64.2570 1.1887 sigD 39.6633 20.3205 0.1606 1.5839 64.2570 1.9631 sigRc 472.4292 46.1853 0.3651 3.2761 64.3544 1.2617 \u03b2[1] 1.0599 0.5753 0.0045 0.0441 64.2570 1.4672 \u03b2[2] 0.6552 0.4150 0.0033 0.0306 64.2570 1.1484 \u03b2[3] 0.7229 0.5938 0.0047 0.0425 72.0243 1.2670 \u03b3[1] 0.0356 0.0788 0.0006 0.0061 64.2570 1.6200 \u03b3[2] 0.0153 0.0128 0.0001 0.0010 64.2570 2.6200 \u03c1[1] 0.8798 0.0841 0.0007 0.0062 64.4496 1.2248 \u03c1[2] 62.2782 1.3250 0.0105 0.1027 64.2570 1.6054 \u03c4 2.0886 1.4400 0.0114 0.1079 64.2570 1.5383 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0751 0.1036 0.1286 0.1814 0.3307 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0063 0.0481 0.0740 0.1712 0.3796 p[2] 0.0042 0.0054 0.0107 0.0204 0.0352 sigC 636.3831 692.6607 745.6512 798.9718 4549.9982 sigD 22.0503 25.3386 29.3036 41.8827 84.9655 sigRc 398.6326 434.1788 469.5690 502.9111 567.0858 \u03b2[1] 0.3220 0.6564 0.8828 1.2032 2.5174 \u03b2[2] 0.1374 0.3930 0.4983 0.8511 1.7395 \u03b2[3] 0.0217 0.2564 0.5762 1.1005 2.1287 \u03b3[1] 0.0001 0.0011 0.0024 0.0147 0.3012 \u03b3[2] 0.0025 0.0052 0.0106 0.0240 0.0466 \u03c1[1] 0.6988 0.8274 0.8916 0.9485 0.9978 \u03c1[2] 58.8801 62.1055 62.6430 63.0861 63.9437 \u03c4 0.0001 0.2598 2.2407 3.1508 4.5803 Fit \u00b6 sdf = simtrajectories(cc, us, 1:200) f = plotvars(sdf, us) plot(f.fit, ylim=(0, maximum(us.active)*1.3)) Implications \u00b6 for fig in f.trajectories display(plot(fig)) end","title":"United States"},{"location":"us/#united-states","text":"us = CountryData(covdf, \"US\") CountryData{Float64,Int64}(3.2716743e8, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0 \u2026 942.0, 1209.0, 1581.0, 2026.0, 2467.0, 2978.0, 3873.0, 4757.0, 5926.0, 7087.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 361.0, 681.0, 869.0, 1072.0, 2665.0, 5644.0, 7024.0, 8474.0, 9001.0, 97 07.0], [1.0, 1.0, 2.0, 2.0, 5.0, 5.0, 5.0, 5.0, 5.0, 7.0 \u2026 64475.0, 81946 .0, 99207.0, 118380.0, 135754.0, 153185.0, 177275.0, 200141.0, 228526.0, 25 8792.0]) using Turing mdl = CovidSEIR.TimeVarying.countrymodel(us) cc = Turing.psample(mdl, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/us_tv_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/us_tv_2020-04-03.jld2\" cc;","title":"United States"},{"location":"us/#estimates","text":"plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.1498 0.0680 0.0005 0.0050 65.8057 1.3093 pE0 0.0000 0.0000 0.0000 0.0000 64.2570 1.0602 p[1] 0.1184 0.1003 0.0008 0.0078 64.2570 1.5549 p[2] 0.0141 0.0093 0.0001 0.0007 64.2570 2.4426 sigC 899.6472 789.9190 6.2449 62.1384 64.2570 1.1887 sigD 39.6633 20.3205 0.1606 1.5839 64.2570 1.9631 sigRc 472.4292 46.1853 0.3651 3.2761 64.3544 1.2617 \u03b2[1] 1.0599 0.5753 0.0045 0.0441 64.2570 1.4672 \u03b2[2] 0.6552 0.4150 0.0033 0.0306 64.2570 1.1484 \u03b2[3] 0.7229 0.5938 0.0047 0.0425 72.0243 1.2670 \u03b3[1] 0.0356 0.0788 0.0006 0.0061 64.2570 1.6200 \u03b3[2] 0.0153 0.0128 0.0001 0.0010 64.2570 2.6200 \u03c1[1] 0.8798 0.0841 0.0007 0.0062 64.4496 1.2248 \u03c1[2] 62.2782 1.3250 0.0105 0.1027 64.2570 1.6054 \u03c4 2.0886 1.4400 0.0114 0.1079 64.2570 1.5383 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0751 0.1036 0.1286 0.1814 0.3307 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0063 0.0481 0.0740 0.1712 0.3796 p[2] 0.0042 0.0054 0.0107 0.0204 0.0352 sigC 636.3831 692.6607 745.6512 798.9718 4549.9982 sigD 22.0503 25.3386 29.3036 41.8827 84.9655 sigRc 398.6326 434.1788 469.5690 502.9111 567.0858 \u03b2[1] 0.3220 0.6564 0.8828 1.2032 2.5174 \u03b2[2] 0.1374 0.3930 0.4983 0.8511 1.7395 \u03b2[3] 0.0217 0.2564 0.5762 1.1005 2.1287 \u03b3[1] 0.0001 0.0011 0.0024 0.0147 0.3012 \u03b3[2] 0.0025 0.0052 0.0106 0.0240 0.0466 \u03c1[1] 0.6988 0.8274 0.8916 0.9485 0.9978 \u03c1[2] 58.8801 62.1055 62.6430 63.0861 63.9437 \u03c4 0.0001 0.2598 2.2407 3.1508 4.5803","title":"Estimates"},{"location":"us/#fit","text":"sdf = simtrajectories(cc, us, 1:200) f = plotvars(sdf, us) plot(f.fit, ylim=(0, maximum(us.active)*1.3))","title":"Fit"},{"location":"us/#implications","text":"for fig in f.trajectories display(plot(fig)) end","title":"Implications"}]}