{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CovidSEIR.jl \u00b6 Index \u00b6 CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Package Docs"},{"location":"#covidseirjl","text":"","title":"CovidSEIR.jl"},{"location":"#index","text":"CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Index"},{"location":"canada/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-03-30 \u2502 69 \u2502 \u2502 2 \u2502 confirmed \u2502 556.139 \u2502 0 \u2502 0.0 \u2502 161807 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 79 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 178 \u2502 \u2502 5 \u2502 Lat \u2502 21.8808 \u2502 -41.4545 \u2502 23.7649 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 23.273 \u2502 -135.0 \u2502 20.9727 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 22.3605 \u2502 0 \u2502 0.0 \u2502 11591 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 175.706 \u2502 0 \u2502 0.0 \u2502 62889 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 172 \u2502 \u2502 10 \u2502 cpop \u2502 2.2813e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502 Canada \u00b6 We estimate the model with the following code. It takes about an hour. canada = CountryData(covdf, \"Canada\"); using Turing canmod = countrymodel(canada) cc = Turing.psample(canmod, NUTS(0.65), 10000, 4) import JLD2 JLD2.@save \"$jmddir/canada_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/canada_2020-03-30.jld2\" cc; Estimates \u00b6 plot(cc) We can see that there might be convergence issues. There are large differences between the four chains for some parameters. describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.3647 0.2798 0.0015 0.0105 217.3844 1.1815 pE0 0.0000 0.0000 0.0000 0.0000 217.2186 1.1875 p[1] 0.1321 0.2057 0.0011 0.0097 144.5783 1.4231 p[2] 0.1856 0.2392 0.0013 0.0118 144.5783 1.6944 sigC 94.3104 23.1642 0.1221 1.1524 144.5783 2.6336 sigD 1.6160 0.1536 0.0008 0.0044 465.4527 1.0847 sigRc 30.0351 3.1658 0.0167 0.1118 199.9868 1.2392 \u03b2[1] 0.4606 0.2904 0.0015 0.0084 635.8445 1.0200 \u03b2[2] 0.8386 0.6542 0.0034 0.0210 424.9685 1.0281 \u03b3[1] 0.0740 0.1947 0.0010 0.0077 193.4002 1.0954 \u03b3[2] 0.1691 0.1934 0.0010 0.0078 149.0449 1.2337 \u03c4 1.2070 1.2796 0.0067 0.0419 241.8606 1.1243 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0749 0.1198 0.2534 0.5913 0.9524 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0000 0.0044 0.0135 0.2082 0.6994 p[2] 0.0022 0.0032 0.0622 0.2960 0.8015 sigC 35.4464 93.2902 100.5024 107.1034 121.1550 sigD 1.3305 1.5134 1.6095 1.7108 1.9398 sigRc 23.4389 28.0750 30.0931 32.1007 36.1762 \u03b2[1] 0.0350 0.2803 0.4214 0.5680 1.2424 \u03b2[2] 0.0139 0.3437 0.6846 1.1962 2.4596 \u03b3[1] 0.0013 0.0084 0.0118 0.0174 0.7492 \u03b3[2] 0.0013 0.0111 0.0905 0.2824 0.6573 \u03c4 0.0000 0.0609 0.8307 1.9548 4.3767 The parameter estimates are generally not very precise. Fit \u00b6 sdf = simtrajectories(cc, canada, 1:150) f = plotvars(sdf, canada) f.fit In this figure, solid lines are observed data, dashed lines are posterior means, and the shaded region is a pointwise 90% credible interval. Note that the last day of data used in the estimation was March 27th. The fit appears quite good. The fitted estimates are also remarkably precise. Although individual parameters are not precisely estimated, the combination of them that gives rise to the observed data is precisely estimated. Implications \u00b6 We now look at the model\u2019s projections for some observed and unobserved variables. for fig in f.trajectories display(fig) end In general we see a similar pattern as noted above: the posteriors for observed variables are fairly precise. However, the posteriors for unobserved variables, such as the portion of undetected infections and the portion of mild infections, are very imprecise.","title":"Canada"},{"location":"canada/#canada","text":"We estimate the model with the following code. It takes about an hour. canada = CountryData(covdf, \"Canada\"); using Turing canmod = countrymodel(canada) cc = Turing.psample(canmod, NUTS(0.65), 10000, 4) import JLD2 JLD2.@save \"$jmddir/canada_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/canada_2020-03-30.jld2\" cc;","title":"Canada"},{"location":"canada/#estimates","text":"plot(cc) We can see that there might be convergence issues. There are large differences between the four chains for some parameters. describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.3647 0.2798 0.0015 0.0105 217.3844 1.1815 pE0 0.0000 0.0000 0.0000 0.0000 217.2186 1.1875 p[1] 0.1321 0.2057 0.0011 0.0097 144.5783 1.4231 p[2] 0.1856 0.2392 0.0013 0.0118 144.5783 1.6944 sigC 94.3104 23.1642 0.1221 1.1524 144.5783 2.6336 sigD 1.6160 0.1536 0.0008 0.0044 465.4527 1.0847 sigRc 30.0351 3.1658 0.0167 0.1118 199.9868 1.2392 \u03b2[1] 0.4606 0.2904 0.0015 0.0084 635.8445 1.0200 \u03b2[2] 0.8386 0.6542 0.0034 0.0210 424.9685 1.0281 \u03b3[1] 0.0740 0.1947 0.0010 0.0077 193.4002 1.0954 \u03b3[2] 0.1691 0.1934 0.0010 0.0078 149.0449 1.2337 \u03c4 1.2070 1.2796 0.0067 0.0419 241.8606 1.1243 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0749 0.1198 0.2534 0.5913 0.9524 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0000 0.0044 0.0135 0.2082 0.6994 p[2] 0.0022 0.0032 0.0622 0.2960 0.8015 sigC 35.4464 93.2902 100.5024 107.1034 121.1550 sigD 1.3305 1.5134 1.6095 1.7108 1.9398 sigRc 23.4389 28.0750 30.0931 32.1007 36.1762 \u03b2[1] 0.0350 0.2803 0.4214 0.5680 1.2424 \u03b2[2] 0.0139 0.3437 0.6846 1.1962 2.4596 \u03b3[1] 0.0013 0.0084 0.0118 0.0174 0.7492 \u03b3[2] 0.0013 0.0111 0.0905 0.2824 0.6573 \u03c4 0.0000 0.0609 0.8307 1.9548 4.3767 The parameter estimates are generally not very precise.","title":"Estimates"},{"location":"canada/#fit","text":"sdf = simtrajectories(cc, canada, 1:150) f = plotvars(sdf, canada) f.fit In this figure, solid lines are observed data, dashed lines are posterior means, and the shaded region is a pointwise 90% credible interval. Note that the last day of data used in the estimation was March 27th. The fit appears quite good. The fitted estimates are also remarkably precise. Although individual parameters are not precisely estimated, the combination of them that gives rise to the observed data is precisely estimated.","title":"Fit"},{"location":"canada/#implications","text":"We now look at the model\u2019s projections for some observed and unobserved variables. for fig in f.trajectories display(fig) end In general we see a similar pattern as noted above: the posteriors for observed variables are fairly precise. However, the posteriors for unobserved variables, such as the portion of undetected infections and the portion of mild infections, are very imprecise.","title":"Implications"},{"location":"china/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-03-30 \u2502 69 \u2502 \u2502 2 \u2502 confirmed \u2502 556.139 \u2502 0 \u2502 0.0 \u2502 161807 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 79 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 178 \u2502 \u2502 5 \u2502 Lat \u2502 21.8808 \u2502 -41.4545 \u2502 23.7649 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 23.273 \u2502 -135.0 \u2502 20.9727 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 22.3605 \u2502 0 \u2502 0.0 \u2502 11591 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 175.706 \u2502 0 \u2502 0.0 \u2502 62889 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 172 \u2502 \u2502 10 \u2502 cpop \u2502 2.2813e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502 China \u00b6 using Dates dayt0 = Dates.Date(\"2020-01-22\") - Dates.Day(1) china = CountryData(covdf, \"China\", 1) CountryData{Float64,Int64}(1.39273e9, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 60 , 61, 62, 63, 64, 65, 66, 67, 68, 69], [17.0, 18.0, 26.0, 42.0, 56.0, 82.0, 131.0, 133.0, 171.0, 213.0 \u2026 3259.0, 3274.0, 3274.0, 3281.0, 3285.0, 329 1.0, 3296.0, 3299.0, 3304.0, 3308.0], [28.0, 30.0, 36.0, 39.0, 49.0, 58.0, 101.0, 120.0, 135.0, 214.0 \u2026 71857.0, 72362.0, 72814.0, 73280.0, 73773.0, 74181.0, 74720.0, 75100.0, 75582.0, 75923.0], [503.0, 595.0, 858.0, 1325.0 , 1970.0, 2737.0, 5277.0, 5834.0, 7835.0, 9375.0 \u2026 6189.0, 5799.0, 5410.0 , 5030.0, 4603.0, 4310.0, 3881.0, 3600.0, 3236.0, 2967.0]) using Turing mdl = countrymodel(china) cc = Turing.psample(mdl, NUTS(0.65), 10000, 4) import JLD2 JLD2.@save \"$jmddir/china_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/china_2020-03-30.jld2\" cc; Estimates \u00b6 plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.1116 0.0159 0.0001 0.0004 676.9759 1.0043 pE0 0.0046 0.0112 0.0001 0.0001 8053.5121 1.0002 p[1] 0.0009 0.0095 0.0000 0.0004 191.8930 1.0284 p[2] 0.2497 0.0816 0.0004 0.0022 395.7077 1.0201 sigC 12804.4406 1201.1866 6.3308 12.5916 8833.0310 1.0013 sigD 158.8962 15.4258 0.0813 0.2543 1203.2501 1.0093 sigRc 6068.5479 901.6056 4.7519 33.2961 164.4248 1.0349 \u03b2[1] 0.0009 0.0016 0.0000 0.0000 326.5190 1.0185 \u03b2[2] 0.7364 0.6101 0.0032 0.0072 2664.7742 1.0070 \u03b3[1] 0.0483 0.0113 0.0001 0.0004 241.4455 1.0245 \u03b3[2] 0.0448 0.0375 0.0002 0.0010 525.8293 1.0228 \u03c4 0.0039 0.0057 0.0000 0.0001 1587.6686 1.0098 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0857 0.1003 0.1101 0.1208 0.1472 pE0 0.0003 0.0007 0.0015 0.0037 0.0314 p[1] 0.0000 0.0000 0.0001 0.0002 0.0007 p[2] 0.1222 0.2008 0.2404 0.2878 0.4421 sigC 10652.8196 11969.0427 12734.4509 13539.4288 15393.5293 sigD 132.2765 148.1737 157.4544 168.0933 192.5570 sigRc 4864.8856 5536.1782 5961.5187 6437.3924 7743.8764 \u03b2[1] 0.0000 0.0002 0.0005 0.0011 0.0032 \u03b2[2] 0.0149 0.2500 0.5861 1.0813 2.2423 \u03b3[1] 0.0429 0.0458 0.0474 0.0491 0.0529 \u03b3[2] 0.0014 0.0163 0.0360 0.0630 0.1395 \u03c4 0.0001 0.0009 0.0023 0.0050 0.0152 Fit \u00b6 sdf = simtrajectories(cc, china, 1:150) f = plotvars(sdf, china, dayt0=dayt0) plot(f.fit, xlim=nothing, ylim=nothing) Implications \u00b6 for fig in f.trajectories display(plot(fig, xlim=nothing)) end","title":"China"},{"location":"china/#china","text":"using Dates dayt0 = Dates.Date(\"2020-01-22\") - Dates.Day(1) china = CountryData(covdf, \"China\", 1) CountryData{Float64,Int64}(1.39273e9, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 60 , 61, 62, 63, 64, 65, 66, 67, 68, 69], [17.0, 18.0, 26.0, 42.0, 56.0, 82.0, 131.0, 133.0, 171.0, 213.0 \u2026 3259.0, 3274.0, 3274.0, 3281.0, 3285.0, 329 1.0, 3296.0, 3299.0, 3304.0, 3308.0], [28.0, 30.0, 36.0, 39.0, 49.0, 58.0, 101.0, 120.0, 135.0, 214.0 \u2026 71857.0, 72362.0, 72814.0, 73280.0, 73773.0, 74181.0, 74720.0, 75100.0, 75582.0, 75923.0], [503.0, 595.0, 858.0, 1325.0 , 1970.0, 2737.0, 5277.0, 5834.0, 7835.0, 9375.0 \u2026 6189.0, 5799.0, 5410.0 , 5030.0, 4603.0, 4310.0, 3881.0, 3600.0, 3236.0, 2967.0]) using Turing mdl = countrymodel(china) cc = Turing.psample(mdl, NUTS(0.65), 10000, 4) import JLD2 JLD2.@save \"$jmddir/china_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/china_2020-03-30.jld2\" cc;","title":"China"},{"location":"china/#estimates","text":"plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.1116 0.0159 0.0001 0.0004 676.9759 1.0043 pE0 0.0046 0.0112 0.0001 0.0001 8053.5121 1.0002 p[1] 0.0009 0.0095 0.0000 0.0004 191.8930 1.0284 p[2] 0.2497 0.0816 0.0004 0.0022 395.7077 1.0201 sigC 12804.4406 1201.1866 6.3308 12.5916 8833.0310 1.0013 sigD 158.8962 15.4258 0.0813 0.2543 1203.2501 1.0093 sigRc 6068.5479 901.6056 4.7519 33.2961 164.4248 1.0349 \u03b2[1] 0.0009 0.0016 0.0000 0.0000 326.5190 1.0185 \u03b2[2] 0.7364 0.6101 0.0032 0.0072 2664.7742 1.0070 \u03b3[1] 0.0483 0.0113 0.0001 0.0004 241.4455 1.0245 \u03b3[2] 0.0448 0.0375 0.0002 0.0010 525.8293 1.0228 \u03c4 0.0039 0.0057 0.0000 0.0001 1587.6686 1.0098 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0857 0.1003 0.1101 0.1208 0.1472 pE0 0.0003 0.0007 0.0015 0.0037 0.0314 p[1] 0.0000 0.0000 0.0001 0.0002 0.0007 p[2] 0.1222 0.2008 0.2404 0.2878 0.4421 sigC 10652.8196 11969.0427 12734.4509 13539.4288 15393.5293 sigD 132.2765 148.1737 157.4544 168.0933 192.5570 sigRc 4864.8856 5536.1782 5961.5187 6437.3924 7743.8764 \u03b2[1] 0.0000 0.0002 0.0005 0.0011 0.0032 \u03b2[2] 0.0149 0.2500 0.5861 1.0813 2.2423 \u03b3[1] 0.0429 0.0458 0.0474 0.0491 0.0529 \u03b3[2] 0.0014 0.0163 0.0360 0.0630 0.1395 \u03c4 0.0001 0.0009 0.0023 0.0050 0.0152","title":"Estimates"},{"location":"china/#fit","text":"sdf = simtrajectories(cc, china, 1:150) f = plotvars(sdf, china, dayt0=dayt0) plot(f.fit, xlim=nothing, ylim=nothing)","title":"Fit"},{"location":"china/#implications","text":"for fig in f.trajectories display(plot(fig, xlim=nothing)) end","title":"Implications"},{"location":"covid/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR using Plots Plots.pyplot() using DataFrames, JLD2 jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) \"/home/paul/.julia/dev/CovidSEIR/docs/jmd\" Introduction \u00b6 Data \u00b6 We will use data from Johns Hopkins University Center for Systems Science and Engineering . It is gathered from a variety of sources and updated daily. JHU CSSE uses the data for this interactive website. . For another course, I wrote some notes using this data in python here. This data has daily cumulative counts of confirmed cases, recoveries, and deaths in each country (and provinces within some countries). covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-03-30 \u2502 69 \u2502 \u2502 2 \u2502 confirmed \u2502 556.139 \u2502 0 \u2502 0.0 \u2502 161807 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 79 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 178 \u2502 \u2502 5 \u2502 Lat \u2502 21.8808 \u2502 -41.4545 \u2502 23.7649 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 23.273 \u2502 -135.0 \u2502 20.9727 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 22.3605 \u2502 0 \u2502 0.0 \u2502 11591 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 175.706 \u2502 0 \u2502 0.0 \u2502 62889 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 172 \u2502 \u2502 10 \u2502 cpop \u2502 2.2813e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502 Model \u00b6 We will estimate a susceptible, exposed, infectious, recovered (SEIR) epidemiological model of Covid transmission. In particular, we will use a version based on this webapp by Allison Hill . The model contains the following variables, all of which are functions of time $S$: Susceptible individuals $E$: Exposed individuals - infected but not yet infectious or symptomatic $I_i$: Undetected infected individuals in severity class $i$. Severity increaes with $i$ and we assume individuals must pass through all previous classes $I_1$: Mild infection $I_2$: Severe infection $C_i$ confirmed infected individuals in severity class $i$ $R = R_u + R_c$: individuals who have recovered from disease and are now immune $R_u$ recovered individuals whose infection were never detected $R_c$ recovered individuals who were confirmed cases $X$: Dead individuals Compared to Hill\u2019s model, we have reduced the number of severity classes and from 3 to 2, and we have added undetected infections and recoveries. In the data, we observe active confirmed cases $\\approx \\sum_i C_i$, deaths $\\approx X$, and confirmed recoveries $\\approx R_c$. These variables evolve according to the following system of differential equations. \\begin{align*} \\dot{S} & = -S \\left( \\sum_i \\beta_i (I_i + C_i) \\right) \\\\ \\dot{E} & = S \\left( \\sum_i \\beta_i (I_i + C_i) \\right) - a E \\\\ \\dot{I_1} & = a E - \\gamma_1 I_1 - p_1 I_1 - \\tau C_1 \\\\ \\dot{I_2} & = 0 \\\\ \\dot{C_1} & = \\tau I - \\gamma_1 C_1 - p_1 C_1 \\\\ \\dot{C_2} & = p_1(I_1 + C_1) - \\gamma_2 C_2 - p_2 C_2 \\\\ \\dot{R_u} & = \\sum_i \\gamma_i I_i \\\\ \\dot{R_c} & = \\sum_i \\gamma_i C_i \\\\ \\dot{X} & = p_2 C_2 \\end{align*} Where the parameters are : $\\beta_i$ rate at which infected individuals in class $i$ contact susceptibles and infect them $a$ rate of progression from the exposed to infected class $\\gamma_i$ rate at which infected individuals in class $i$ recover from disease and become immune $p_1$ rate at which infected individuals in class $i$ progress to class $i+1$ $p_2$ death rate for individuals in the most severe stage of disease $\\tau$ rate at which infections of class $1$ are detected Note that we are assuming that all severe infections are detected (and hence $I_2 = 0$). We are also assuming that confirmed and unconfirmed cases have the same recovery and progression rates. Empirical Model \u00b6 Our data has country population, $N$, daily cumulative confirmed cases, $c_t$, deaths, $d_t$, and recoveries, $r_t$. We will assume that at a known time 0, there is an unknown portion of exposed individuals, $p_0$, so \\begin{align*} S(0) = & (1-p_0) N \\\\ E(0) = & p_0 N \\end{align*} and all other model variables are 0 at time 0. We assume that the observed data is distributed as \\begin{align*} d_t \\sim & N(X(t), \\sigma_X^2) \\\\ r_t \\sim & N(R_c(t), \\sigma_R^2) \\\\ c_t - d_t - r_t \\sim & N(C_1(t) + C_2(t), \\sigma_C^2) \\end{align*} Model Limitations \u00b6 An important limitation is that the model assumes all parameters are constant over time. This is almost surely incorrect. Most countries have implemented quarantine and distancing policies to attempt to reduce $\\beta$. Efforts have also been made to increase $\\tau$. Innovations in treatment and crowding of the medical system likely lead to variation in $\\gamma$ and $p$. Single Country Estimates \u00b6 Priors \u00b6 We use the follow prior distributions. The means of these are loosely based on Hill\u2019s defaults . using Distributions defaultcountrypriors() = Dict( \"a\" => truncated(Normal(1/5, 3), 1/14, 1.0), \"p[1]\" => truncated(Normal(0.05, 0.3), 0, 1), \"p[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b3[1]\" => truncated(Normal(0.133, 0.5), 0, 3), \"\u03b3[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b2[1]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03b2[2]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03c4\" => truncated(Normal(0.2, 2), 0, 10), \"pE0\" => truncated(Normal(0.001, 0.1), 0, 1), \"sigD\" => InverseGamma(2,3), \"sigC\" => InverseGamma(2,3), \"sigRc\" => InverseGamma(2,3)) Summary statistics of draws from this prior distribution are below. pr = priorreport() pr.tbl 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.5524 0.2683 0.0170 0.0206 456.0318 0.9975 pE0 0.0776 0.0636 0.0040 0.0021 265.1114 1.0054 p[1] 0.2618 0.2028 0.0128 0.0087 363.0190 0.9989 p[2] 0.2576 0.1946 0.0123 0.0093 398.1452 0.9982 sigC 2.5640 2.2045 0.1394 0.2013 211.5856 1.0025 sigD 3.5267 5.5940 0.3538 0.2885 132.6287 1.0012 sigRc 3.0053 3.7157 0.2350 0.2402 137.5790 1.0077 \u03b2[1] 0.9861 0.6809 0.0431 0.0479 314.0869 0.9971 \u03b2[2] 1.0001 0.6759 0.0427 0.0008 320.6282 1.0006 \u03b3[1] 0.4629 0.3635 0.0230 0.0043 396.0875 0.9983 \u03b3[2] 0.2497 0.1770 0.0112 0.0289 260.3704 1.0096 \u03c4 1.6625 1.1970 0.0757 0.0325 338.1244 0.9968 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0935 0.3345 0.5501 0.7776 0.9909 pE0 0.0012 0.0331 0.0636 0.1124 0.2258 p[1] 0.0075 0.0859 0.2185 0.4012 0.7378 p[2] 0.0088 0.0979 0.2289 0.3629 0.7216 sigC 0.5883 1.1615 1.7956 3.1405 9.3441 sigD 0.4765 1.1612 1.9030 3.6250 17.0469 sigRc 0.5416 1.1473 1.8698 3.1291 13.6023 \u03b2[1] 0.0597 0.4376 0.8558 1.3882 2.3433 \u03b2[2] 0.0787 0.4554 0.8887 1.3834 2.4507 \u03b3[1] 0.0145 0.1602 0.4139 0.6653 1.2946 \u03b3[2] 0.0065 0.1125 0.2237 0.3507 0.6255 \u03c4 0.0564 0.7354 1.4358 2.2958 4.1534 The following plots show the implications of this prior for the observed data. The faint lines on each figure shows 1000 trajectories sampled from the prior distribution. The black line is the prior mean. The shaded region is a pointwise 90% prior credible interval. plot(pr.figs[1], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[2], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[3], xlabel=\"Days\", ylabel=\"Portion of population\") Subjectively this prior seems reasonable. It is perhaps too concentrated on relatively fast epidemics. I may alter it, but it\u2019s what I used for the current results. Estimation \u00b6 We estimate the model by MCMC. Specifically, we use the Turing.jl package (Ge, Xu, and Ghahramani 2018 ) . For sampling, we use the No-U-Turn-Sampler variant of Hamiltonian Monte Carlo. In the results below we use 4 chains with 1000 warmup iterations, and 1000 iterations for the results. Results \u00b6 Canada Italy South Korea China United States Extensions \u00b6 Estimate single country model for more countries/areas. Estimate a multi-country model with some parameters common across countries and others multi-level distributions. Allow time varying parameters. About this document \u00b6 This document was created using Weave.jl. The code is available in on github . Ge, Hong, Kai Xu, and Zoubin Ghahramani. 2018. \u201cTuring: A Language for Flexible Probabilistic Inference.\u201d In International Conference on Artificial Intelligence and Statistics, AISTATS 2018, 9-11 April 2018, Playa Blanca, Lanzarote, Canary Islands, Spain , 1682\u201390. http://proceedings.mlr.press/v84/ge18b.html .","title":"Model"},{"location":"covid/#introduction","text":"","title":"Introduction"},{"location":"covid/#data","text":"We will use data from Johns Hopkins University Center for Systems Science and Engineering . It is gathered from a variety of sources and updated daily. JHU CSSE uses the data for this interactive website. . For another course, I wrote some notes using this data in python here. This data has daily cumulative counts of confirmed cases, recoveries, and deaths in each country (and provinces within some countries). covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-03-30 \u2502 69 \u2502 \u2502 2 \u2502 confirmed \u2502 556.139 \u2502 0 \u2502 0.0 \u2502 161807 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 79 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 178 \u2502 \u2502 5 \u2502 Lat \u2502 21.8808 \u2502 -41.4545 \u2502 23.7649 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 23.273 \u2502 -135.0 \u2502 20.9727 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 22.3605 \u2502 0 \u2502 0.0 \u2502 11591 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 175.706 \u2502 0 \u2502 0.0 \u2502 62889 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 172 \u2502 \u2502 10 \u2502 cpop \u2502 2.2813e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502","title":"Data"},{"location":"covid/#model","text":"We will estimate a susceptible, exposed, infectious, recovered (SEIR) epidemiological model of Covid transmission. In particular, we will use a version based on this webapp by Allison Hill . The model contains the following variables, all of which are functions of time $S$: Susceptible individuals $E$: Exposed individuals - infected but not yet infectious or symptomatic $I_i$: Undetected infected individuals in severity class $i$. Severity increaes with $i$ and we assume individuals must pass through all previous classes $I_1$: Mild infection $I_2$: Severe infection $C_i$ confirmed infected individuals in severity class $i$ $R = R_u + R_c$: individuals who have recovered from disease and are now immune $R_u$ recovered individuals whose infection were never detected $R_c$ recovered individuals who were confirmed cases $X$: Dead individuals Compared to Hill\u2019s model, we have reduced the number of severity classes and from 3 to 2, and we have added undetected infections and recoveries. In the data, we observe active confirmed cases $\\approx \\sum_i C_i$, deaths $\\approx X$, and confirmed recoveries $\\approx R_c$. These variables evolve according to the following system of differential equations. \\begin{align*} \\dot{S} & = -S \\left( \\sum_i \\beta_i (I_i + C_i) \\right) \\\\ \\dot{E} & = S \\left( \\sum_i \\beta_i (I_i + C_i) \\right) - a E \\\\ \\dot{I_1} & = a E - \\gamma_1 I_1 - p_1 I_1 - \\tau C_1 \\\\ \\dot{I_2} & = 0 \\\\ \\dot{C_1} & = \\tau I - \\gamma_1 C_1 - p_1 C_1 \\\\ \\dot{C_2} & = p_1(I_1 + C_1) - \\gamma_2 C_2 - p_2 C_2 \\\\ \\dot{R_u} & = \\sum_i \\gamma_i I_i \\\\ \\dot{R_c} & = \\sum_i \\gamma_i C_i \\\\ \\dot{X} & = p_2 C_2 \\end{align*} Where the parameters are : $\\beta_i$ rate at which infected individuals in class $i$ contact susceptibles and infect them $a$ rate of progression from the exposed to infected class $\\gamma_i$ rate at which infected individuals in class $i$ recover from disease and become immune $p_1$ rate at which infected individuals in class $i$ progress to class $i+1$ $p_2$ death rate for individuals in the most severe stage of disease $\\tau$ rate at which infections of class $1$ are detected Note that we are assuming that all severe infections are detected (and hence $I_2 = 0$). We are also assuming that confirmed and unconfirmed cases have the same recovery and progression rates.","title":"Model"},{"location":"covid/#empirical-model","text":"Our data has country population, $N$, daily cumulative confirmed cases, $c_t$, deaths, $d_t$, and recoveries, $r_t$. We will assume that at a known time 0, there is an unknown portion of exposed individuals, $p_0$, so \\begin{align*} S(0) = & (1-p_0) N \\\\ E(0) = & p_0 N \\end{align*} and all other model variables are 0 at time 0. We assume that the observed data is distributed as \\begin{align*} d_t \\sim & N(X(t), \\sigma_X^2) \\\\ r_t \\sim & N(R_c(t), \\sigma_R^2) \\\\ c_t - d_t - r_t \\sim & N(C_1(t) + C_2(t), \\sigma_C^2) \\end{align*}","title":"Empirical Model"},{"location":"covid/#model-limitations","text":"An important limitation is that the model assumes all parameters are constant over time. This is almost surely incorrect. Most countries have implemented quarantine and distancing policies to attempt to reduce $\\beta$. Efforts have also been made to increase $\\tau$. Innovations in treatment and crowding of the medical system likely lead to variation in $\\gamma$ and $p$.","title":"Model Limitations"},{"location":"covid/#single-country-estimates","text":"","title":"Single Country Estimates"},{"location":"covid/#priors","text":"We use the follow prior distributions. The means of these are loosely based on Hill\u2019s defaults . using Distributions defaultcountrypriors() = Dict( \"a\" => truncated(Normal(1/5, 3), 1/14, 1.0), \"p[1]\" => truncated(Normal(0.05, 0.3), 0, 1), \"p[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b3[1]\" => truncated(Normal(0.133, 0.5), 0, 3), \"\u03b3[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b2[1]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03b2[2]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03c4\" => truncated(Normal(0.2, 2), 0, 10), \"pE0\" => truncated(Normal(0.001, 0.1), 0, 1), \"sigD\" => InverseGamma(2,3), \"sigC\" => InverseGamma(2,3), \"sigRc\" => InverseGamma(2,3)) Summary statistics of draws from this prior distribution are below. pr = priorreport() pr.tbl 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.5524 0.2683 0.0170 0.0206 456.0318 0.9975 pE0 0.0776 0.0636 0.0040 0.0021 265.1114 1.0054 p[1] 0.2618 0.2028 0.0128 0.0087 363.0190 0.9989 p[2] 0.2576 0.1946 0.0123 0.0093 398.1452 0.9982 sigC 2.5640 2.2045 0.1394 0.2013 211.5856 1.0025 sigD 3.5267 5.5940 0.3538 0.2885 132.6287 1.0012 sigRc 3.0053 3.7157 0.2350 0.2402 137.5790 1.0077 \u03b2[1] 0.9861 0.6809 0.0431 0.0479 314.0869 0.9971 \u03b2[2] 1.0001 0.6759 0.0427 0.0008 320.6282 1.0006 \u03b3[1] 0.4629 0.3635 0.0230 0.0043 396.0875 0.9983 \u03b3[2] 0.2497 0.1770 0.0112 0.0289 260.3704 1.0096 \u03c4 1.6625 1.1970 0.0757 0.0325 338.1244 0.9968 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0935 0.3345 0.5501 0.7776 0.9909 pE0 0.0012 0.0331 0.0636 0.1124 0.2258 p[1] 0.0075 0.0859 0.2185 0.4012 0.7378 p[2] 0.0088 0.0979 0.2289 0.3629 0.7216 sigC 0.5883 1.1615 1.7956 3.1405 9.3441 sigD 0.4765 1.1612 1.9030 3.6250 17.0469 sigRc 0.5416 1.1473 1.8698 3.1291 13.6023 \u03b2[1] 0.0597 0.4376 0.8558 1.3882 2.3433 \u03b2[2] 0.0787 0.4554 0.8887 1.3834 2.4507 \u03b3[1] 0.0145 0.1602 0.4139 0.6653 1.2946 \u03b3[2] 0.0065 0.1125 0.2237 0.3507 0.6255 \u03c4 0.0564 0.7354 1.4358 2.2958 4.1534 The following plots show the implications of this prior for the observed data. The faint lines on each figure shows 1000 trajectories sampled from the prior distribution. The black line is the prior mean. The shaded region is a pointwise 90% prior credible interval. plot(pr.figs[1], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[2], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[3], xlabel=\"Days\", ylabel=\"Portion of population\") Subjectively this prior seems reasonable. It is perhaps too concentrated on relatively fast epidemics. I may alter it, but it\u2019s what I used for the current results.","title":"Priors"},{"location":"covid/#estimation","text":"We estimate the model by MCMC. Specifically, we use the Turing.jl package (Ge, Xu, and Ghahramani 2018 ) . For sampling, we use the No-U-Turn-Sampler variant of Hamiltonian Monte Carlo. In the results below we use 4 chains with 1000 warmup iterations, and 1000 iterations for the results.","title":"Estimation"},{"location":"covid/#results","text":"Canada Italy South Korea China United States","title":"Results"},{"location":"covid/#extensions","text":"Estimate single country model for more countries/areas. Estimate a multi-country model with some parameters common across countries and others multi-level distributions. Allow time varying parameters.","title":"Extensions"},{"location":"covid/#about-this-document","text":"This document was created using Weave.jl. The code is available in on github . Ge, Hong, Kai Xu, and Zoubin Ghahramani. 2018. \u201cTuring: A Language for Flexible Probabilistic Inference.\u201d In International Conference on Artificial Intelligence and Statistics, AISTATS 2018, 9-11 April 2018, Playa Blanca, Lanzarote, Canary Islands, Spain , 1682\u201390. http://proceedings.mlr.press/v84/ge18b.html .","title":"About this document"},{"location":"functions/","text":"Function Reference \u00b6 # CovidSEIR.countrymodel \u2014 Function . countrymodel(data::CountryData, priors=defaultcountrypriors(), ::Type{R}=Float64) where {R <: Real} = begni Returns Turing model for single country source # CovidSEIR.covidjhudata \u2014 Method . covidjhudata() Downloads most recent JHU CSSE data on covid cases, deaths, and recoveries. Returns a DataFrame source # CovidSEIR.plotvars \u2014 Method . plotvars(simdf::DataFrames.AbstractDataFrame, data::CountryData; dayt0=Dates.Date(\"2020-01-21\"), # one day before JHU data begins colors=ColorSchemes.colorschemes[:Set1_9]) Create plots showing fit and implications of simulated trajectories. source # CovidSEIR.priorreport \u2014 Function . priorreport((priors=defaultcountrypriors(), T=100, population=1e7) Create tables and figures summarizing priors. source # CovidSEIR.simtrajectories \u2014 Method . simtrajectories(cc::AbstractMCMC.AbstractChains, data::CountryData, ts; ic=Iterators.product(StatsBase.sample(1:size(cc,1),300, replace=false), 1:size(cc,3))) Simulate trajectories based on parameter values in chain cc . source # CovidSEIR.odeSEIR \u2014 Method . odeSEIR() Sets up ODE for SEIR model with unconfirmed cases. Returns an ODEProblem source # CovidSEIR.paramvars \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.paramvec \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.systemvars \u2014 Method . Transfrom ODE variables to/from vector source # CovidSEIR.systemvec \u2014 Method . Transfrom ODE variables to/from vector source Index \u00b6 CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Functions"},{"location":"functions/#function-reference","text":"# CovidSEIR.countrymodel \u2014 Function . countrymodel(data::CountryData, priors=defaultcountrypriors(), ::Type{R}=Float64) where {R <: Real} = begni Returns Turing model for single country source # CovidSEIR.covidjhudata \u2014 Method . covidjhudata() Downloads most recent JHU CSSE data on covid cases, deaths, and recoveries. Returns a DataFrame source # CovidSEIR.plotvars \u2014 Method . plotvars(simdf::DataFrames.AbstractDataFrame, data::CountryData; dayt0=Dates.Date(\"2020-01-21\"), # one day before JHU data begins colors=ColorSchemes.colorschemes[:Set1_9]) Create plots showing fit and implications of simulated trajectories. source # CovidSEIR.priorreport \u2014 Function . priorreport((priors=defaultcountrypriors(), T=100, population=1e7) Create tables and figures summarizing priors. source # CovidSEIR.simtrajectories \u2014 Method . simtrajectories(cc::AbstractMCMC.AbstractChains, data::CountryData, ts; ic=Iterators.product(StatsBase.sample(1:size(cc,1),300, replace=false), 1:size(cc,3))) Simulate trajectories based on parameter values in chain cc . source # CovidSEIR.odeSEIR \u2014 Method . odeSEIR() Sets up ODE for SEIR model with unconfirmed cases. Returns an ODEProblem source # CovidSEIR.paramvars \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.paramvec \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.systemvars \u2014 Method . Transfrom ODE variables to/from vector source # CovidSEIR.systemvec \u2014 Method . Transfrom ODE variables to/from vector source","title":"Function Reference"},{"location":"functions/#index","text":"CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Index"},{"location":"italy/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-03-30 \u2502 69 \u2502 \u2502 2 \u2502 confirmed \u2502 556.139 \u2502 0 \u2502 0.0 \u2502 161807 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 79 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 178 \u2502 \u2502 5 \u2502 Lat \u2502 21.8808 \u2502 -41.4545 \u2502 23.7649 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 23.273 \u2502 -135.0 \u2502 20.9727 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 22.3605 \u2502 0 \u2502 0.0 \u2502 11591 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 175.706 \u2502 0 \u2502 0.0 \u2502 62889 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 172 \u2502 \u2502 10 \u2502 cpop \u2502 2.2813e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502 Italy \u00b6 italy = CountryData(covdf, \"Italy\"); itmod = countrymodel(italy) cc = Turing.psample(itmod, NUTS(0.65), 10000, 4) import JLD2 JLD2.@save \"$jmddir/italy_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/italy_2020-03-30.jld2\" cc; Estimates \u00b6 plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.5287 0.3390 0.0018 0.0163 144.5783 2.3684 pE0 0.0000 0.0000 0.0000 0.0000 144.5783 3.6550 p[1] 0.0019 0.0027 0.0000 0.0001 144.5783 13.2712 p[2] 0.0405 0.0255 0.0001 0.0013 144.5783 9.1825 sigC 498.0791 61.4652 0.3239 2.5004 144.5783 1.4987 sigD 92.3709 46.9193 0.2473 2.4462 144.5783 5.5451 sigRc 150.0417 14.6518 0.0772 0.5063 181.7941 1.1377 \u03b2[1] 1.1285 0.7862 0.0041 0.0401 144.5783 3.1836 \u03b2[2] 0.7891 0.7017 0.0037 0.0205 253.9817 1.1870 \u03b3[1] 0.4429 0.6073 0.0032 0.0319 144.5783 8.8815 \u03b3[2] 0.0437 0.0343 0.0002 0.0018 144.5783 10.3019 \u03c4 0.0001 0.0001 0.0000 0.0000 144.5783 9.7191 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0728 0.1441 0.5186 0.9060 0.9692 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0000 0.0000 0.0001 0.0038 0.0067 p[2] 0.0146 0.0149 0.0352 0.0656 0.0730 sigC 379.2469 451.4814 502.7123 546.8785 596.6266 sigD 39.0885 45.9447 85.8598 138.1586 158.3857 sigRc 123.4748 139.2331 149.1931 159.7283 179.7069 \u03b2[1] 0.3153 0.3710 0.8189 1.9577 2.4721 \u03b2[2] 0.0651 0.1775 0.5830 1.2233 2.4738 \u03b3[1] 0.0000 0.0007 0.0504 1.1195 1.4871 \u03b3[2] 0.0023 0.0115 0.0371 0.0777 0.0855 \u03c4 0.0001 0.0001 0.0001 0.0002 0.0003 Compared to Canada, Italy has a very low estimate of $\\tau$. Apparently a high number of undetected cases helps to explain the rapid growth in confirmed cases in Italy. Fit \u00b6 sdf = simtrajectories(cc, italy, 1:150) f = plotvars(sdf, italy) f.fit As with Canada, the fit is very good, and the posterior distribution of observables is very precise. Implications \u00b6 for fig in f.trajectories display(fig) end The posterior estimates imply that Italy has about 10 times as many undetected cases as detected.","title":"Italy"},{"location":"italy/#italy","text":"italy = CountryData(covdf, \"Italy\"); itmod = countrymodel(italy) cc = Turing.psample(itmod, NUTS(0.65), 10000, 4) import JLD2 JLD2.@save \"$jmddir/italy_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/italy_2020-03-30.jld2\" cc;","title":"Italy"},{"location":"italy/#estimates","text":"plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.5287 0.3390 0.0018 0.0163 144.5783 2.3684 pE0 0.0000 0.0000 0.0000 0.0000 144.5783 3.6550 p[1] 0.0019 0.0027 0.0000 0.0001 144.5783 13.2712 p[2] 0.0405 0.0255 0.0001 0.0013 144.5783 9.1825 sigC 498.0791 61.4652 0.3239 2.5004 144.5783 1.4987 sigD 92.3709 46.9193 0.2473 2.4462 144.5783 5.5451 sigRc 150.0417 14.6518 0.0772 0.5063 181.7941 1.1377 \u03b2[1] 1.1285 0.7862 0.0041 0.0401 144.5783 3.1836 \u03b2[2] 0.7891 0.7017 0.0037 0.0205 253.9817 1.1870 \u03b3[1] 0.4429 0.6073 0.0032 0.0319 144.5783 8.8815 \u03b3[2] 0.0437 0.0343 0.0002 0.0018 144.5783 10.3019 \u03c4 0.0001 0.0001 0.0000 0.0000 144.5783 9.7191 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0728 0.1441 0.5186 0.9060 0.9692 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0000 0.0000 0.0001 0.0038 0.0067 p[2] 0.0146 0.0149 0.0352 0.0656 0.0730 sigC 379.2469 451.4814 502.7123 546.8785 596.6266 sigD 39.0885 45.9447 85.8598 138.1586 158.3857 sigRc 123.4748 139.2331 149.1931 159.7283 179.7069 \u03b2[1] 0.3153 0.3710 0.8189 1.9577 2.4721 \u03b2[2] 0.0651 0.1775 0.5830 1.2233 2.4738 \u03b3[1] 0.0000 0.0007 0.0504 1.1195 1.4871 \u03b3[2] 0.0023 0.0115 0.0371 0.0777 0.0855 \u03c4 0.0001 0.0001 0.0001 0.0002 0.0003 Compared to Canada, Italy has a very low estimate of $\\tau$. Apparently a high number of undetected cases helps to explain the rapid growth in confirmed cases in Italy.","title":"Estimates"},{"location":"italy/#fit","text":"sdf = simtrajectories(cc, italy, 1:150) f = plotvars(sdf, italy) f.fit As with Canada, the fit is very good, and the posterior distribution of observables is very precise.","title":"Fit"},{"location":"italy/#implications","text":"for fig in f.trajectories display(fig) end The posterior estimates imply that Italy has about 10 times as many undetected cases as detected.","title":"Implications"},{"location":"korea/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-03-30 \u2502 69 \u2502 \u2502 2 \u2502 confirmed \u2502 556.139 \u2502 0 \u2502 0.0 \u2502 161807 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 79 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 178 \u2502 \u2502 5 \u2502 Lat \u2502 21.8808 \u2502 -41.4545 \u2502 23.7649 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 23.273 \u2502 -135.0 \u2502 20.9727 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 22.3605 \u2502 0 \u2502 0.0 \u2502 11591 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 175.706 \u2502 0 \u2502 0.0 \u2502 62889 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 172 \u2502 \u2502 10 \u2502 cpop \u2502 2.2813e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502 South Korea \u00b6 korea = CountryData(covdf, \"Korea, South\") CountryData{Float64,Int64}(5.1635256e7, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0 \u2026 102.0, 111.0, 111.0, 120.0, 126.0, 131.0, 139.0, 144.0, 152.0, 158.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 1540. 0, 2909.0, 2909.0, 3507.0, 3730.0, 4144.0, 4528.0, 4811.0, 5033.0, 5228.0], [1.0, 1.0, 2.0, 2.0, 3.0, 4.0, 4.0, 4.0, 4.0, 11.0 \u2026 7157.0, 5941.0, 594 1.0, 5410.0, 5281.0, 4966.0, 4665.0, 4523.0, 4398.0, 4275.0]) using Turing mdl = countrymodel(korea) cc = Turing.psample(mdl, NUTS(0.65), 10000, 4) import JLD2 JLD2.@save \"$jmddir/korea_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/korea_2020-03-30.jld2\" cc; Estimates \u00b6 plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.7426 0.1603 0.0008 0.0009 31781.0264 1.0001 pE0 0.0000 0.0000 0.0000 0.0000 14695.8106 1.0004 p[1] 0.0002 0.0001 0.0000 0.0000 12141.0822 1.0008 p[2] 0.0007 0.0000 0.0000 0.0000 30732.8672 1.0000 sigC 327.4358 39.6164 0.2088 0.2974 18156.9770 1.0004 sigD 5.1223 0.5181 0.0027 0.0034 24026.2287 1.0001 sigRc 630.5553 59.7286 0.3148 0.3521 27488.0208 1.0001 \u03b2[1] 1.7184 0.3498 0.0018 0.0032 13195.0195 1.0007 \u03b2[2] 0.9464 0.6701 0.0035 0.0038 30936.7420 0.9999 \u03b3[1] 0.8072 0.2398 0.0013 0.0023 11845.6271 1.0008 \u03b3[2] 0.0193 0.0011 0.0000 0.0000 22378.4404 1.0001 \u03c4 0.0000 0.0000 0.0000 0.0000 29456.0839 1.0001 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.4183 0.6237 0.7559 0.8776 0.9865 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0001 0.0001 0.0002 0.0002 0.0003 p[2] 0.0007 0.0007 0.0007 0.0008 0.0008 sigC 261.6691 299.7066 323.4862 350.5178 416.2259 sigD 4.1823 4.7623 5.0981 5.4505 6.2119 sigRc 528.3869 588.2178 625.4741 667.4281 762.0307 \u03b2[1] 1.1598 1.4614 1.6775 1.9283 2.5076 \u03b2[2] 0.0433 0.4076 0.8377 1.3555 2.4996 \u03b3[1] 0.4263 0.6312 0.7802 0.9522 1.3460 \u03b3[2] 0.0171 0.0185 0.0193 0.0200 0.0216 \u03c4 0.0000 0.0000 0.0000 0.0000 0.0000 Fit \u00b6 sdf = simtrajectories(cc, korea, 1:150) f = plotvars(sdf, korea) plot!(f.fit, xlim=nothing) We see that the model does not fit the rapid drop in new cases in South Korea. This may be caused by the model\u2019s implausible assumption that transmission and testing rates are constant over time. Implications \u00b6 for fig in f.trajectories display(plot(fig, xlim=nothing)) end","title":"South Korea"},{"location":"korea/#south-korea","text":"korea = CountryData(covdf, \"Korea, South\") CountryData{Float64,Int64}(5.1635256e7, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0 \u2026 102.0, 111.0, 111.0, 120.0, 126.0, 131.0, 139.0, 144.0, 152.0, 158.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 1540. 0, 2909.0, 2909.0, 3507.0, 3730.0, 4144.0, 4528.0, 4811.0, 5033.0, 5228.0], [1.0, 1.0, 2.0, 2.0, 3.0, 4.0, 4.0, 4.0, 4.0, 11.0 \u2026 7157.0, 5941.0, 594 1.0, 5410.0, 5281.0, 4966.0, 4665.0, 4523.0, 4398.0, 4275.0]) using Turing mdl = countrymodel(korea) cc = Turing.psample(mdl, NUTS(0.65), 10000, 4) import JLD2 JLD2.@save \"$jmddir/korea_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/korea_2020-03-30.jld2\" cc;","title":"South Korea"},{"location":"korea/#estimates","text":"plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.7426 0.1603 0.0008 0.0009 31781.0264 1.0001 pE0 0.0000 0.0000 0.0000 0.0000 14695.8106 1.0004 p[1] 0.0002 0.0001 0.0000 0.0000 12141.0822 1.0008 p[2] 0.0007 0.0000 0.0000 0.0000 30732.8672 1.0000 sigC 327.4358 39.6164 0.2088 0.2974 18156.9770 1.0004 sigD 5.1223 0.5181 0.0027 0.0034 24026.2287 1.0001 sigRc 630.5553 59.7286 0.3148 0.3521 27488.0208 1.0001 \u03b2[1] 1.7184 0.3498 0.0018 0.0032 13195.0195 1.0007 \u03b2[2] 0.9464 0.6701 0.0035 0.0038 30936.7420 0.9999 \u03b3[1] 0.8072 0.2398 0.0013 0.0023 11845.6271 1.0008 \u03b3[2] 0.0193 0.0011 0.0000 0.0000 22378.4404 1.0001 \u03c4 0.0000 0.0000 0.0000 0.0000 29456.0839 1.0001 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.4183 0.6237 0.7559 0.8776 0.9865 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0001 0.0001 0.0002 0.0002 0.0003 p[2] 0.0007 0.0007 0.0007 0.0008 0.0008 sigC 261.6691 299.7066 323.4862 350.5178 416.2259 sigD 4.1823 4.7623 5.0981 5.4505 6.2119 sigRc 528.3869 588.2178 625.4741 667.4281 762.0307 \u03b2[1] 1.1598 1.4614 1.6775 1.9283 2.5076 \u03b2[2] 0.0433 0.4076 0.8377 1.3555 2.4996 \u03b3[1] 0.4263 0.6312 0.7802 0.9522 1.3460 \u03b3[2] 0.0171 0.0185 0.0193 0.0200 0.0216 \u03c4 0.0000 0.0000 0.0000 0.0000 0.0000","title":"Estimates"},{"location":"korea/#fit","text":"sdf = simtrajectories(cc, korea, 1:150) f = plotvars(sdf, korea) plot!(f.fit, xlim=nothing) We see that the model does not fit the rapid drop in new cases in South Korea. This may be caused by the model\u2019s implausible assumption that transmission and testing rates are constant over time.","title":"Fit"},{"location":"korea/#implications","text":"for fig in f.trajectories display(plot(fig, xlim=nothing)) end","title":"Implications"},{"location":"license/","text":"The model and results are licensed under a Creative Commons Attribution-ShareAlike 4.0 International License and were written by Paul Schrimpf. BibTeX citation. The license for the package source code is here.","title":"License"},{"location":"us/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots, Dates Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-03-30 \u2502 69 \u2502 \u2502 2 \u2502 confirmed \u2502 556.139 \u2502 0 \u2502 0.0 \u2502 161807 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 79 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 178 \u2502 \u2502 5 \u2502 Lat \u2502 21.8808 \u2502 -41.4545 \u2502 23.7649 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 23.273 \u2502 -135.0 \u2502 20.9727 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 22.3605 \u2502 0 \u2502 0.0 \u2502 11591 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 175.706 \u2502 0 \u2502 0.0 \u2502 62889 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 172 \u2502 \u2502 10 \u2502 cpop \u2502 2.2813e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502 United States \u00b6 us = CountryData(covdf, \"US\") CountryData{Float64,Int64}(3.2716743e8, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0 \u2026 307.0, 417.0, 557.0, 706.0, 942.0, 1209.0, 1581.0, 2026 .0, 2467.0, 2978.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 176.0, 178.0, 178.0, 348.0, 361.0, 681.0, 869.0, 1072.0, 2665.0, 5644.0], [ 1.0, 1.0, 2.0, 2.0, 5.0, 5.0, 5.0, 5.0, 5.0, 7.0 \u2026 25006.0, 32681.0, 4311 2.0, 52686.0, 64475.0, 81946.0, 99207.0, 118380.0, 135754.0, 153185.0]) using Turing mdl = countrymodel(us) cc = Turing.psample(mdl, NUTS(0.65), 10000, 4) import JLD2 JLD2.@save \"$jmddir/us_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/us_2020-03-30.jld2\" cc; Estimates \u00b6 plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.3965 0.2540 0.0013 0.0112 175.7137 1.1405 pE0 0.0000 0.0000 0.0000 0.0000 144.5783 2.6079 p[1] 0.1768 0.2344 0.0012 0.0114 144.5783 1.6726 p[2] 0.0060 0.0066 0.0000 0.0003 144.5783 1.2275 sigC 1889.1896 1355.4471 7.1438 70.8943 144.5783 7.2035 sigD 13.3932 2.4814 0.0131 0.1193 144.5783 2.0937 sigRc 132.9302 11.9222 0.0628 0.4368 371.9244 1.0492 \u03b2[1] 0.8117 0.5785 0.0030 0.0270 148.9099 1.2142 \u03b2[2] 0.9877 0.6280 0.0033 0.0241 280.0769 1.0252 \u03b3[1] 0.1703 0.2322 0.0012 0.0106 145.6140 1.3043 \u03b3[2] 0.0024 0.0031 0.0000 0.0001 147.6234 1.1222 \u03c4 0.3691 0.8900 0.0047 0.0372 145.8685 1.3798 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0772 0.1587 0.3600 0.5841 0.9249 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0000 0.0002 0.0078 0.3352 0.7536 p[2] 0.0038 0.0038 0.0041 0.0049 0.0276 sigC 472.9798 545.6422 1575.4042 3211.1451 3719.8838 sigD 9.6155 11.1926 13.2194 15.3977 18.1240 sigRc 110.7265 124.8205 132.4539 140.7174 157.2685 \u03b2[1] 0.0557 0.4490 0.6539 1.0790 2.2353 \u03b2[2] 0.0813 0.5084 0.8815 1.3578 2.4565 \u03b3[1] 0.0006 0.0072 0.0534 0.2926 0.7821 \u03b3[2] 0.0001 0.0012 0.0022 0.0027 0.0090 \u03c4 0.0000 0.0000 0.0001 0.0973 3.2673 Fit \u00b6 sdf = simtrajectories(cc, us, 1:150) f = plotvars(sdf, us) plot(f.fit, ylim=(0, maximum(us.active)*1.3)) Implications \u00b6 for fig in f.trajectories display(plot(fig)) end","title":"United States"},{"location":"us/#united-states","text":"us = CountryData(covdf, \"US\") CountryData{Float64,Int64}(3.2716743e8, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0 \u2026 307.0, 417.0, 557.0, 706.0, 942.0, 1209.0, 1581.0, 2026 .0, 2467.0, 2978.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 176.0, 178.0, 178.0, 348.0, 361.0, 681.0, 869.0, 1072.0, 2665.0, 5644.0], [ 1.0, 1.0, 2.0, 2.0, 5.0, 5.0, 5.0, 5.0, 5.0, 7.0 \u2026 25006.0, 32681.0, 4311 2.0, 52686.0, 64475.0, 81946.0, 99207.0, 118380.0, 135754.0, 153185.0]) using Turing mdl = countrymodel(us) cc = Turing.psample(mdl, NUTS(0.65), 10000, 4) import JLD2 JLD2.@save \"$jmddir/us_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/us_2020-03-30.jld2\" cc;","title":"United States"},{"location":"us/#estimates","text":"plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.3965 0.2540 0.0013 0.0112 175.7137 1.1405 pE0 0.0000 0.0000 0.0000 0.0000 144.5783 2.6079 p[1] 0.1768 0.2344 0.0012 0.0114 144.5783 1.6726 p[2] 0.0060 0.0066 0.0000 0.0003 144.5783 1.2275 sigC 1889.1896 1355.4471 7.1438 70.8943 144.5783 7.2035 sigD 13.3932 2.4814 0.0131 0.1193 144.5783 2.0937 sigRc 132.9302 11.9222 0.0628 0.4368 371.9244 1.0492 \u03b2[1] 0.8117 0.5785 0.0030 0.0270 148.9099 1.2142 \u03b2[2] 0.9877 0.6280 0.0033 0.0241 280.0769 1.0252 \u03b3[1] 0.1703 0.2322 0.0012 0.0106 145.6140 1.3043 \u03b3[2] 0.0024 0.0031 0.0000 0.0001 147.6234 1.1222 \u03c4 0.3691 0.8900 0.0047 0.0372 145.8685 1.3798 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0772 0.1587 0.3600 0.5841 0.9249 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0000 0.0002 0.0078 0.3352 0.7536 p[2] 0.0038 0.0038 0.0041 0.0049 0.0276 sigC 472.9798 545.6422 1575.4042 3211.1451 3719.8838 sigD 9.6155 11.1926 13.2194 15.3977 18.1240 sigRc 110.7265 124.8205 132.4539 140.7174 157.2685 \u03b2[1] 0.0557 0.4490 0.6539 1.0790 2.2353 \u03b2[2] 0.0813 0.5084 0.8815 1.3578 2.4565 \u03b3[1] 0.0006 0.0072 0.0534 0.2926 0.7821 \u03b3[2] 0.0001 0.0012 0.0022 0.0027 0.0090 \u03c4 0.0000 0.0000 0.0001 0.0973 3.2673","title":"Estimates"},{"location":"us/#fit","text":"sdf = simtrajectories(cc, us, 1:150) f = plotvars(sdf, us) plot(f.fit, ylim=(0, maximum(us.active)*1.3))","title":"Fit"},{"location":"us/#implications","text":"for fig in f.trajectories display(plot(fig)) end","title":"Implications"}]}