{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CovidSEIR.jl \u00b6 Index \u00b6 CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Package Docs"},{"location":"#covidseirjl","text":"","title":"CovidSEIR.jl"},{"location":"#index","text":"CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Index"},{"location":"canada/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-03-28 \u2502 67 \u2502 \u2502 2 \u2502 confirmed \u2502 486.367 \u2502 0 \u2502 0.0 \u2502 121478 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 79 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 177 \u2502 \u2502 5 \u2502 Lat \u2502 22.0528 \u2502 -41.4545 \u2502 23.8298 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 23.2675 \u2502 -135.0 \u2502 20.9394 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 18.9005 \u2502 0 \u2502 0.0 \u2502 10023 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 162.121 \u2502 0 \u2502 0.0 \u2502 62098 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 170 \u2502 \u2502 10 \u2502 cpop \u2502 2.27709e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502 Canada \u00b6 We estimate the model with the following code. It takes about an hour. canada = CountryData(covdf, \"Canada\"); using Turing canmod = countrymodel(canada) cc = Turing.psample(canmod, NUTS(0.65), 2000, 4) import JLD2 JLD2.@save \"$jmddir/canada_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/canada_2020-03-28.jld2\" cc; Estimates \u00b6 plot(cc) We can see that there might be convergence issues. There are large differences between the four chains for some parameters. describe(cc) 2-element Array{MCMCChains.ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.3088 0.2412 0.0038 0.0231 89.6474 1.0359 pE0 0.0000 0.0000 0.0000 0.0000 70.5632 1.0856 p[1] 0.1042 0.1802 0.0028 0.0271 16.0643 2.4066 p[2] 0.1835 0.1769 0.0028 0.0205 21.5262 1.2919 sigC 55.9872 5.3305 0.0843 0.4254 151.1913 1.0043 sigD 1.2701 0.1226 0.0019 0.0091 156.7255 1.0465 sigRc 17.4322 1.4134 0.0223 0.0887 303.4507 1.0111 \u03b2[1] 0.5243 0.3414 0.0054 0.0402 26.0625 1.1952 \u03b2[2] 0.9836 0.6433 0.0102 0.0441 170.9821 1.0298 \u03b3[1] 0.0504 0.1739 0.0027 0.0222 19.6993 1.3554 \u03b3[2] 0.2633 0.2855 0.0045 0.0318 26.4008 1.2485 \u03c4 1.4733 1.2375 0.0196 0.1117 60.5718 1.0828 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0750 0.1199 0.2164 0.4248 0.9082 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0021 0.0057 0.0098 0.1192 0.6038 p[2] 0.0024 0.0044 0.1515 0.2911 0.5979 sigC 46.3921 52.1740 55.7451 59.4129 66.9490 sigD 1.0686 1.1820 1.2583 1.3417 1.5536 sigRc 14.9106 16.3755 17.3844 18.3851 20.2662 \u03b2[1] 0.0931 0.3109 0.4274 0.6564 1.4965 \u03b2[2] 0.0789 0.5019 0.8582 1.3500 2.4933 \u03b3[1] 0.0007 0.0042 0.0072 0.0098 0.6798 \u03b3[2] 0.0022 0.0124 0.1721 0.4366 0.9681 \u03c4 0.0092 0.3943 1.2458 2.2669 4.2214 The parameter estimates are generally not very precise. Fit \u00b6 sdf = simtrajectories(cc, canada, 1:150) f = plotvars(sdf, canada) f.fit In this figure, solid lines are observed data, dashed lines are posterior means, and the shaded region is a pointwise 90% credible interval. Note that the last day of data used in the estimation was March 27th. The fit appears quite good. The fitted estimates are also remarkably precise. Although individual parameters are not precisely estimated, the combination of them that gives rise to the observed data is precisely estimated. Implications \u00b6 We now look at the model\u2019s projections for some observed and unobserved variables. for fig in f.trajectories display(fig) end In general we see a similar pattern as noted above: the posteriors for observed variables are fairly precise. However, the posteriors for unobserved variables, such as the portion of undetected infections and the portion of mild infections, are very imprecise.","title":"Canada"},{"location":"canada/#canada","text":"We estimate the model with the following code. It takes about an hour. canada = CountryData(covdf, \"Canada\"); using Turing canmod = countrymodel(canada) cc = Turing.psample(canmod, NUTS(0.65), 2000, 4) import JLD2 JLD2.@save \"$jmddir/canada_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/canada_2020-03-28.jld2\" cc;","title":"Canada"},{"location":"canada/#estimates","text":"plot(cc) We can see that there might be convergence issues. There are large differences between the four chains for some parameters. describe(cc) 2-element Array{MCMCChains.ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.3088 0.2412 0.0038 0.0231 89.6474 1.0359 pE0 0.0000 0.0000 0.0000 0.0000 70.5632 1.0856 p[1] 0.1042 0.1802 0.0028 0.0271 16.0643 2.4066 p[2] 0.1835 0.1769 0.0028 0.0205 21.5262 1.2919 sigC 55.9872 5.3305 0.0843 0.4254 151.1913 1.0043 sigD 1.2701 0.1226 0.0019 0.0091 156.7255 1.0465 sigRc 17.4322 1.4134 0.0223 0.0887 303.4507 1.0111 \u03b2[1] 0.5243 0.3414 0.0054 0.0402 26.0625 1.1952 \u03b2[2] 0.9836 0.6433 0.0102 0.0441 170.9821 1.0298 \u03b3[1] 0.0504 0.1739 0.0027 0.0222 19.6993 1.3554 \u03b3[2] 0.2633 0.2855 0.0045 0.0318 26.4008 1.2485 \u03c4 1.4733 1.2375 0.0196 0.1117 60.5718 1.0828 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0750 0.1199 0.2164 0.4248 0.9082 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0021 0.0057 0.0098 0.1192 0.6038 p[2] 0.0024 0.0044 0.1515 0.2911 0.5979 sigC 46.3921 52.1740 55.7451 59.4129 66.9490 sigD 1.0686 1.1820 1.2583 1.3417 1.5536 sigRc 14.9106 16.3755 17.3844 18.3851 20.2662 \u03b2[1] 0.0931 0.3109 0.4274 0.6564 1.4965 \u03b2[2] 0.0789 0.5019 0.8582 1.3500 2.4933 \u03b3[1] 0.0007 0.0042 0.0072 0.0098 0.6798 \u03b3[2] 0.0022 0.0124 0.1721 0.4366 0.9681 \u03c4 0.0092 0.3943 1.2458 2.2669 4.2214 The parameter estimates are generally not very precise.","title":"Estimates"},{"location":"canada/#fit","text":"sdf = simtrajectories(cc, canada, 1:150) f = plotvars(sdf, canada) f.fit In this figure, solid lines are observed data, dashed lines are posterior means, and the shaded region is a pointwise 90% credible interval. Note that the last day of data used in the estimation was March 27th. The fit appears quite good. The fitted estimates are also remarkably precise. Although individual parameters are not precisely estimated, the combination of them that gives rise to the observed data is precisely estimated.","title":"Fit"},{"location":"canada/#implications","text":"We now look at the model\u2019s projections for some observed and unobserved variables. for fig in f.trajectories display(fig) end In general we see a similar pattern as noted above: the posteriors for observed variables are fairly precise. However, the posteriors for unobserved variables, such as the portion of undetected infections and the portion of mild infections, are very imprecise.","title":"Implications"},{"location":"china/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Error: importing CovidSEIR into Main conflicts with an existing identifier Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-03-29 \u2502 68 \u2502 \u2502 2 \u2502 confirmed \u2502 521.072 \u2502 0 \u2502 0.0 \u2502 140886 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 79 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 177 \u2502 \u2502 5 \u2502 Lat \u2502 22.0528 \u2502 -41.4545 \u2502 23.8298 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 23.2675 \u2502 -135.0 \u2502 20.9394 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 20.5945 \u2502 0 \u2502 0.0 \u2502 10779 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 168.91 \u2502 0 \u2502 0.0 \u2502 62570 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 170 \u2502 \u2502 10 \u2502 cpop \u2502 2.27709e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502 China \u00b6 using Dates dayt0 = Dates.Date(\"2020-01-22\") - Dates.Day(45) china = CountryData(covdf, \"China\", 45) CountryData{Float64,Int64}(1.39273e9, [45, 46, 47, 48, 49, 50, 51, 52, 53, 54 \u2026 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], [17.0, 18.0, 26.0 , 42.0, 56.0, 82.0, 131.0, 133.0, 171.0, 213.0 \u2026 3253.0, 3259.0, 3274.0, 3274.0, 3281.0, 3285.0, 3291.0, 3296.0, 3299.0, 3304.0], [28.0, 30.0, 36.0, 39.0, 49.0, 58.0, 101.0, 120.0, 135.0, 214.0 \u2026 71266.0, 71857.0, 72362.0 , 72814.0, 73280.0, 73773.0, 74181.0, 74720.0, 75100.0, 75582.0], [503.0, 5 95.0, 858.0, 1325.0, 1970.0, 2737.0, 5277.0, 5834.0, 7835.0, 9375.0 \u2026 673 1.0, 6189.0, 5799.0, 5410.0, 5030.0, 4603.0, 4310.0, 3881.0, 3600.0, 3236.0 ]) using Turing mdl = countrymodel(china) cc = Turing.psample(mdl, NUTS(0.65), 2000, 4) import JLD2 JLD2.@save \"$jmddir/china_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/china_2020-03-29.jld2\" cc; Estimates \u00b6 plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.4012 0.1054 0.0017 0.0032 1458.7298 1.0003 pE0 0.0000 0.0000 0.0000 0.0000 785.1973 1.0022 p[1] 0.0000 0.0000 0.0000 0.0000 586.3224 1.0066 p[2] 0.8409 0.1131 0.0018 0.0031 1328.6271 1.0012 sigC 16476.3544 1915.5582 30.2876 55.3010 1136.5533 1.0029 sigD 45.9304 9.4465 0.1494 0.3130 808.6178 1.0038 sigRc 5351.2466 707.6024 11.1882 22.4649 778.8051 1.0031 \u03b2[1] 0.5598 0.0593 0.0009 0.0015 1557.5895 1.0010 \u03b2[2] 1.0103 0.7097 0.0112 0.0131 2597.7358 1.0012 \u03b3[1] 0.0816 0.0086 0.0001 0.0003 707.2292 1.0056 \u03b3[2] 0.2339 0.1522 0.0024 0.0049 1030.9134 1.0019 \u03c4 0.0000 0.0000 0.0000 0.0000 792.4414 1.0040 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.2653 0.3277 0.3768 0.4474 0.6787 pE0 0.0000 0.0000 0.0000 0.0000 0.0001 p[1] 0.0000 0.0000 0.0000 0.0000 0.0000 p[2] 0.5979 0.7664 0.8606 0.9354 0.9946 sigC 12965.2724 15138.9180 16418.0222 17710.5078 20428.2213 sigD 32.6592 39.0364 44.0738 51.1849 69.3655 sigRc 4064.7839 4870.3899 5329.8974 5794.5089 6751.0947 \u03b2[1] 0.4614 0.5179 0.5551 0.5936 0.6923 \u03b2[2] 0.0536 0.4429 0.8922 1.4450 2.6301 \u03b3[1] 0.0645 0.0756 0.0820 0.0876 0.0975 \u03b3[2] 0.0159 0.1166 0.2125 0.3268 0.5756 \u03c4 0.0000 0.0000 0.0000 0.0000 0.0000 Fit \u00b6 sdf = simtrajectories(cc, china, 1:150) f = plotvars(sdf, china, dayt0=dayt0) plot(f.fit, xlim=nothing, ylim=nothing) Implications \u00b6 for fig in f.trajectories display(plot(fig, xlim=nothing)) end","title":"China"},{"location":"china/#china","text":"using Dates dayt0 = Dates.Date(\"2020-01-22\") - Dates.Day(45) china = CountryData(covdf, \"China\", 45) CountryData{Float64,Int64}(1.39273e9, [45, 46, 47, 48, 49, 50, 51, 52, 53, 54 \u2026 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], [17.0, 18.0, 26.0 , 42.0, 56.0, 82.0, 131.0, 133.0, 171.0, 213.0 \u2026 3253.0, 3259.0, 3274.0, 3274.0, 3281.0, 3285.0, 3291.0, 3296.0, 3299.0, 3304.0], [28.0, 30.0, 36.0, 39.0, 49.0, 58.0, 101.0, 120.0, 135.0, 214.0 \u2026 71266.0, 71857.0, 72362.0 , 72814.0, 73280.0, 73773.0, 74181.0, 74720.0, 75100.0, 75582.0], [503.0, 5 95.0, 858.0, 1325.0, 1970.0, 2737.0, 5277.0, 5834.0, 7835.0, 9375.0 \u2026 673 1.0, 6189.0, 5799.0, 5410.0, 5030.0, 4603.0, 4310.0, 3881.0, 3600.0, 3236.0 ]) using Turing mdl = countrymodel(china) cc = Turing.psample(mdl, NUTS(0.65), 2000, 4) import JLD2 JLD2.@save \"$jmddir/china_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/china_2020-03-29.jld2\" cc;","title":"China"},{"location":"china/#estimates","text":"plot(cc) describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.4012 0.1054 0.0017 0.0032 1458.7298 1.0003 pE0 0.0000 0.0000 0.0000 0.0000 785.1973 1.0022 p[1] 0.0000 0.0000 0.0000 0.0000 586.3224 1.0066 p[2] 0.8409 0.1131 0.0018 0.0031 1328.6271 1.0012 sigC 16476.3544 1915.5582 30.2876 55.3010 1136.5533 1.0029 sigD 45.9304 9.4465 0.1494 0.3130 808.6178 1.0038 sigRc 5351.2466 707.6024 11.1882 22.4649 778.8051 1.0031 \u03b2[1] 0.5598 0.0593 0.0009 0.0015 1557.5895 1.0010 \u03b2[2] 1.0103 0.7097 0.0112 0.0131 2597.7358 1.0012 \u03b3[1] 0.0816 0.0086 0.0001 0.0003 707.2292 1.0056 \u03b3[2] 0.2339 0.1522 0.0024 0.0049 1030.9134 1.0019 \u03c4 0.0000 0.0000 0.0000 0.0000 792.4414 1.0040 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.2653 0.3277 0.3768 0.4474 0.6787 pE0 0.0000 0.0000 0.0000 0.0000 0.0001 p[1] 0.0000 0.0000 0.0000 0.0000 0.0000 p[2] 0.5979 0.7664 0.8606 0.9354 0.9946 sigC 12965.2724 15138.9180 16418.0222 17710.5078 20428.2213 sigD 32.6592 39.0364 44.0738 51.1849 69.3655 sigRc 4064.7839 4870.3899 5329.8974 5794.5089 6751.0947 \u03b2[1] 0.4614 0.5179 0.5551 0.5936 0.6923 \u03b2[2] 0.0536 0.4429 0.8922 1.4450 2.6301 \u03b3[1] 0.0645 0.0756 0.0820 0.0876 0.0975 \u03b3[2] 0.0159 0.1166 0.2125 0.3268 0.5756 \u03c4 0.0000 0.0000 0.0000 0.0000 0.0000","title":"Estimates"},{"location":"china/#fit","text":"sdf = simtrajectories(cc, china, 1:150) f = plotvars(sdf, china, dayt0=dayt0) plot(f.fit, xlim=nothing, ylim=nothing)","title":"Fit"},{"location":"china/#implications","text":"for fig in f.trajectories display(plot(fig, xlim=nothing)) end","title":"Implications"},{"location":"covid/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using Pkg #Pkg.activate(\".\") # If running on vse.syzygy.ca, you might need to uncomment this command #try using CovidSEIR #catch #Pkg.add(PackageSpec(url=\"https://github.com/schrimpf/CovidSEIR.jl\")) #using CovidSEIR #end using Plots Plots.pyplot() using DataFrames, JLD2 jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) \"/home/paul/.julia/dev/CovidSEIR/docs/jmd\" Introduction \u00b6 Data \u00b6 We will use data from Johns Hopkins University Center for Systems Science and Engineering . It is gathered from a variety of sources and updated daily. JHU CSSE uses the data for this interactive website. . For another course, I wrote some notes using this data in python here. This data has daily cumulative counts of confirmed cases, recoveries, and deaths in each country (and provinces within some countries). covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-03-28 \u2502 67 \u2502 \u2502 2 \u2502 confirmed \u2502 486.367 \u2502 0 \u2502 0.0 \u2502 121478 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 79 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 177 \u2502 \u2502 5 \u2502 Lat \u2502 22.0528 \u2502 -41.4545 \u2502 23.8298 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 23.2675 \u2502 -135.0 \u2502 20.9394 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 18.9005 \u2502 0 \u2502 0.0 \u2502 10023 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 162.121 \u2502 0 \u2502 0.0 \u2502 62098 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 170 \u2502 \u2502 10 \u2502 cpop \u2502 2.27709e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502 Model \u00b6 We will estimate a susceptible, exposed, infectious, recovered (SEIR) epidemiological model of Covid transmission. In particular, we will use a version based on this webapp by Allison Hill . The model contains the following variables, all of which are functions of time $S$: Susceptible individuals $E$: Exposed individuals - infected but not yet infectious or symptomatic $I_i$: Undetected infected individuals in severity class $i$. Severity increaes with $i$ and we assume individuals must pass through all previous classes $I_1$: Mild infection $I_2$: Severe infection $C_i$ confirmed infected individuals in severity class $i$ $R = R_u + R_c$: individuals who have recovered from disease and are now immune $R_u$ recovered individuals whose infection were never detected $R_c$ recovered individuals who were confirmed cases $X$: Dead individuals Compared to Hill\u2019s model, we have reduced the number of severity classes and from 3 to 2, and we have added undetected infections and recoveries. In the data, we observe active confirmed cases $\\approx \\sum_i C_i$, deaths $\\approx X$, and confirmed recoveries $\\approx R_c$. These variables evolve according to the following system of differential equations. \\begin{align*} \\dot{S} & = -S \\left( \\sum_i \\beta_i (I_i + C_i) \\right) \\\\ \\dot{E} & = S \\left( \\sum_i \\beta_i (I_i + C_i) \\right) - a E \\\\ \\dot{I_1} & = a E - \\gamma_1 I_1 - p_1 I_1 - \\tau C_1 \\\\ \\dot{I_2} & = 0 \\\\ \\dot{C_1} & = \\tau I - \\gamma_1 C_1 - p_1 C_1 \\\\ \\dot{C_2} & = p_1(I_1 + C_1) - \\gamma_2 C_2 - p_2 C_2 \\\\ \\dot{R_u} & = \\sum_i \\gamma_i I_i \\\\ \\dot{R_c} & = \\sum_i \\gamma_i C_i \\\\ \\dot{X} & = p_2 C_2 \\end{align*} Where the parameters are : $\\beta_i$ rate at which infected individuals in class $i$ contact susceptibles and infect them $a$ rate of progression from the exposed to infected class $\\gamma_i$ rate at which infected individuals in class $i$ recover from disease and become immune $p_1$ rate at which infected individuals in class $i$ progress to class $i+1$ $p_2$ death rate for individuals in the most severe stage of disease $\\tau$ rate at which infections of class $1$ are detected Note that we are assuming that all severe infections are detected (and hence $I_2 = 0$). We are also assuming that confirmed and unconfirmed cases have the same recovery and progression rates. Empirical Model \u00b6 Our data has country population, $N$, daily cumulative confirmed cases, $c_t$, deaths, $d_t$, and recoveries, $r_t$. We will assume that at a known time 0, there is an unknown portion of exposed individuals, $p_0$, so \\begin{align*} S(0) = & (1-p_0) N \\\\ E(0) = & p_0 N \\end{align*} and all other model variables are 0 at time 0. We assume that the observed data is distributed as \\begin{align*} d_t \\sim & N(X(t), \\sigma_X^2) \\\\ r_t \\sim & N(R_c(t), \\sigma_R^2) \\\\ c_t - d_t - r_t \\sim & N(C_1(t) + C_2(t), \\sigma_C^2) \\end{align*} Model Limitations \u00b6 An important limitation is that the model assumes all parameters are constant over time. This is almost surely incorrect. Most countries have implemented quarantine and distancing policies to attempt to reduce $\\beta$. Efforts have also been made to increase $\\tau$. Innovations in treatment and crowding of the medical system likely lead to variation in $\\gamma$ and $p$. Single Country Estimates \u00b6 Priors \u00b6 We use the follow prior distributions. The means of these are loosely based on Hill\u2019s defaults . using Distributions defaultcountrypriors() = Dict( \"a\" => truncated(Normal(1/5, 3), 1/14, 1.0), \"p[1]\" => truncated(Normal(0.05, 0.3), 0, 1), \"p[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b3[1]\" => truncated(Normal(0.133, 0.5), 0, 3), \"\u03b3[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b2[1]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03b2[2]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03c4\" => truncated(Normal(0.2, 2), 0, 10), \"pE0\" => truncated(Normal(0.001, 0.1), 0, 1), \"sigD\" => InverseGamma(2,3), \"sigC\" => InverseGamma(2,3), \"sigRc\" => InverseGamma(2,3)) Summary statistics of draws from this prior distribution are below. pr = priorreport() pr.tbl 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.5263 0.2802 0.0177 0.0144 253.4545 0.9993 pE0 0.0790 0.0569 0.0036 0.0013 219.9777 0.9962 p[1] 0.2529 0.1830 0.0116 0.0114 250.8090 1.0134 p[2] 0.2775 0.1932 0.0122 0.0136 254.2063 1.0005 sigC 5.3357 19.4971 1.2331 2.2379 106.4011 1.0048 sigD 2.6446 2.8749 0.1818 0.0606 255.7700 0.9983 sigRc 2.9380 3.2822 0.2076 0.3147 183.8356 0.9997 \u03b2[1] 1.0184 0.6905 0.0437 0.0276 177.6735 0.9965 \u03b2[2] 0.9892 0.6673 0.0422 0.0383 306.2808 0.9963 \u03b3[1] 0.4392 0.3100 0.0196 0.0236 141.3713 1.0004 \u03b3[2] 0.2534 0.1762 0.0111 0.0172 233.4862 0.9990 \u03c4 1.6999 1.2119 0.0766 0.0266 194.4783 0.9967 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0882 0.2886 0.5393 0.7772 0.9620 pE0 0.0024 0.0317 0.0737 0.1120 0.1978 p[1] 0.0103 0.1069 0.2219 0.3703 0.6743 p[2] 0.0245 0.1275 0.2323 0.4044 0.7057 sigC 0.4777 1.0103 2.0044 4.2405 23.2499 sigD 0.4950 1.0583 1.7059 3.2054 10.6279 sigRc 0.5365 1.0271 1.8202 3.4039 14.0304 \u03b2[1] 0.0497 0.4025 1.0116 1.4657 2.4971 \u03b2[2] 0.0792 0.4397 0.9270 1.3470 2.4682 \u03b3[1] 0.0484 0.1741 0.3665 0.6558 1.1198 \u03b3[2] 0.0132 0.1159 0.2213 0.3556 0.6721 \u03c4 0.0273 0.7080 1.4394 2.4266 4.3182 The following plots show the implications of this prior for the observed data. The faint lines on each figure shows 1000 trajectories sampled from the prior distribution. The black line is the prior mean. The shaded region is a pointwise 90% prior credible interval. plot(pr.figs[1], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[2], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[3], xlabel=\"Days\", ylabel=\"Portion of population\") Subjectively this prior seems reasonable. It is perhaps too concentrated on relatively fast epidemics. I may alter it, but it\u2019s what I used for the current results. Estimation \u00b6 We estimate the model by MCMC. Specifically, we use the Turing.jl package (Ge, Xu, and Ghahramani 2018 ) . For sampling, we use the No-U-Turn-Sampler variant of Hamiltonian Monte Carlo. In the results below we use 4 chains with 1000 warmup iterations, and 1000 iterations for the results. Results \u00b6 Canada Italy South Korea China Extensions \u00b6 Estimate single country model for more countries/areas. Estimate a multi-country model with some parameters common across countries and others multi-level distributions. Allow time varying parameters. About this document \u00b6 This document was created using Weave.jl. The code is available in on github . Ge, Hong, Kai Xu, and Zoubin Ghahramani. 2018. \u201cTuring: A Language for Flexible Probabilistic Inference.\u201d In International Conference on Artificial Intelligence and Statistics, AISTATS 2018, 9-11 April 2018, Playa Blanca, Lanzarote, Canary Islands, Spain , 1682\u201390. http://proceedings.mlr.press/v84/ge18b.html .","title":"Model"},{"location":"covid/#introduction","text":"","title":"Introduction"},{"location":"covid/#data","text":"We will use data from Johns Hopkins University Center for Systems Science and Engineering . It is gathered from a variety of sources and updated daily. JHU CSSE uses the data for this interactive website. . For another course, I wrote some notes using this data in python here. This data has daily cumulative counts of confirmed cases, recoveries, and deaths in each country (and provinces within some countries). covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-03-28 \u2502 67 \u2502 \u2502 2 \u2502 confirmed \u2502 486.367 \u2502 0 \u2502 0.0 \u2502 121478 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 79 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 177 \u2502 \u2502 5 \u2502 Lat \u2502 22.0528 \u2502 -41.4545 \u2502 23.8298 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 23.2675 \u2502 -135.0 \u2502 20.9394 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 18.9005 \u2502 0 \u2502 0.0 \u2502 10023 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 162.121 \u2502 0 \u2502 0.0 \u2502 62098 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 170 \u2502 \u2502 10 \u2502 cpop \u2502 2.27709e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502","title":"Data"},{"location":"covid/#model","text":"We will estimate a susceptible, exposed, infectious, recovered (SEIR) epidemiological model of Covid transmission. In particular, we will use a version based on this webapp by Allison Hill . The model contains the following variables, all of which are functions of time $S$: Susceptible individuals $E$: Exposed individuals - infected but not yet infectious or symptomatic $I_i$: Undetected infected individuals in severity class $i$. Severity increaes with $i$ and we assume individuals must pass through all previous classes $I_1$: Mild infection $I_2$: Severe infection $C_i$ confirmed infected individuals in severity class $i$ $R = R_u + R_c$: individuals who have recovered from disease and are now immune $R_u$ recovered individuals whose infection were never detected $R_c$ recovered individuals who were confirmed cases $X$: Dead individuals Compared to Hill\u2019s model, we have reduced the number of severity classes and from 3 to 2, and we have added undetected infections and recoveries. In the data, we observe active confirmed cases $\\approx \\sum_i C_i$, deaths $\\approx X$, and confirmed recoveries $\\approx R_c$. These variables evolve according to the following system of differential equations. \\begin{align*} \\dot{S} & = -S \\left( \\sum_i \\beta_i (I_i + C_i) \\right) \\\\ \\dot{E} & = S \\left( \\sum_i \\beta_i (I_i + C_i) \\right) - a E \\\\ \\dot{I_1} & = a E - \\gamma_1 I_1 - p_1 I_1 - \\tau C_1 \\\\ \\dot{I_2} & = 0 \\\\ \\dot{C_1} & = \\tau I - \\gamma_1 C_1 - p_1 C_1 \\\\ \\dot{C_2} & = p_1(I_1 + C_1) - \\gamma_2 C_2 - p_2 C_2 \\\\ \\dot{R_u} & = \\sum_i \\gamma_i I_i \\\\ \\dot{R_c} & = \\sum_i \\gamma_i C_i \\\\ \\dot{X} & = p_2 C_2 \\end{align*} Where the parameters are : $\\beta_i$ rate at which infected individuals in class $i$ contact susceptibles and infect them $a$ rate of progression from the exposed to infected class $\\gamma_i$ rate at which infected individuals in class $i$ recover from disease and become immune $p_1$ rate at which infected individuals in class $i$ progress to class $i+1$ $p_2$ death rate for individuals in the most severe stage of disease $\\tau$ rate at which infections of class $1$ are detected Note that we are assuming that all severe infections are detected (and hence $I_2 = 0$). We are also assuming that confirmed and unconfirmed cases have the same recovery and progression rates.","title":"Model"},{"location":"covid/#empirical-model","text":"Our data has country population, $N$, daily cumulative confirmed cases, $c_t$, deaths, $d_t$, and recoveries, $r_t$. We will assume that at a known time 0, there is an unknown portion of exposed individuals, $p_0$, so \\begin{align*} S(0) = & (1-p_0) N \\\\ E(0) = & p_0 N \\end{align*} and all other model variables are 0 at time 0. We assume that the observed data is distributed as \\begin{align*} d_t \\sim & N(X(t), \\sigma_X^2) \\\\ r_t \\sim & N(R_c(t), \\sigma_R^2) \\\\ c_t - d_t - r_t \\sim & N(C_1(t) + C_2(t), \\sigma_C^2) \\end{align*}","title":"Empirical Model"},{"location":"covid/#model-limitations","text":"An important limitation is that the model assumes all parameters are constant over time. This is almost surely incorrect. Most countries have implemented quarantine and distancing policies to attempt to reduce $\\beta$. Efforts have also been made to increase $\\tau$. Innovations in treatment and crowding of the medical system likely lead to variation in $\\gamma$ and $p$.","title":"Model Limitations"},{"location":"covid/#single-country-estimates","text":"","title":"Single Country Estimates"},{"location":"covid/#priors","text":"We use the follow prior distributions. The means of these are loosely based on Hill\u2019s defaults . using Distributions defaultcountrypriors() = Dict( \"a\" => truncated(Normal(1/5, 3), 1/14, 1.0), \"p[1]\" => truncated(Normal(0.05, 0.3), 0, 1), \"p[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b3[1]\" => truncated(Normal(0.133, 0.5), 0, 3), \"\u03b3[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b2[1]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03b2[2]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03c4\" => truncated(Normal(0.2, 2), 0, 10), \"pE0\" => truncated(Normal(0.001, 0.1), 0, 1), \"sigD\" => InverseGamma(2,3), \"sigC\" => InverseGamma(2,3), \"sigRc\" => InverseGamma(2,3)) Summary statistics of draws from this prior distribution are below. pr = priorreport() pr.tbl 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.5263 0.2802 0.0177 0.0144 253.4545 0.9993 pE0 0.0790 0.0569 0.0036 0.0013 219.9777 0.9962 p[1] 0.2529 0.1830 0.0116 0.0114 250.8090 1.0134 p[2] 0.2775 0.1932 0.0122 0.0136 254.2063 1.0005 sigC 5.3357 19.4971 1.2331 2.2379 106.4011 1.0048 sigD 2.6446 2.8749 0.1818 0.0606 255.7700 0.9983 sigRc 2.9380 3.2822 0.2076 0.3147 183.8356 0.9997 \u03b2[1] 1.0184 0.6905 0.0437 0.0276 177.6735 0.9965 \u03b2[2] 0.9892 0.6673 0.0422 0.0383 306.2808 0.9963 \u03b3[1] 0.4392 0.3100 0.0196 0.0236 141.3713 1.0004 \u03b3[2] 0.2534 0.1762 0.0111 0.0172 233.4862 0.9990 \u03c4 1.6999 1.2119 0.0766 0.0266 194.4783 0.9967 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0882 0.2886 0.5393 0.7772 0.9620 pE0 0.0024 0.0317 0.0737 0.1120 0.1978 p[1] 0.0103 0.1069 0.2219 0.3703 0.6743 p[2] 0.0245 0.1275 0.2323 0.4044 0.7057 sigC 0.4777 1.0103 2.0044 4.2405 23.2499 sigD 0.4950 1.0583 1.7059 3.2054 10.6279 sigRc 0.5365 1.0271 1.8202 3.4039 14.0304 \u03b2[1] 0.0497 0.4025 1.0116 1.4657 2.4971 \u03b2[2] 0.0792 0.4397 0.9270 1.3470 2.4682 \u03b3[1] 0.0484 0.1741 0.3665 0.6558 1.1198 \u03b3[2] 0.0132 0.1159 0.2213 0.3556 0.6721 \u03c4 0.0273 0.7080 1.4394 2.4266 4.3182 The following plots show the implications of this prior for the observed data. The faint lines on each figure shows 1000 trajectories sampled from the prior distribution. The black line is the prior mean. The shaded region is a pointwise 90% prior credible interval. plot(pr.figs[1], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[2], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[3], xlabel=\"Days\", ylabel=\"Portion of population\") Subjectively this prior seems reasonable. It is perhaps too concentrated on relatively fast epidemics. I may alter it, but it\u2019s what I used for the current results.","title":"Priors"},{"location":"covid/#estimation","text":"We estimate the model by MCMC. Specifically, we use the Turing.jl package (Ge, Xu, and Ghahramani 2018 ) . For sampling, we use the No-U-Turn-Sampler variant of Hamiltonian Monte Carlo. In the results below we use 4 chains with 1000 warmup iterations, and 1000 iterations for the results.","title":"Estimation"},{"location":"covid/#results","text":"Canada Italy South Korea China","title":"Results"},{"location":"covid/#extensions","text":"Estimate single country model for more countries/areas. Estimate a multi-country model with some parameters common across countries and others multi-level distributions. Allow time varying parameters.","title":"Extensions"},{"location":"covid/#about-this-document","text":"This document was created using Weave.jl. The code is available in on github . Ge, Hong, Kai Xu, and Zoubin Ghahramani. 2018. \u201cTuring: A Language for Flexible Probabilistic Inference.\u201d In International Conference on Artificial Intelligence and Statistics, AISTATS 2018, 9-11 April 2018, Playa Blanca, Lanzarote, Canary Islands, Spain , 1682\u201390. http://proceedings.mlr.press/v84/ge18b.html .","title":"About this document"},{"location":"functions/","text":"Function Reference \u00b6 # CovidSEIR.countrymodel \u2014 Function . countrymodel(data::CountryData, priors=defaultcountrypriors(), ::Type{R}=Float64) where {R <: Real} = begni Returns Turing model for single country source # CovidSEIR.covidjhudata \u2014 Method . covidjhudata() Downloads most recent JHU CSSE data on covid cases, deaths, and recoveries. Returns a DataFrame source # CovidSEIR.plotvars \u2014 Method . plotvars(simdf::DataFrames.AbstractDataFrame, data::CountryData; dayt0=Dates.Date(\"2020-01-21\"), # one day before JHU data begins colors=ColorSchemes.colorschemes[:Set1_9]) Create plots showing fit and implications of simulated trajectories. source # CovidSEIR.priorreport \u2014 Function . priorreport((priors=defaultcountrypriors(), T=100, population=1e7) Create tables and figures summarizing priors. source # CovidSEIR.simtrajectories \u2014 Method . simtrajectories(cc::AbstractMCMC.AbstractChains, data::CountryData, ts; ic=Iterators.product(StatsBase.sample(1:size(cc,1),300, replace=false), 1:size(cc,3))) Simulate trajectories based on parameter values in chain cc . source # CovidSEIR.odeSEIR \u2014 Method . odeSEIR() Sets up ODE for SEIR model with unconfirmed cases. Returns an ODEProblem source # CovidSEIR.paramvars \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.paramvec \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.systemvars \u2014 Method . Transfrom ODE variables to/from vector source # CovidSEIR.systemvec \u2014 Method . Transfrom ODE variables to/from vector source Index \u00b6 CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Functions"},{"location":"functions/#function-reference","text":"# CovidSEIR.countrymodel \u2014 Function . countrymodel(data::CountryData, priors=defaultcountrypriors(), ::Type{R}=Float64) where {R <: Real} = begni Returns Turing model for single country source # CovidSEIR.covidjhudata \u2014 Method . covidjhudata() Downloads most recent JHU CSSE data on covid cases, deaths, and recoveries. Returns a DataFrame source # CovidSEIR.plotvars \u2014 Method . plotvars(simdf::DataFrames.AbstractDataFrame, data::CountryData; dayt0=Dates.Date(\"2020-01-21\"), # one day before JHU data begins colors=ColorSchemes.colorschemes[:Set1_9]) Create plots showing fit and implications of simulated trajectories. source # CovidSEIR.priorreport \u2014 Function . priorreport((priors=defaultcountrypriors(), T=100, population=1e7) Create tables and figures summarizing priors. source # CovidSEIR.simtrajectories \u2014 Method . simtrajectories(cc::AbstractMCMC.AbstractChains, data::CountryData, ts; ic=Iterators.product(StatsBase.sample(1:size(cc,1),300, replace=false), 1:size(cc,3))) Simulate trajectories based on parameter values in chain cc . source # CovidSEIR.odeSEIR \u2014 Method . odeSEIR() Sets up ODE for SEIR model with unconfirmed cases. Returns an ODEProblem source # CovidSEIR.paramvars \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.paramvec \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.systemvars \u2014 Method . Transfrom ODE variables to/from vector source # CovidSEIR.systemvec \u2014 Method . Transfrom ODE variables to/from vector source","title":"Function Reference"},{"location":"functions/#index","text":"CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Index"},{"location":"italy/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-03-28 \u2502 67 \u2502 \u2502 2 \u2502 confirmed \u2502 486.367 \u2502 0 \u2502 0.0 \u2502 121478 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 79 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 177 \u2502 \u2502 5 \u2502 Lat \u2502 22.0528 \u2502 -41.4545 \u2502 23.8298 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 23.2675 \u2502 -135.0 \u2502 20.9394 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 18.9005 \u2502 0 \u2502 0.0 \u2502 10023 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 162.121 \u2502 0 \u2502 0.0 \u2502 62098 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 170 \u2502 \u2502 10 \u2502 cpop \u2502 2.27709e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502 Italy \u00b6 italy = CountryData(covdf, \"Italy\"); itmod = countrymodel(italy) ci = Turing.psample(itmod, NUTS(0.65), 2000, 4) import JLD2 JLD2.@save \"$jmddir/italy_$(Dates.today()).jld2\" ci JLD2.@load \"$jmddir/italy_2020-03-28.jld2\" ci; Estimates \u00b6 plot(ci) describe(ci) 2-element Array{MCMCChains.ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.1821 0.1772 0.0028 0.0227 16.0643 1.7055 pE0 0.0000 0.0000 0.0000 0.0000 16.0643 1.9103 p[1] 0.0006 0.0005 0.0000 0.0001 17.7140 1.4648 p[2] 0.0279 0.0209 0.0003 0.0033 16.0643 7.7417 sigC 439.9273 57.7940 0.9138 6.8324 16.6947 1.4674 sigD 86.8377 24.9425 0.3944 3.8063 16.0643 3.4150 sigRc 143.3689 11.7722 0.1861 0.6651 326.4399 1.0226 \u03b2[1] 1.3916 0.7617 0.0120 0.1072 16.2578 1.5885 \u03b2[2] 1.0478 0.7186 0.0114 0.0346 364.2459 1.0204 \u03b3[1] 0.2462 0.2050 0.0032 0.0291 16.5431 1.5453 \u03b3[2] 0.0251 0.0288 0.0005 0.0046 16.0643 7.8777 \u03c4 0.0001 0.0000 0.0000 0.0000 91.1094 1.0839 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0723 0.0826 0.1013 0.1903 0.7374 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0000 0.0001 0.0006 0.0010 0.0019 p[2] 0.0152 0.0155 0.0160 0.0278 0.0704 sigC 355.6332 397.2074 428.3271 473.3011 579.4653 sigD 39.8203 75.1277 96.2984 103.7001 117.2422 sigRc 122.0351 135.1442 142.6531 151.3082 167.1851 \u03b2[1] 0.3304 0.6782 1.3742 1.8807 2.9848 \u03b2[2] 0.0484 0.4801 0.9462 1.4963 2.7269 \u03b3[1] 0.0002 0.0482 0.2242 0.3697 0.7272 \u03b3[2] 0.0028 0.0075 0.0104 0.0267 0.0823 \u03c4 0.0000 0.0001 0.0001 0.0001 0.0001 Compared to Canada, Italy has a very low estimate of $\\tau$. Apparently a high number of undetected cases helps to explain the rapid growth in confirmed cases in Italy. Fit \u00b6 sdf = simtrajectories(ci, italy, 1:150) f = plotvars(sdf, italy) f.fit As with Canada, the fit is very good, and the posterior distribution of observables is very precise. Implications \u00b6 for fig in f.trajectories display(fig) end The posterior estimates imply that Italy has about 10 times as many undetected cases as detected.","title":"Italy"},{"location":"italy/#italy","text":"italy = CountryData(covdf, \"Italy\"); itmod = countrymodel(italy) ci = Turing.psample(itmod, NUTS(0.65), 2000, 4) import JLD2 JLD2.@save \"$jmddir/italy_$(Dates.today()).jld2\" ci JLD2.@load \"$jmddir/italy_2020-03-28.jld2\" ci;","title":"Italy"},{"location":"italy/#estimates","text":"plot(ci) describe(ci) 2-element Array{MCMCChains.ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.1821 0.1772 0.0028 0.0227 16.0643 1.7055 pE0 0.0000 0.0000 0.0000 0.0000 16.0643 1.9103 p[1] 0.0006 0.0005 0.0000 0.0001 17.7140 1.4648 p[2] 0.0279 0.0209 0.0003 0.0033 16.0643 7.7417 sigC 439.9273 57.7940 0.9138 6.8324 16.6947 1.4674 sigD 86.8377 24.9425 0.3944 3.8063 16.0643 3.4150 sigRc 143.3689 11.7722 0.1861 0.6651 326.4399 1.0226 \u03b2[1] 1.3916 0.7617 0.0120 0.1072 16.2578 1.5885 \u03b2[2] 1.0478 0.7186 0.0114 0.0346 364.2459 1.0204 \u03b3[1] 0.2462 0.2050 0.0032 0.0291 16.5431 1.5453 \u03b3[2] 0.0251 0.0288 0.0005 0.0046 16.0643 7.8777 \u03c4 0.0001 0.0000 0.0000 0.0000 91.1094 1.0839 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0723 0.0826 0.1013 0.1903 0.7374 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0000 0.0001 0.0006 0.0010 0.0019 p[2] 0.0152 0.0155 0.0160 0.0278 0.0704 sigC 355.6332 397.2074 428.3271 473.3011 579.4653 sigD 39.8203 75.1277 96.2984 103.7001 117.2422 sigRc 122.0351 135.1442 142.6531 151.3082 167.1851 \u03b2[1] 0.3304 0.6782 1.3742 1.8807 2.9848 \u03b2[2] 0.0484 0.4801 0.9462 1.4963 2.7269 \u03b3[1] 0.0002 0.0482 0.2242 0.3697 0.7272 \u03b3[2] 0.0028 0.0075 0.0104 0.0267 0.0823 \u03c4 0.0000 0.0001 0.0001 0.0001 0.0001 Compared to Canada, Italy has a very low estimate of $\\tau$. Apparently a high number of undetected cases helps to explain the rapid growth in confirmed cases in Italy.","title":"Estimates"},{"location":"italy/#fit","text":"sdf = simtrajectories(ci, italy, 1:150) f = plotvars(sdf, italy) f.fit As with Canada, the fit is very good, and the posterior distribution of observables is very precise.","title":"Fit"},{"location":"italy/#implications","text":"for fig in f.trajectories display(fig) end The posterior estimates imply that Italy has about 10 times as many undetected cases as detected.","title":"Implications"},{"location":"korea/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-03-29 \u2502 68 \u2502 \u2502 2 \u2502 confirmed \u2502 521.072 \u2502 0 \u2502 0.0 \u2502 140886 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 79 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 177 \u2502 \u2502 5 \u2502 Lat \u2502 22.0528 \u2502 -41.4545 \u2502 23.8298 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 23.2675 \u2502 -135.0 \u2502 20.9394 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 20.5945 \u2502 0 \u2502 0.0 \u2502 10779 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 168.91 \u2502 0 \u2502 0.0 \u2502 62570 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 171 \u2502 \u2502 10 \u2502 cpop \u2502 2.2813e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502 South Korea \u00b6 korea = CountryData(covdf, \"Korea, South\") CountryData{Float64,Int64}(5.1635256e7, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0 \u2026 94.0, 102.0, 111.0, 111.0, 120.0, 126.0, 131.0, 139.0, 144.0, 152.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 1540.0 , 1540.0, 2909.0, 2909.0, 3507.0, 3730.0, 4144.0, 4528.0, 4811.0, 5033.0], [1.0, 1.0, 2.0, 2.0, 3.0, 4.0, 4.0, 4.0, 4.0, 11.0 \u2026 7018.0, 7157.0, 5941 .0, 5941.0, 5410.0, 5281.0, 4966.0, 4665.0, 4523.0, 4398.0]) using Turing mdl = countrymodel(korea) cc = Turing.psample(mdl, NUTS(0.65), 2000, 4) import JLD2 JLD2.@save \"$jmddir/korea_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/korea_2020-03-29.jld2\" cc; Estimates \u00b6 plot(cc) describe(cc) 2-element Array{MCMCChains.ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.7445 0.1648 0.0026 0.0030 2659.4445 1.0001 pE0 0.0000 0.0000 0.0000 0.0000 1047.3291 1.0038 p[1] 0.0002 0.0001 0.0000 0.0000 1471.1339 1.0024 p[2] 0.0007 0.0000 0.0000 0.0000 2746.0310 0.9997 sigC 321.1844 41.1352 0.6504 1.1266 1586.5783 1.0008 sigD 4.9647 0.5299 0.0084 0.0116 2646.0062 1.0007 sigRc 589.2263 55.8802 0.8835 0.8144 3247.0897 1.0001 \u03b2[1] 1.7364 0.3556 0.0056 0.0085 1625.8561 1.0012 \u03b2[2] 0.9517 0.6832 0.0108 0.0092 4596.2642 0.9997 \u03b3[1] 0.8178 0.2412 0.0038 0.0060 1431.9766 1.0022 \u03b3[2] 0.0181 0.0011 0.0000 0.0000 2299.7501 1.0004 \u03c4 0.0000 0.0000 0.0000 0.0000 3772.0254 1.0001 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.4126 0.6183 0.7560 0.8861 0.9893 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0001 0.0001 0.0002 0.0002 0.0003 p[2] 0.0007 0.0007 0.0007 0.0007 0.0008 sigC 255.3503 292.9805 315.9003 343.8002 414.9159 sigD 3.9841 4.6058 4.9401 5.2969 6.1085 sigRc 493.2846 550.6845 584.6365 621.8216 714.2856 \u03b2[1] 1.1571 1.4793 1.6956 1.9456 2.5213 \u03b2[2] 0.0481 0.4002 0.8243 1.3799 2.5147 \u03b3[1] 0.4246 0.6434 0.7912 0.9683 1.3553 \u03b3[2] 0.0158 0.0173 0.0181 0.0188 0.0203 \u03c4 0.0000 0.0000 0.0000 0.0000 0.0000 Fit \u00b6 sdf = simtrajectories(cc, korea, 1:150) f = plotvars(sdf, korea) plot!(f.fit, xlim=nothing) We see that the model does not fit the rapid drop in new cases in South Korea. This may be caused by the model\u2019s implausible assumption that transmission and testing rates are constant over time. Implications \u00b6 for fig in f.trajectories display(plot(fig, xlim=nothing)) end","title":"South Korea"},{"location":"korea/#south-korea","text":"korea = CountryData(covdf, \"Korea, South\") CountryData{Float64,Int64}(5.1635256e7, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0 \u2026 94.0, 102.0, 111.0, 111.0, 120.0, 126.0, 131.0, 139.0, 144.0, 152.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 1540.0 , 1540.0, 2909.0, 2909.0, 3507.0, 3730.0, 4144.0, 4528.0, 4811.0, 5033.0], [1.0, 1.0, 2.0, 2.0, 3.0, 4.0, 4.0, 4.0, 4.0, 11.0 \u2026 7018.0, 7157.0, 5941 .0, 5941.0, 5410.0, 5281.0, 4966.0, 4665.0, 4523.0, 4398.0]) using Turing mdl = countrymodel(korea) cc = Turing.psample(mdl, NUTS(0.65), 2000, 4) import JLD2 JLD2.@save \"$jmddir/korea_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/korea_2020-03-29.jld2\" cc;","title":"South Korea"},{"location":"korea/#estimates","text":"plot(cc) describe(cc) 2-element Array{MCMCChains.ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.7445 0.1648 0.0026 0.0030 2659.4445 1.0001 pE0 0.0000 0.0000 0.0000 0.0000 1047.3291 1.0038 p[1] 0.0002 0.0001 0.0000 0.0000 1471.1339 1.0024 p[2] 0.0007 0.0000 0.0000 0.0000 2746.0310 0.9997 sigC 321.1844 41.1352 0.6504 1.1266 1586.5783 1.0008 sigD 4.9647 0.5299 0.0084 0.0116 2646.0062 1.0007 sigRc 589.2263 55.8802 0.8835 0.8144 3247.0897 1.0001 \u03b2[1] 1.7364 0.3556 0.0056 0.0085 1625.8561 1.0012 \u03b2[2] 0.9517 0.6832 0.0108 0.0092 4596.2642 0.9997 \u03b3[1] 0.8178 0.2412 0.0038 0.0060 1431.9766 1.0022 \u03b3[2] 0.0181 0.0011 0.0000 0.0000 2299.7501 1.0004 \u03c4 0.0000 0.0000 0.0000 0.0000 3772.0254 1.0001 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.4126 0.6183 0.7560 0.8861 0.9893 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0001 0.0001 0.0002 0.0002 0.0003 p[2] 0.0007 0.0007 0.0007 0.0007 0.0008 sigC 255.3503 292.9805 315.9003 343.8002 414.9159 sigD 3.9841 4.6058 4.9401 5.2969 6.1085 sigRc 493.2846 550.6845 584.6365 621.8216 714.2856 \u03b2[1] 1.1571 1.4793 1.6956 1.9456 2.5213 \u03b2[2] 0.0481 0.4002 0.8243 1.3799 2.5147 \u03b3[1] 0.4246 0.6434 0.7912 0.9683 1.3553 \u03b3[2] 0.0158 0.0173 0.0181 0.0188 0.0203 \u03c4 0.0000 0.0000 0.0000 0.0000 0.0000","title":"Estimates"},{"location":"korea/#fit","text":"sdf = simtrajectories(cc, korea, 1:150) f = plotvars(sdf, korea) plot!(f.fit, xlim=nothing) We see that the model does not fit the rapid drop in new cases in South Korea. This may be caused by the model\u2019s implausible assumption that transmission and testing rates are constant over time.","title":"Fit"},{"location":"korea/#implications","text":"for fig in f.trajectories display(plot(fig, xlim=nothing)) end","title":"Implications"},{"location":"license/","text":"The model and results are licensed under a Creative Commons Attribution-ShareAlike 4.0 International License and were written by Paul Schrimpf. BibTeX citation. The license for the package source code is here.","title":"License"},{"location":"us/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-03-29 \u2502 68 \u2502 \u2502 2 \u2502 confirmed \u2502 521.072 \u2502 0 \u2502 0.0 \u2502 140886 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 79 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 177 \u2502 \u2502 5 \u2502 Lat \u2502 22.0528 \u2502 -41.4545 \u2502 23.8298 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 23.2675 \u2502 -135.0 \u2502 20.9394 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 20.5945 \u2502 0 \u2502 0.0 \u2502 10779 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 168.91 \u2502 0 \u2502 0.0 \u2502 62570 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 171 \u2502 \u2502 10 \u2502 cpop \u2502 2.2813e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502 United States \u00b6 using Dates us = CountryData(covdf, \"US\") CountryData{Float64,Int64}(3.2716743e8, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0 \u2026 244.0, 307.0, 417.0, 557.0, 706.0, 942.0, 1209.0, 1581. 0, 2026.0, 2467.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 1 47.0, 176.0, 178.0, 178.0, 348.0, 361.0, 681.0, 869.0, 1072.0, 2665.0], [1. 0, 1.0, 2.0, 2.0, 5.0, 5.0, 5.0, 5.0, 5.0, 7.0 \u2026 18709.0, 25006.0, 32681. 0, 43112.0, 52686.0, 64475.0, 81946.0, 99207.0, 118380.0, 135754.0]) using Turing mdl = countrymodel(us) cc = Turing.psample(mdl, NUTS(0.65), 2000, 4) import JLD2 JLD2.@save \"$jmddir/us_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/us_2020-03-29.jld2\" cc; Error: SystemError: opening file \"/home/paul/.julia/dev/CovidSEIR/docs/jmd/ us_2020-03-29.jld2\": No such file or directory Estimates \u00b6 plot(cc) Error: UndefVarError: cc not defined describe(cc) Error: UndefVarError: cc not defined Fit \u00b6 sdf = simtrajectories(cc, us, 1:150) Error: UndefVarError: cc not defined f = plotvars(sdf, us) Error: UndefVarError: sdf not defined plot(f.fit, xlim=nothing, ylim=nothing) Error: UndefVarError: f not defined Implications \u00b6 for fig in f.trajectories display(plot(fig, xlim=nothing)) end Error: UndefVarError: f not defined","title":"Us"},{"location":"us/#united-states","text":"using Dates us = CountryData(covdf, \"US\") CountryData{Float64,Int64}(3.2716743e8, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0 \u2026 244.0, 307.0, 417.0, 557.0, 706.0, 942.0, 1209.0, 1581. 0, 2026.0, 2467.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 1 47.0, 176.0, 178.0, 178.0, 348.0, 361.0, 681.0, 869.0, 1072.0, 2665.0], [1. 0, 1.0, 2.0, 2.0, 5.0, 5.0, 5.0, 5.0, 5.0, 7.0 \u2026 18709.0, 25006.0, 32681. 0, 43112.0, 52686.0, 64475.0, 81946.0, 99207.0, 118380.0, 135754.0]) using Turing mdl = countrymodel(us) cc = Turing.psample(mdl, NUTS(0.65), 2000, 4) import JLD2 JLD2.@save \"$jmddir/us_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/us_2020-03-29.jld2\" cc; Error: SystemError: opening file \"/home/paul/.julia/dev/CovidSEIR/docs/jmd/ us_2020-03-29.jld2\": No such file or directory","title":"United States"},{"location":"us/#estimates","text":"plot(cc) Error: UndefVarError: cc not defined describe(cc) Error: UndefVarError: cc not defined","title":"Estimates"},{"location":"us/#fit","text":"sdf = simtrajectories(cc, us, 1:150) Error: UndefVarError: cc not defined f = plotvars(sdf, us) Error: UndefVarError: sdf not defined plot(f.fit, xlim=nothing, ylim=nothing) Error: UndefVarError: f not defined","title":"Fit"},{"location":"us/#implications","text":"for fig in f.trajectories display(plot(fig, xlim=nothing)) end Error: UndefVarError: f not defined","title":"Implications"}]}