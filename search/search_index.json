{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CovidSEIR.jl \u00b6 Index \u00b6 CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Package Docs"},{"location":"#covidseirjl","text":"","title":"CovidSEIR.jl"},{"location":"#index","text":"CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Index"},{"location":"canada/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata(); Canada \u00b6 We estimate the model with the following code. It takes about an hour. canada = CountryData(covdf, \"Canada\"); using Turing canmod = CovidSEIR.TimeVarying.countrymodel(canada) cc = Turing.psample(canmod, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/canada_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/canada_tv_2020-04-09.jld2\" cc dayt0; Estimates \u00b6 plot(cc) We can see that there might be convergence issues. There are large differences between the four chains for some parameters. describe(cc) 2-element Array{MCMCChains.ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.1068 0.0364 0.0003 0.0024 82.9611 1.2247 pE0 0.0000 0.0000 0.0000 0.0000 78.7772 1.2688 p[1] 0.1063 0.0793 0.0006 0.0062 64.2570 1.9193 p[2] 0.0120 0.0049 0.0000 0.0003 64.2570 1.7782 sigC 167.7878 17.9235 0.1417 1.1282 78.0550 1.2149 sigD 6.6276 0.7309 0.0058 0.0495 65.5119 1.2620 sigRc 109.1130 9.4047 0.0744 0.5457 115.6945 1.0617 \u03b2[1] 1.1927 0.3558 0.0028 0.0248 64.2570 1.5124 \u03b2[2] 0.1390 0.1736 0.0014 0.0113 85.8438 1.1933 \u03b2[3] 1.3832 0.8148 0.0064 0.0525 68.1853 1.4122 \u03b3[1] 0.0132 0.0076 0.0001 0.0006 64.2570 1.4369 \u03b3[2] 0.0782 0.0210 0.0002 0.0014 64.2570 1.3916 \u03c1[1] 0.8102 0.0602 0.0005 0.0043 64.5680 1.3410 \u03c1[2] 64.0847 0.6431 0.0051 0.0436 65.9519 1.3600 \u03c4 3.9359 1.2169 0.0096 0.0842 66.0398 1.3239 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0721 0.0822 0.0982 0.1263 0.1903 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0477 0.0481 0.0877 0.1218 0.3898 p[2] 0.0041 0.0083 0.0113 0.0174 0.0185 sigC 146.1830 151.1294 164.0833 179.4342 208.9989 sigD 5.6398 6.1580 6.4290 6.9583 8.5249 sigRc 90.7293 102.4296 111.3804 113.7784 128.6707 \u03b2[1] 0.7587 0.7587 1.2164 1.4247 1.9091 \u03b2[2] 0.0061 0.0335 0.0606 0.1813 0.5860 \u03b2[3] 0.0912 0.6689 1.2960 2.3308 2.5461 \u03b3[1] 0.0011 0.0068 0.0121 0.0221 0.0252 \u03b3[2] 0.0365 0.0675 0.0751 0.0875 0.1263 \u03c1[1] 0.6958 0.7692 0.8052 0.8433 0.9455 \u03c1[2] 62.8200 63.6155 64.1065 64.7421 64.9846 \u03c4 1.4887 3.0611 4.0694 5.0147 5.7447 The parameter estimates are generally not very precise. Fit \u00b6 sdf = simtrajectories(cc, canada, 1:200) f = plotvars(sdf, canada) f.fit In this figure, solid lines are observed data, dashed lines are posterior means, and the shaded region is a pointwise 90% credible interval. Implications \u00b6 We now look at the model\u2019s projections for some observed and unobserved variables. for fig in f.trajectories display(fig) end In general we see a similar pattern as noted above: the posteriors for observed variables are fairly precise. However, the posteriors for unobserved variables, such as the portion of undetected infections and the portion of mild infections, are very imprecise.","title":"Canada"},{"location":"canada/#canada","text":"We estimate the model with the following code. It takes about an hour. canada = CountryData(covdf, \"Canada\"); using Turing canmod = CovidSEIR.TimeVarying.countrymodel(canada) cc = Turing.psample(canmod, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/canada_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/canada_tv_2020-04-09.jld2\" cc dayt0;","title":"Canada"},{"location":"canada/#estimates","text":"plot(cc) We can see that there might be convergence issues. There are large differences between the four chains for some parameters. describe(cc) 2-element Array{MCMCChains.ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.1068 0.0364 0.0003 0.0024 82.9611 1.2247 pE0 0.0000 0.0000 0.0000 0.0000 78.7772 1.2688 p[1] 0.1063 0.0793 0.0006 0.0062 64.2570 1.9193 p[2] 0.0120 0.0049 0.0000 0.0003 64.2570 1.7782 sigC 167.7878 17.9235 0.1417 1.1282 78.0550 1.2149 sigD 6.6276 0.7309 0.0058 0.0495 65.5119 1.2620 sigRc 109.1130 9.4047 0.0744 0.5457 115.6945 1.0617 \u03b2[1] 1.1927 0.3558 0.0028 0.0248 64.2570 1.5124 \u03b2[2] 0.1390 0.1736 0.0014 0.0113 85.8438 1.1933 \u03b2[3] 1.3832 0.8148 0.0064 0.0525 68.1853 1.4122 \u03b3[1] 0.0132 0.0076 0.0001 0.0006 64.2570 1.4369 \u03b3[2] 0.0782 0.0210 0.0002 0.0014 64.2570 1.3916 \u03c1[1] 0.8102 0.0602 0.0005 0.0043 64.5680 1.3410 \u03c1[2] 64.0847 0.6431 0.0051 0.0436 65.9519 1.3600 \u03c4 3.9359 1.2169 0.0096 0.0842 66.0398 1.3239 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0721 0.0822 0.0982 0.1263 0.1903 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0477 0.0481 0.0877 0.1218 0.3898 p[2] 0.0041 0.0083 0.0113 0.0174 0.0185 sigC 146.1830 151.1294 164.0833 179.4342 208.9989 sigD 5.6398 6.1580 6.4290 6.9583 8.5249 sigRc 90.7293 102.4296 111.3804 113.7784 128.6707 \u03b2[1] 0.7587 0.7587 1.2164 1.4247 1.9091 \u03b2[2] 0.0061 0.0335 0.0606 0.1813 0.5860 \u03b2[3] 0.0912 0.6689 1.2960 2.3308 2.5461 \u03b3[1] 0.0011 0.0068 0.0121 0.0221 0.0252 \u03b3[2] 0.0365 0.0675 0.0751 0.0875 0.1263 \u03c1[1] 0.6958 0.7692 0.8052 0.8433 0.9455 \u03c1[2] 62.8200 63.6155 64.1065 64.7421 64.9846 \u03c4 1.4887 3.0611 4.0694 5.0147 5.7447 The parameter estimates are generally not very precise.","title":"Estimates"},{"location":"canada/#fit","text":"sdf = simtrajectories(cc, canada, 1:200) f = plotvars(sdf, canada) f.fit In this figure, solid lines are observed data, dashed lines are posterior means, and the shaded region is a pointwise 90% credible interval.","title":"Fit"},{"location":"canada/#implications","text":"We now look at the model\u2019s projections for some observed and unobserved variables. for fig in f.trajectories display(fig) end In general we see a similar pattern as noted above: the posteriors for observed variables are fairly precise. However, the posteriors for unobserved variables, such as the portion of undetected infections and the portion of mild infections, are very imprecise.","title":"Implications"},{"location":"china/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata(); China \u00b6 using Dates dayt0 = Dates.Date(\"2020-01-22\") - Dates.Day(1) china = CountryData(covdf, \"China\", 1) CovidSEIR.CountryData{Float64,Int64}(1.39273e9, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], [17.0, 18.0, 26.0, 42.0, 5 6.0, 82.0, 131.0, 133.0, 171.0, 213.0 \u2026 3308.0, 3309.0, 3316.0, 3322.0, 3 326.0, 3330.0, 3333.0, 3335.0, 3335.0, 3337.0], [28.0, 30.0, 36.0, 39.0, 49 .0, 58.0, 101.0, 120.0, 135.0, 214.0 \u2026 75923.0, 76206.0, 76405.0, 76565.0 , 76760.0, 76946.0, 77207.0, 77310.0, 77410.0, 77567.0], [503.0, 595.0, 858 .0, 1325.0, 1970.0, 2737.0, 5277.0, 5834.0, 7835.0, 9375.0 \u2026 2967.0, 2764 .0, 2640.0, 2545.0, 2425.0, 2267.0, 2062.0, 2020.0, 1973.0, 1905.0]) using Turing mdl = CovidSEIR.TimeVarying.countrymodel(china) cc = Turing.psample(mdl, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/china_$(Dates.today()).jld2\" cc dayt0 JLD2.@load \"$jmddir/china_tv_2020-04-09.jld2\" cc dayt0; Estimates \u00b6 plot(cc) describe(cc) 2-element Array{MCMCChains.ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.6195 0.2265 0.0018 0.0166 64.2570 1.8307 pE0 0.0000 0.0000 0.0000 0.0000 100.7389 1.1140 p[1] 0.0147 0.0605 0.0005 0.0041 64.2570 1.1205 p[2] 0.4263 0.4286 0.0034 0.0337 64.2570 6.6704 sigC 13041.9455 4889.0789 38.6516 383.1459 64.2570 4.9322 sigD 107.1081 120.4377 0.9521 9.5028 64.2570 8.0415 sigRc 7992.4769 3580.6074 28.3072 281.6652 64.2570 5.3393 \u03b2[1] 0.5196 0.4704 0.0037 0.0354 64.2570 1.8358 \u03b2[2] 0.5360 0.5966 0.0047 0.0391 67.6265 1.3326 \u03b2[3] 0.4654 0.4828 0.0038 0.0370 64.2570 1.7957 \u03b3[1] 0.5839 0.5488 0.0043 0.0426 64.2570 3.2973 \u03b3[2] 0.1514 0.1325 0.0010 0.0087 65.0595 1.3789 \u03c1[1] 0.9434 0.0778 0.0006 0.0054 64.2570 1.5063 \u03c1[2] 83.5967 2.1372 0.0169 0.1661 64.2570 2.1729 \u03c4 0.0009 0.0013 0.0000 0.0001 67.0957 1.3091 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.2550 0.4135 0.6368 0.8140 0.9783 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0000 0.0001 0.0002 0.0048 0.1339 p[2] 0.0021 0.0034 0.2299 0.8652 0.9827 sigC 4483.9308 9937.9467 14808.8420 16370.0542 19386.8647 sigD 28.6542 35.6943 40.2870 105.1679 354.1325 sigRc 4383.9458 5166.4610 6488.4776 10762.5863 15248.7491 \u03b2[1] 0.0090 0.1510 0.2454 0.8891 1.5531 \u03b2[2] 0.0017 0.0637 0.3203 0.8082 2.0946 \u03b2[3] 0.0176 0.1076 0.2390 0.7528 1.7028 \u03b3[1] 0.0727 0.0787 0.2264 1.0778 1.5741 \u03b3[2] 0.0409 0.0456 0.0901 0.2162 0.5025 \u03c1[1] 0.7489 0.9008 0.9923 0.9984 0.9998 \u03c1[2] 80.9140 81.9111 83.0247 85.4440 88.0343 \u03c4 0.0000 0.0000 0.0002 0.0014 0.0045 Fit \u00b6 sdf = simtrajectories(cc, china, 1:150) f = plotvars(sdf, china, dayt0=dayt0) plot(f.fit, xlim=nothing, ylim=(0, maximum(china.active)*2)) Implications \u00b6 for fig in f.trajectories display(plot(fig, xlim=nothing)) end","title":"China"},{"location":"china/#china","text":"using Dates dayt0 = Dates.Date(\"2020-01-22\") - Dates.Day(1) china = CountryData(covdf, \"China\", 1) CovidSEIR.CountryData{Float64,Int64}(1.39273e9, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], [17.0, 18.0, 26.0, 42.0, 5 6.0, 82.0, 131.0, 133.0, 171.0, 213.0 \u2026 3308.0, 3309.0, 3316.0, 3322.0, 3 326.0, 3330.0, 3333.0, 3335.0, 3335.0, 3337.0], [28.0, 30.0, 36.0, 39.0, 49 .0, 58.0, 101.0, 120.0, 135.0, 214.0 \u2026 75923.0, 76206.0, 76405.0, 76565.0 , 76760.0, 76946.0, 77207.0, 77310.0, 77410.0, 77567.0], [503.0, 595.0, 858 .0, 1325.0, 1970.0, 2737.0, 5277.0, 5834.0, 7835.0, 9375.0 \u2026 2967.0, 2764 .0, 2640.0, 2545.0, 2425.0, 2267.0, 2062.0, 2020.0, 1973.0, 1905.0]) using Turing mdl = CovidSEIR.TimeVarying.countrymodel(china) cc = Turing.psample(mdl, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/china_$(Dates.today()).jld2\" cc dayt0 JLD2.@load \"$jmddir/china_tv_2020-04-09.jld2\" cc dayt0;","title":"China"},{"location":"china/#estimates","text":"plot(cc) describe(cc) 2-element Array{MCMCChains.ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.6195 0.2265 0.0018 0.0166 64.2570 1.8307 pE0 0.0000 0.0000 0.0000 0.0000 100.7389 1.1140 p[1] 0.0147 0.0605 0.0005 0.0041 64.2570 1.1205 p[2] 0.4263 0.4286 0.0034 0.0337 64.2570 6.6704 sigC 13041.9455 4889.0789 38.6516 383.1459 64.2570 4.9322 sigD 107.1081 120.4377 0.9521 9.5028 64.2570 8.0415 sigRc 7992.4769 3580.6074 28.3072 281.6652 64.2570 5.3393 \u03b2[1] 0.5196 0.4704 0.0037 0.0354 64.2570 1.8358 \u03b2[2] 0.5360 0.5966 0.0047 0.0391 67.6265 1.3326 \u03b2[3] 0.4654 0.4828 0.0038 0.0370 64.2570 1.7957 \u03b3[1] 0.5839 0.5488 0.0043 0.0426 64.2570 3.2973 \u03b3[2] 0.1514 0.1325 0.0010 0.0087 65.0595 1.3789 \u03c1[1] 0.9434 0.0778 0.0006 0.0054 64.2570 1.5063 \u03c1[2] 83.5967 2.1372 0.0169 0.1661 64.2570 2.1729 \u03c4 0.0009 0.0013 0.0000 0.0001 67.0957 1.3091 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.2550 0.4135 0.6368 0.8140 0.9783 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0000 0.0001 0.0002 0.0048 0.1339 p[2] 0.0021 0.0034 0.2299 0.8652 0.9827 sigC 4483.9308 9937.9467 14808.8420 16370.0542 19386.8647 sigD 28.6542 35.6943 40.2870 105.1679 354.1325 sigRc 4383.9458 5166.4610 6488.4776 10762.5863 15248.7491 \u03b2[1] 0.0090 0.1510 0.2454 0.8891 1.5531 \u03b2[2] 0.0017 0.0637 0.3203 0.8082 2.0946 \u03b2[3] 0.0176 0.1076 0.2390 0.7528 1.7028 \u03b3[1] 0.0727 0.0787 0.2264 1.0778 1.5741 \u03b3[2] 0.0409 0.0456 0.0901 0.2162 0.5025 \u03c1[1] 0.7489 0.9008 0.9923 0.9984 0.9998 \u03c1[2] 80.9140 81.9111 83.0247 85.4440 88.0343 \u03c4 0.0000 0.0000 0.0002 0.0014 0.0045","title":"Estimates"},{"location":"china/#fit","text":"sdf = simtrajectories(cc, china, 1:150) f = plotvars(sdf, china, dayt0=dayt0) plot(f.fit, xlim=nothing, ylim=(0, maximum(china.active)*2))","title":"Fit"},{"location":"china/#implications","text":"for fig in f.trajectories display(plot(fig, xlim=nothing)) end","title":"Implications"},{"location":"covid/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR using Plots Plots.pyplot() using DataFrames, JLD2 jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) \"/home/paul/.julia/dev/CovidSEIR/docs/jmd\" Introduction \u00b6 Data \u00b6 We will use data from Johns Hopkins University Center for Systems Science and Engineering . It is gathered from a variety of sources and updated daily. JHU CSSE uses the data for this interactive website. . For another course, I wrote some notes using this data in python here. This data has daily cumulative counts of confirmed cases, recoveries, and deaths in each country (and provinces within some countries). covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrames.DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-04-08 \u2502 78 \u2502 \u2502 2 \u2502 confirmed \u2502 994.373 \u2502 0 \u2502 1.0 \u2502 429052 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 82 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 184 \u2502 \u2502 5 \u2502 Lat \u2502 21.1939 \u2502 -51.7963 \u2502 22.8209 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 21.5745 \u2502 -135.0 \u2502 20.5356 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 47.3493 \u2502 0 \u2502 0.0 \u2502 17669 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 264.049 \u2502 0 \u2502 0.0 \u2502 64142 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 177 \u2502 \u2502 10 \u2502 cpop \u2502 2.24574e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502 Model \u00b6 We will estimate a susceptible, exposed, infectious, recovered (SEIR) epidemiological model of Covid transmission. In particular, we will use a version based on this webapp by Allison Hill . The model contains the following variables, all of which are functions of time $S$: Susceptible individuals $E$: Exposed individuals - infected but not yet infectious or symptomatic $I_i$: Undetected infected individuals in severity class $i$. Severity increaes with $i$ and we assume individuals must pass through all previous classes $I_1$: Mild infection $I_2$: Severe infection $C_i$ confirmed infected individuals in severity class $i$ $R = R_u + R_c$: individuals who have recovered from disease and are now immune $R_u$ recovered individuals whose infection were never detected $R_c$ recovered individuals who were confirmed cases $X$: Dead individuals Compared to Hill\u2019s model, we have reduced the number of severity classes and from 3 to 2, and we have added undetected infections and recoveries. In the data, we observe active confirmed cases $\\approx \\sum_i C_i$, deaths $\\approx X$, and confirmed recoveries $\\approx R_c$. These variables evolve according to the following system of differential equations. \\begin{align*} \\dot{S} & = -S \\left( R(t)(\\beta_1C_1 + (\\beta_1 + \\beta_3)I_1) + C_2 \\beta_2 \\right)/N \\\\ \\dot{E} & = S \\left( R(t)(\\beta_1C_1 + (\\beta_1 + \\beta_3)I_1) + C_2 \\beta_2 \\right)/N - a E \\\\ \\dot{I_1} & = a E - \\gamma_1 I_1 - p_1 I_1 - \\tau C_1 \\\\ \\dot{I_2} & = 0 \\\\ \\dot{C_1} & = \\tau I - \\gamma_1 C_1 - p_1 C_1 \\\\ \\dot{C_2} & = p_1(I_1 + C_1) - \\gamma_2 C_2 - p_2 C_2 \\\\ \\dot{R_u} & = \\sum_i \\gamma_i I_i \\\\ \\dot{R_c} & = \\sum_i \\gamma_i C_i \\\\ \\dot{X} & = p_2 C_2 \\end{align*} Where the parameters are : $\\beta_1$, $\\beta_2$ baseline rate at which confirmed infected individuals in class $i$ contact susceptibles and infect them $\\beta_1+\\beta_3$ baseline rate at which undetected infected individuals infect others $R(t)$ reduction in infection rate due to isolation, quarantine, and/or lockdown $a$ rate of progression from the exposed to infected class $\\gamma_i$ rate at which infected individuals in class $i$ recover from disease and become immune $p_1$ rate at which infected individuals in class $i$ progress to class $i+1$ $p_2$ death rate for individuals in the most severe stage of disease $\\tau$ rate at which infections of class $1$ are detected Note that we are assuming that all severe infections are detected (and hence $I_2 = 0$). We are also assuming that confirmed and unconfirmed cases have the same recovery and progression rates. Empirical Model \u00b6 Our data has country population, $N$, daily cumulative confirmed cases, $c_t$, deaths, $d_t$, and recoveries, $r_t$. We will assume that at a known time 0, there is an unknown portion of exposed individuals, $p_0$, so \\begin{align*} S(0) = & (1-p_0) N \\\\ E(0) = & p_0 N \\end{align*} and all other model variables are 0 at time 0. We assume that the observed data is distributed as \\begin{align*} d_t \\sim & N(X(t), \\sigma_X^2) \\\\ r_t \\sim & N(R_c(t), \\sigma_R^2) \\\\ c_t - d_t - r_t \\sim & N(C_1(t) + C_2(t), \\sigma_C^2) \\end{align*} We parameterize the reduction in infection rates from public policy as R(t) = 1- \\frac{\\rho_1}{1+\\exp(\\rho_2 -t)} This implies that infection rates drop by roughly 100$\\rho_1$ percent in the week centered on $t=\\rho_2$. Model Limitations \u00b6 An important limitation is that the model assumes all other parameters are constant over time. Although we allow changes in the infection rate, efforts have also been made to increase $\\tau$. Innovations in treatment and crowding of the medical system likely lead to variation in $\\gamma$ and $p$. Single Country Estimates \u00b6 Priors \u00b6 We use the follow prior distributions. The means of these are loosely based on Hill\u2019s defaults . using Distributions defaultcountrypriors() = Dict( \"a\" => truncated(Normal(1/5, 3), 1/14, 1.0), \"p[1]\" => truncated(Normal(0.05, 0.3), 0, 1), \"p[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b3[1]\" => truncated(Normal(0.133, 0.5), 0, 3), \"\u03b3[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b2[1]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03b2[2]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03c4\" => truncated(Normal(0.2, 2), 0, 10), \"pE0\" => truncated(Normal(0.001, 0.1), 0, 1), \"sigD\" => InverseGamma(2,3), \"sigC\" => InverseGamma(2,3), \"sigRc\" => InverseGamma(2,3), \"\u03c1[1]\" => truncated(Normal(0.5, 2), 0, 1), \"\u03c1[2]\" => truncated(Normal(30, 30), 0, 100) Summary statistics of draws from this prior distribution are below. priors = CovidSEIR.TimeVarying.defaultpriors() population=1e6 T = 150 ode = CovidSEIR.TimeVarying.odeSEIR() model=CovidSEIR.TimeVarying.turingmodel1(population, 1:T, missing, missing, missing,ode, priors); pr = CovidSEIR.priorreport(priors, 150,population,model=model) pr.tbl 15\u00d76 DataFrames.DataFrame \u2502 Row \u2502 parameter \u2502 mean \u2502 stddev \u2502 q5 \u2502 q50 \u2502 q95 \u2502 \u2502 \u2502 Any \u2502 Any \u2502 Any \u2502 Any \u2502 Any \u2502 Any \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2524 \u2502 1 \u2502 a \u2502 0.532712 \u2502 0.268119 \u2502 0.116974 \u2502 0.530152 \u2502 0.95637 3 \u2502 \u2502 2 \u2502 pE0 \u2502 0.0803546 \u2502 0.060566 \u2502 0.00621984 \u2502 0.0684179 \u2502 0.19678 3 \u2502 \u2502 3 \u2502 p[1] \u2502 0.258829 \u2502 0.18868 \u2502 0.0228011 \u2502 0.220798 \u2502 0.61808 9 \u2502 \u2502 4 \u2502 p[2] \u2502 0.256682 \u2502 0.187616 \u2502 0.0215964 \u2502 0.219781 \u2502 0.62295 7 \u2502 \u2502 5 \u2502 sigC \u2502 3.04356 \u2502 5.37858 \u2502 0.643027 \u2502 1.8324 \u2502 8.48021 \u2502 \u2502 6 \u2502 sigD \u2502 3.07841 \u2502 7.12199 \u2502 0.637573 \u2502 1.81763 \u2502 8.73365 \u2502 \u2502 7 \u2502 sigRc \u2502 2.85886 \u2502 4.87482 \u2502 0.640045 \u2502 1.76814 \u2502 8.33731 \u2502 \u2502 8 \u2502 \u03b2[1] \u2502 1.00787 \u2502 0.6997 \u2502 0.0938617 \u2502 0.892331 \u2502 2.32594 \u2502 \u2502 9 \u2502 \u03b2[2] \u2502 1.02075 \u2502 0.699059 \u2502 0.105306 \u2502 0.908801 \u2502 2.32254 \u2502 \u2502 10 \u2502 \u03b2[3] \u2502 1.0024 \u2502 0.694571 \u2502 0.0931079 \u2502 0.892557 \u2502 2.29592 \u2502 \u2502 11 \u2502 \u03b3[1] \u2502 0.451114 \u2502 0.324261 \u2502 0.0405204 \u2502 0.392601 \u2502 1.06067 \u2502 \u2502 12 \u2502 \u03b3[2] \u2502 0.259019 \u2502 0.189499 \u2502 0.0220457 \u2502 0.222663 \u2502 0.62066 7 \u2502 \u2502 13 \u2502 \u03c1[1] \u2502 0.499144 \u2502 0.289255 \u2502 0.0510383 \u2502 0.498319 \u2502 0.94801 8 \u2502 \u2502 14 \u2502 \u03c1[2] \u2502 37.7277 \u2502 22.6274 \u2502 5.0063 \u2502 35.2744 \u2502 79.358 \u2502 \u2502 15 \u2502 \u03c4 \u2502 1.65824 \u2502 1.23631 \u2502 0.130206 \u2502 1.40798 \u2502 4.08954 \u2502 The following plots show the implications of this prior for the observed data. The faint lines on each figure shows 1000 trajectories sampled from the prior distribution. The black line is the prior mean. The shaded region is a pointwise 90% prior credible interval. plot(pr.figs[1], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[2], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[3], xlabel=\"Days\", ylabel=\"Portion of population\") Subjectively this prior seems reasonable. It is perhaps too concentrated on relatively fast epidemics. I may alter it, but it\u2019s what I used for the current results. Estimation \u00b6 We estimate the model by MCMC. Specifically, we use the Turing.jl package (Ge, Xu, and Ghahramani 2018 ) . For sampling, we use the No-U-Turn-Sampler variant of Hamiltonian Monte Carlo. In the results below we use 4 chains with 1000 warmup iterations, and 4000 iterations for the results. Results \u00b6 Canada Italy South Korea China United States Extensions \u00b6 Improve chain mixing. Estimate a multi-country model with some parameters common across countries and others multi-level distributions. About this document \u00b6 This document was created using Weave.jl. The code is available in on github . Ge, Hong, Kai Xu, and Zoubin Ghahramani. 2018. \u201cTuring: A Language for Flexible Probabilistic Inference.\u201d In International Conference on Artificial Intelligence and Statistics, AISTATS 2018, 9-11 April 2018, Playa Blanca, Lanzarote, Canary Islands, Spain , 1682\u201390. http://proceedings.mlr.press/v84/ge18b.html .","title":"Model"},{"location":"covid/#introduction","text":"","title":"Introduction"},{"location":"covid/#data","text":"We will use data from Johns Hopkins University Center for Systems Science and Engineering . It is gathered from a variety of sources and updated daily. JHU CSSE uses the data for this interactive website. . For another course, I wrote some notes using this data in python here. This data has daily cumulative counts of confirmed cases, recoveries, and deaths in each country (and provinces within some countries). covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrames.DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-04-08 \u2502 78 \u2502 \u2502 2 \u2502 confirmed \u2502 994.373 \u2502 0 \u2502 1.0 \u2502 429052 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 82 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 184 \u2502 \u2502 5 \u2502 Lat \u2502 21.1939 \u2502 -51.7963 \u2502 22.8209 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 21.5745 \u2502 -135.0 \u2502 20.5356 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 47.3493 \u2502 0 \u2502 0.0 \u2502 17669 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 264.049 \u2502 0 \u2502 0.0 \u2502 64142 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 177 \u2502 \u2502 10 \u2502 cpop \u2502 2.24574e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502","title":"Data"},{"location":"covid/#model","text":"We will estimate a susceptible, exposed, infectious, recovered (SEIR) epidemiological model of Covid transmission. In particular, we will use a version based on this webapp by Allison Hill . The model contains the following variables, all of which are functions of time $S$: Susceptible individuals $E$: Exposed individuals - infected but not yet infectious or symptomatic $I_i$: Undetected infected individuals in severity class $i$. Severity increaes with $i$ and we assume individuals must pass through all previous classes $I_1$: Mild infection $I_2$: Severe infection $C_i$ confirmed infected individuals in severity class $i$ $R = R_u + R_c$: individuals who have recovered from disease and are now immune $R_u$ recovered individuals whose infection were never detected $R_c$ recovered individuals who were confirmed cases $X$: Dead individuals Compared to Hill\u2019s model, we have reduced the number of severity classes and from 3 to 2, and we have added undetected infections and recoveries. In the data, we observe active confirmed cases $\\approx \\sum_i C_i$, deaths $\\approx X$, and confirmed recoveries $\\approx R_c$. These variables evolve according to the following system of differential equations. \\begin{align*} \\dot{S} & = -S \\left( R(t)(\\beta_1C_1 + (\\beta_1 + \\beta_3)I_1) + C_2 \\beta_2 \\right)/N \\\\ \\dot{E} & = S \\left( R(t)(\\beta_1C_1 + (\\beta_1 + \\beta_3)I_1) + C_2 \\beta_2 \\right)/N - a E \\\\ \\dot{I_1} & = a E - \\gamma_1 I_1 - p_1 I_1 - \\tau C_1 \\\\ \\dot{I_2} & = 0 \\\\ \\dot{C_1} & = \\tau I - \\gamma_1 C_1 - p_1 C_1 \\\\ \\dot{C_2} & = p_1(I_1 + C_1) - \\gamma_2 C_2 - p_2 C_2 \\\\ \\dot{R_u} & = \\sum_i \\gamma_i I_i \\\\ \\dot{R_c} & = \\sum_i \\gamma_i C_i \\\\ \\dot{X} & = p_2 C_2 \\end{align*} Where the parameters are : $\\beta_1$, $\\beta_2$ baseline rate at which confirmed infected individuals in class $i$ contact susceptibles and infect them $\\beta_1+\\beta_3$ baseline rate at which undetected infected individuals infect others $R(t)$ reduction in infection rate due to isolation, quarantine, and/or lockdown $a$ rate of progression from the exposed to infected class $\\gamma_i$ rate at which infected individuals in class $i$ recover from disease and become immune $p_1$ rate at which infected individuals in class $i$ progress to class $i+1$ $p_2$ death rate for individuals in the most severe stage of disease $\\tau$ rate at which infections of class $1$ are detected Note that we are assuming that all severe infections are detected (and hence $I_2 = 0$). We are also assuming that confirmed and unconfirmed cases have the same recovery and progression rates.","title":"Model"},{"location":"covid/#empirical-model","text":"Our data has country population, $N$, daily cumulative confirmed cases, $c_t$, deaths, $d_t$, and recoveries, $r_t$. We will assume that at a known time 0, there is an unknown portion of exposed individuals, $p_0$, so \\begin{align*} S(0) = & (1-p_0) N \\\\ E(0) = & p_0 N \\end{align*} and all other model variables are 0 at time 0. We assume that the observed data is distributed as \\begin{align*} d_t \\sim & N(X(t), \\sigma_X^2) \\\\ r_t \\sim & N(R_c(t), \\sigma_R^2) \\\\ c_t - d_t - r_t \\sim & N(C_1(t) + C_2(t), \\sigma_C^2) \\end{align*} We parameterize the reduction in infection rates from public policy as R(t) = 1- \\frac{\\rho_1}{1+\\exp(\\rho_2 -t)} This implies that infection rates drop by roughly 100$\\rho_1$ percent in the week centered on $t=\\rho_2$.","title":"Empirical Model"},{"location":"covid/#model-limitations","text":"An important limitation is that the model assumes all other parameters are constant over time. Although we allow changes in the infection rate, efforts have also been made to increase $\\tau$. Innovations in treatment and crowding of the medical system likely lead to variation in $\\gamma$ and $p$.","title":"Model Limitations"},{"location":"covid/#single-country-estimates","text":"","title":"Single Country Estimates"},{"location":"covid/#priors","text":"We use the follow prior distributions. The means of these are loosely based on Hill\u2019s defaults . using Distributions defaultcountrypriors() = Dict( \"a\" => truncated(Normal(1/5, 3), 1/14, 1.0), \"p[1]\" => truncated(Normal(0.05, 0.3), 0, 1), \"p[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b3[1]\" => truncated(Normal(0.133, 0.5), 0, 3), \"\u03b3[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b2[1]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03b2[2]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03c4\" => truncated(Normal(0.2, 2), 0, 10), \"pE0\" => truncated(Normal(0.001, 0.1), 0, 1), \"sigD\" => InverseGamma(2,3), \"sigC\" => InverseGamma(2,3), \"sigRc\" => InverseGamma(2,3), \"\u03c1[1]\" => truncated(Normal(0.5, 2), 0, 1), \"\u03c1[2]\" => truncated(Normal(30, 30), 0, 100) Summary statistics of draws from this prior distribution are below. priors = CovidSEIR.TimeVarying.defaultpriors() population=1e6 T = 150 ode = CovidSEIR.TimeVarying.odeSEIR() model=CovidSEIR.TimeVarying.turingmodel1(population, 1:T, missing, missing, missing,ode, priors); pr = CovidSEIR.priorreport(priors, 150,population,model=model) pr.tbl 15\u00d76 DataFrames.DataFrame \u2502 Row \u2502 parameter \u2502 mean \u2502 stddev \u2502 q5 \u2502 q50 \u2502 q95 \u2502 \u2502 \u2502 Any \u2502 Any \u2502 Any \u2502 Any \u2502 Any \u2502 Any \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2524 \u2502 1 \u2502 a \u2502 0.532712 \u2502 0.268119 \u2502 0.116974 \u2502 0.530152 \u2502 0.95637 3 \u2502 \u2502 2 \u2502 pE0 \u2502 0.0803546 \u2502 0.060566 \u2502 0.00621984 \u2502 0.0684179 \u2502 0.19678 3 \u2502 \u2502 3 \u2502 p[1] \u2502 0.258829 \u2502 0.18868 \u2502 0.0228011 \u2502 0.220798 \u2502 0.61808 9 \u2502 \u2502 4 \u2502 p[2] \u2502 0.256682 \u2502 0.187616 \u2502 0.0215964 \u2502 0.219781 \u2502 0.62295 7 \u2502 \u2502 5 \u2502 sigC \u2502 3.04356 \u2502 5.37858 \u2502 0.643027 \u2502 1.8324 \u2502 8.48021 \u2502 \u2502 6 \u2502 sigD \u2502 3.07841 \u2502 7.12199 \u2502 0.637573 \u2502 1.81763 \u2502 8.73365 \u2502 \u2502 7 \u2502 sigRc \u2502 2.85886 \u2502 4.87482 \u2502 0.640045 \u2502 1.76814 \u2502 8.33731 \u2502 \u2502 8 \u2502 \u03b2[1] \u2502 1.00787 \u2502 0.6997 \u2502 0.0938617 \u2502 0.892331 \u2502 2.32594 \u2502 \u2502 9 \u2502 \u03b2[2] \u2502 1.02075 \u2502 0.699059 \u2502 0.105306 \u2502 0.908801 \u2502 2.32254 \u2502 \u2502 10 \u2502 \u03b2[3] \u2502 1.0024 \u2502 0.694571 \u2502 0.0931079 \u2502 0.892557 \u2502 2.29592 \u2502 \u2502 11 \u2502 \u03b3[1] \u2502 0.451114 \u2502 0.324261 \u2502 0.0405204 \u2502 0.392601 \u2502 1.06067 \u2502 \u2502 12 \u2502 \u03b3[2] \u2502 0.259019 \u2502 0.189499 \u2502 0.0220457 \u2502 0.222663 \u2502 0.62066 7 \u2502 \u2502 13 \u2502 \u03c1[1] \u2502 0.499144 \u2502 0.289255 \u2502 0.0510383 \u2502 0.498319 \u2502 0.94801 8 \u2502 \u2502 14 \u2502 \u03c1[2] \u2502 37.7277 \u2502 22.6274 \u2502 5.0063 \u2502 35.2744 \u2502 79.358 \u2502 \u2502 15 \u2502 \u03c4 \u2502 1.65824 \u2502 1.23631 \u2502 0.130206 \u2502 1.40798 \u2502 4.08954 \u2502 The following plots show the implications of this prior for the observed data. The faint lines on each figure shows 1000 trajectories sampled from the prior distribution. The black line is the prior mean. The shaded region is a pointwise 90% prior credible interval. plot(pr.figs[1], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[2], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[3], xlabel=\"Days\", ylabel=\"Portion of population\") Subjectively this prior seems reasonable. It is perhaps too concentrated on relatively fast epidemics. I may alter it, but it\u2019s what I used for the current results.","title":"Priors"},{"location":"covid/#estimation","text":"We estimate the model by MCMC. Specifically, we use the Turing.jl package (Ge, Xu, and Ghahramani 2018 ) . For sampling, we use the No-U-Turn-Sampler variant of Hamiltonian Monte Carlo. In the results below we use 4 chains with 1000 warmup iterations, and 4000 iterations for the results.","title":"Estimation"},{"location":"covid/#results","text":"Canada Italy South Korea China United States","title":"Results"},{"location":"covid/#extensions","text":"Improve chain mixing. Estimate a multi-country model with some parameters common across countries and others multi-level distributions.","title":"Extensions"},{"location":"covid/#about-this-document","text":"This document was created using Weave.jl. The code is available in on github . Ge, Hong, Kai Xu, and Zoubin Ghahramani. 2018. \u201cTuring: A Language for Flexible Probabilistic Inference.\u201d In International Conference on Artificial Intelligence and Statistics, AISTATS 2018, 9-11 April 2018, Playa Blanca, Lanzarote, Canary Islands, Spain , 1682\u201390. http://proceedings.mlr.press/v84/ge18b.html .","title":"About this document"},{"location":"functions/","text":"Function Reference \u00b6 # CovidSEIR.countrymodel \u2014 Function . countrymodel(data::CountryData, priors=defaultcountrypriors(), ::Type{R}=Float64) where {R <: Real} = begni Returns Turing model for single country source # CovidSEIR.covidjhudata \u2014 Method . covidjhudata() Downloads most recent JHU CSSE data on covid cases, deaths, and recoveries. Returns a DataFrame source # CovidSEIR.plotvars \u2014 Method . plotvars(simdf::DataFrames.AbstractDataFrame, data::CountryData; dayt0=Dates.Date(\"2020-01-21\"), # one day before JHU data begins colors=ColorSchemes.colorschemes[:Set1_9]) Create plots showing fit and implications of simulated trajectories. source # CovidSEIR.priorreport \u2014 Function . priorreport((priors=defaultcountrypriors(), T=100, population=1e7) Create tables and figures summarizing priors. source # CovidSEIR.simtrajectories \u2014 Method . simtrajectories(cc::AbstractMCMC.AbstractChains, data::CountryData, ts; ic=Iterators.product(StatsBase.sample(1:size(cc,1),300, replace=false), 1:size(cc,3))) Simulate trajectories based on parameter values in chain cc . source # CovidSEIR.odeSEIR \u2014 Method . odeSEIR() Sets up ODE for SEIR model with unconfirmed cases. Returns an ODEProblem source # CovidSEIR.paramvars \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.paramvec \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.systemvars \u2014 Method . Transfrom ODE variables to/from vector source # CovidSEIR.systemvec \u2014 Method . Transfrom ODE variables to/from vector source Index \u00b6 CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Functions"},{"location":"functions/#function-reference","text":"# CovidSEIR.countrymodel \u2014 Function . countrymodel(data::CountryData, priors=defaultcountrypriors(), ::Type{R}=Float64) where {R <: Real} = begni Returns Turing model for single country source # CovidSEIR.covidjhudata \u2014 Method . covidjhudata() Downloads most recent JHU CSSE data on covid cases, deaths, and recoveries. Returns a DataFrame source # CovidSEIR.plotvars \u2014 Method . plotvars(simdf::DataFrames.AbstractDataFrame, data::CountryData; dayt0=Dates.Date(\"2020-01-21\"), # one day before JHU data begins colors=ColorSchemes.colorschemes[:Set1_9]) Create plots showing fit and implications of simulated trajectories. source # CovidSEIR.priorreport \u2014 Function . priorreport((priors=defaultcountrypriors(), T=100, population=1e7) Create tables and figures summarizing priors. source # CovidSEIR.simtrajectories \u2014 Method . simtrajectories(cc::AbstractMCMC.AbstractChains, data::CountryData, ts; ic=Iterators.product(StatsBase.sample(1:size(cc,1),300, replace=false), 1:size(cc,3))) Simulate trajectories based on parameter values in chain cc . source # CovidSEIR.odeSEIR \u2014 Method . odeSEIR() Sets up ODE for SEIR model with unconfirmed cases. Returns an ODEProblem source # CovidSEIR.paramvars \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.paramvec \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.systemvars \u2014 Method . Transfrom ODE variables to/from vector source # CovidSEIR.systemvec \u2014 Method . Transfrom ODE variables to/from vector source","title":"Function Reference"},{"location":"functions/#index","text":"CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Index"},{"location":"italy/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata(); Italy \u00b6 italy = CountryData(covdf, \"Italy\"); itmod = CovidSEIR.TimeVarying.countrymodel(italy) cc = Turing.psample(itmod, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/italy_tv_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/italy_tv_2020-04-09.jld2\" cc; Estimates \u00b6 plot(cc) describe(cc) 2-element Array{MCMCChains.ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.0918 0.0220 0.0002 0.0015 125.8536 1.0549 pE0 0.0000 0.0000 0.0000 0.0000 64.2570 1.7578 p[1] 0.1103 0.1443 0.0011 0.0113 64.2570 2.4900 p[2] 0.0126 0.0002 0.0000 0.0000 129.5575 1.0751 sigC 563.1422 71.6221 0.5662 4.5960 64.2570 1.4061 sigD 641.5850 53.1899 0.4205 2.5574 428.8297 1.0183 sigRc 178.9027 13.0396 0.1031 0.6532 270.1005 1.0158 \u03b2[1] 1.1445 0.6432 0.0051 0.0439 77.0584 1.1838 \u03b2[2] 0.5472 0.7284 0.0058 0.0455 64.2570 1.3809 \u03b2[3] 1.1273 0.5452 0.0043 0.0345 73.5978 1.1542 \u03b3[1] 0.4753 0.2241 0.0018 0.0157 69.5237 1.1850 \u03b3[2] 0.0118 0.0008 0.0000 0.0001 64.5862 1.3489 \u03c1[1] 0.6625 0.1455 0.0012 0.0109 64.2570 1.7251 \u03c1[2] 55.5034 0.6252 0.0049 0.0411 77.0301 1.1558 \u03c4 0.0105 0.0154 0.0001 0.0012 64.2570 1.8762 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0724 0.0769 0.0848 0.0986 0.1569 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0009 0.0022 0.0082 0.2151 0.4402 p[2] 0.0123 0.0125 0.0126 0.0127 0.0130 sigC 444.0093 506.1565 561.2079 612.7302 709.5893 sigD 548.4499 605.3234 637.1705 674.1551 757.6826 sigRc 154.9638 169.6807 178.5849 187.0179 207.3859 \u03b2[1] 0.0670 0.6874 1.0988 1.5789 2.4794 \u03b2[2] 0.0016 0.0099 0.1002 0.9525 2.4204 \u03b2[3] 0.2108 0.7410 1.1014 1.4251 2.2734 \u03b3[1] 0.1798 0.3001 0.4403 0.6086 0.9975 \u03b3[2] 0.0097 0.0114 0.0119 0.0123 0.0128 \u03c1[1] 0.3872 0.5323 0.6997 0.7916 0.8615 \u03c1[2] 54.2400 55.0843 55.5862 55.9259 56.6339 \u03c4 0.0001 0.0001 0.0006 0.0177 0.0510 Fit \u00b6 sdf = simtrajectories(cc, italy, 1:200) f = plotvars(sdf, italy) f.fit As with Canada, the fit is very good, and the posterior distribution of observables is very precise. Implications \u00b6 for fig in f.trajectories display(fig) end","title":"Italy"},{"location":"italy/#italy","text":"italy = CountryData(covdf, \"Italy\"); itmod = CovidSEIR.TimeVarying.countrymodel(italy) cc = Turing.psample(itmod, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/italy_tv_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/italy_tv_2020-04-09.jld2\" cc;","title":"Italy"},{"location":"italy/#estimates","text":"plot(cc) describe(cc) 2-element Array{MCMCChains.ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.0918 0.0220 0.0002 0.0015 125.8536 1.0549 pE0 0.0000 0.0000 0.0000 0.0000 64.2570 1.7578 p[1] 0.1103 0.1443 0.0011 0.0113 64.2570 2.4900 p[2] 0.0126 0.0002 0.0000 0.0000 129.5575 1.0751 sigC 563.1422 71.6221 0.5662 4.5960 64.2570 1.4061 sigD 641.5850 53.1899 0.4205 2.5574 428.8297 1.0183 sigRc 178.9027 13.0396 0.1031 0.6532 270.1005 1.0158 \u03b2[1] 1.1445 0.6432 0.0051 0.0439 77.0584 1.1838 \u03b2[2] 0.5472 0.7284 0.0058 0.0455 64.2570 1.3809 \u03b2[3] 1.1273 0.5452 0.0043 0.0345 73.5978 1.1542 \u03b3[1] 0.4753 0.2241 0.0018 0.0157 69.5237 1.1850 \u03b3[2] 0.0118 0.0008 0.0000 0.0001 64.5862 1.3489 \u03c1[1] 0.6625 0.1455 0.0012 0.0109 64.2570 1.7251 \u03c1[2] 55.5034 0.6252 0.0049 0.0411 77.0301 1.1558 \u03c4 0.0105 0.0154 0.0001 0.0012 64.2570 1.8762 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0724 0.0769 0.0848 0.0986 0.1569 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0009 0.0022 0.0082 0.2151 0.4402 p[2] 0.0123 0.0125 0.0126 0.0127 0.0130 sigC 444.0093 506.1565 561.2079 612.7302 709.5893 sigD 548.4499 605.3234 637.1705 674.1551 757.6826 sigRc 154.9638 169.6807 178.5849 187.0179 207.3859 \u03b2[1] 0.0670 0.6874 1.0988 1.5789 2.4794 \u03b2[2] 0.0016 0.0099 0.1002 0.9525 2.4204 \u03b2[3] 0.2108 0.7410 1.1014 1.4251 2.2734 \u03b3[1] 0.1798 0.3001 0.4403 0.6086 0.9975 \u03b3[2] 0.0097 0.0114 0.0119 0.0123 0.0128 \u03c1[1] 0.3872 0.5323 0.6997 0.7916 0.8615 \u03c1[2] 54.2400 55.0843 55.5862 55.9259 56.6339 \u03c4 0.0001 0.0001 0.0006 0.0177 0.0510","title":"Estimates"},{"location":"italy/#fit","text":"sdf = simtrajectories(cc, italy, 1:200) f = plotvars(sdf, italy) f.fit As with Canada, the fit is very good, and the posterior distribution of observables is very precise.","title":"Fit"},{"location":"italy/#implications","text":"for fig in f.trajectories display(fig) end","title":"Implications"},{"location":"korea/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata(); South Korea \u00b6 korea = CountryData(covdf, \"Korea, South\") CovidSEIR.CountryData{Float64,Int64}(5.1635256e7, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], [0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 158.0, 162.0, 165.0, 169.0, 174.0, 177.0, 183 .0, 186.0, 192.0, 200.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 5228.0, 5408.0, 5567.0, 5828.0, 6021.0, 6325.0, 6463.0, 6598.0, 6694.0 , 6776.0], [1.0, 1.0, 2.0, 2.0, 3.0, 4.0, 4.0, 4.0, 4.0, 11.0 \u2026 4275.0, 4 216.0, 4155.0, 3979.0, 3867.0, 3654.0, 3591.0, 3500.0, 3445.0, 3408.0]) using Turing mdl = CovidSEIR.TimeVarying.countrymodel(korea) cc = Turing.psample(mdl, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/korea_tv_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/korea_tv_2020-04-09.jld2\" cc dayt0; Estimates \u00b6 plot(cc) describe(cc) 2-element Array{MCMCChains.ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.4954 0.2203 0.0017 0.0145 64.2570 1.4955 pE0 0.0000 0.0000 0.0000 0.0000 73.7984 1.2059 p[1] 0.0382 0.0617 0.0005 0.0043 78.2802 1.1632 p[2] 0.0014 0.0007 0.0000 0.0000 64.2570 2.3943 sigC 249.4830 44.4736 0.3516 2.9762 64.2570 1.7494 sigD 7.0278 0.7375 0.0058 0.0298 173.4050 1.0978 sigRc 756.7289 140.4338 1.1102 9.8428 64.2570 2.0736 \u03b2[1] 0.6179 0.5052 0.0040 0.0293 71.5561 1.3055 \u03b2[2] 0.3807 0.6122 0.0048 0.0350 64.2570 1.3982 \u03b2[3] 0.7337 0.4987 0.0039 0.0239 116.3282 1.1583 \u03b3[1] 0.4345 0.4815 0.0038 0.0352 64.2570 2.4452 \u03b3[2] 0.0444 0.0200 0.0002 0.0015 64.2570 2.3413 \u03c1[1] 0.8318 0.2492 0.0020 0.0153 64.2570 1.4107 \u03c1[2] 45.3747 9.7411 0.0770 0.6197 64.2570 1.4373 \u03c4 0.1899 0.3263 0.0026 0.0180 87.2755 1.2937 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.2171 0.3038 0.4594 0.6567 0.9638 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0001 0.0002 0.0432 0.0555 0.1144 p[2] 0.0008 0.0008 0.0010 0.0019 0.0028 sigC 182.4047 215.6029 241.2664 280.4259 346.7645 sigD 5.8430 6.5446 6.9404 7.4058 8.8146 sigRc 546.4491 637.6855 747.7038 869.6567 1031.7307 \u03b2[1] 0.0407 0.2552 0.4668 0.8947 1.8625 \u03b2[2] 0.0000 0.0005 0.0018 0.6110 2.0656 \u03b2[3] 0.0331 0.3567 0.6810 1.0008 1.9239 \u03b3[1] 0.0000 0.0005 0.0336 0.8458 1.4127 \u03b3[2] 0.0247 0.0266 0.0345 0.0605 0.0870 \u03c1[1] 0.1381 0.7267 0.9911 0.9983 0.9999 \u03c1[2] 37.8295 38.9232 39.8948 51.4316 67.8713 \u03c4 0.0000 0.0000 0.0939 0.2897 0.7369 Fit \u00b6 sdf = simtrajectories(cc, korea, 1:150) f = plotvars(sdf, korea, dayt0=dayt0) plot!(f.fit, xlim=nothing) We see that the model does not fit the rapid drop in new cases in South Korea. This may be caused by the model\u2019s implausible assumption that transmission and testing rates are constant over time. Implications \u00b6 for fig in f.trajectories display(plot(fig, xlim=nothing)) end","title":"South Korea"},{"location":"korea/#south-korea","text":"korea = CountryData(covdf, \"Korea, South\") CovidSEIR.CountryData{Float64,Int64}(5.1635256e7, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], [0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 158.0, 162.0, 165.0, 169.0, 174.0, 177.0, 183 .0, 186.0, 192.0, 200.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 5228.0, 5408.0, 5567.0, 5828.0, 6021.0, 6325.0, 6463.0, 6598.0, 6694.0 , 6776.0], [1.0, 1.0, 2.0, 2.0, 3.0, 4.0, 4.0, 4.0, 4.0, 11.0 \u2026 4275.0, 4 216.0, 4155.0, 3979.0, 3867.0, 3654.0, 3591.0, 3500.0, 3445.0, 3408.0]) using Turing mdl = CovidSEIR.TimeVarying.countrymodel(korea) cc = Turing.psample(mdl, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/korea_tv_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/korea_tv_2020-04-09.jld2\" cc dayt0;","title":"South Korea"},{"location":"korea/#estimates","text":"plot(cc) describe(cc) 2-element Array{MCMCChains.ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.4954 0.2203 0.0017 0.0145 64.2570 1.4955 pE0 0.0000 0.0000 0.0000 0.0000 73.7984 1.2059 p[1] 0.0382 0.0617 0.0005 0.0043 78.2802 1.1632 p[2] 0.0014 0.0007 0.0000 0.0000 64.2570 2.3943 sigC 249.4830 44.4736 0.3516 2.9762 64.2570 1.7494 sigD 7.0278 0.7375 0.0058 0.0298 173.4050 1.0978 sigRc 756.7289 140.4338 1.1102 9.8428 64.2570 2.0736 \u03b2[1] 0.6179 0.5052 0.0040 0.0293 71.5561 1.3055 \u03b2[2] 0.3807 0.6122 0.0048 0.0350 64.2570 1.3982 \u03b2[3] 0.7337 0.4987 0.0039 0.0239 116.3282 1.1583 \u03b3[1] 0.4345 0.4815 0.0038 0.0352 64.2570 2.4452 \u03b3[2] 0.0444 0.0200 0.0002 0.0015 64.2570 2.3413 \u03c1[1] 0.8318 0.2492 0.0020 0.0153 64.2570 1.4107 \u03c1[2] 45.3747 9.7411 0.0770 0.6197 64.2570 1.4373 \u03c4 0.1899 0.3263 0.0026 0.0180 87.2755 1.2937 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.2171 0.3038 0.4594 0.6567 0.9638 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0001 0.0002 0.0432 0.0555 0.1144 p[2] 0.0008 0.0008 0.0010 0.0019 0.0028 sigC 182.4047 215.6029 241.2664 280.4259 346.7645 sigD 5.8430 6.5446 6.9404 7.4058 8.8146 sigRc 546.4491 637.6855 747.7038 869.6567 1031.7307 \u03b2[1] 0.0407 0.2552 0.4668 0.8947 1.8625 \u03b2[2] 0.0000 0.0005 0.0018 0.6110 2.0656 \u03b2[3] 0.0331 0.3567 0.6810 1.0008 1.9239 \u03b3[1] 0.0000 0.0005 0.0336 0.8458 1.4127 \u03b3[2] 0.0247 0.0266 0.0345 0.0605 0.0870 \u03c1[1] 0.1381 0.7267 0.9911 0.9983 0.9999 \u03c1[2] 37.8295 38.9232 39.8948 51.4316 67.8713 \u03c4 0.0000 0.0000 0.0939 0.2897 0.7369","title":"Estimates"},{"location":"korea/#fit","text":"sdf = simtrajectories(cc, korea, 1:150) f = plotvars(sdf, korea, dayt0=dayt0) plot!(f.fit, xlim=nothing) We see that the model does not fit the rapid drop in new cases in South Korea. This may be caused by the model\u2019s implausible assumption that transmission and testing rates are constant over time.","title":"Fit"},{"location":"korea/#implications","text":"for fig in f.trajectories display(plot(fig, xlim=nothing)) end","title":"Implications"},{"location":"license/","text":"The model and results are licensed under a Creative Commons Attribution-ShareAlike 4.0 International License and were written by Paul Schrimpf. BibTeX citation. The license for the package source code is here.","title":"License"},{"location":"us/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using CovidSEIR, Plots, DataFrames, JLD2, StatsPlots, Dates Plots.pyplot() jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) covdf = covidjhudata(); United States \u00b6 us = CountryData(covdf, \"US\") CovidSEIR.CountryData{Float64,Int64}(3.2716743e8, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], [0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 2978.0, 3873.0, 4757.0, 5926.0, 7087.0, 8407. 0, 9619.0, 10783.0, 12722.0, 14695.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 5644.0, 7024.0, 8474.0, 9001.0, 9707.0, 14652.0, 17448.0, 19581.0, 21763.0, 23559.0], [1.0, 1.0, 2.0, 2.0, 5.0, 5.0, 5.0, 5.0, 5.0, 7.0 \u2026 153209.0, 177275.0, 200141.0, 228835.0, 258792.0, 285794.0, 310005. 0, 336303.0, 361738.0, 390798.0]) using Turing mdl = CovidSEIR.TimeVarying.countrymodel(us) cc = Turing.psample(mdl, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/us_tv_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/us_tv_2020-04-09.jld2\" cc; Estimates \u00b6 plot(cc) describe(cc) 2-element Array{MCMCChains.ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.2677 0.2347 0.0019 0.0179 64.2570 1.2986 pE0 0.0000 0.0000 0.0000 0.0000 92.7828 1.1082 p[1] 0.0031 0.0084 0.0001 0.0007 64.2570 1.9974 p[2] 0.0330 0.1042 0.0008 0.0082 64.2570 1.3537 sigC 5836.1776 18850.7405 149.0282 1491.4526 64.2570 1.3202 sigD 91.7836 19.1570 0.1514 1.4549 64.2570 2.2207 sigRc 639.0054 63.7597 0.5041 4.2474 68.8767 1.3410 \u03b2[1] 0.6106 0.4985 0.0039 0.0347 64.2570 1.1899 \u03b2[2] 0.8140 0.6693 0.0053 0.0441 92.5536 1.0825 \u03b2[3] 0.7265 0.4735 0.0037 0.0328 73.8654 1.1344 \u03b3[1] 0.0321 0.0421 0.0003 0.0032 64.2570 1.0696 \u03b3[2] 0.0146 0.0443 0.0003 0.0035 64.2570 1.4583 \u03c1[1] 0.6454 0.1641 0.0013 0.0126 64.2570 2.2423 \u03c1[2] 59.2163 2.5749 0.0204 0.1971 64.2570 2.2997 \u03c4 0.0094 0.0271 0.0002 0.0021 64.2570 2.0329 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0746 0.1057 0.1802 0.3254 0.9654 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0001 0.0001 0.0001 0.0004 0.0258 p[2] 0.0045 0.0054 0.0067 0.0093 0.4796 sigC 1056.1344 1187.9289 1311.0349 1618.1653 96286.1349 sigD 53.3228 83.9691 96.3625 106.4339 118.4114 sigRc 495.7261 600.6894 645.1196 683.9092 751.8316 \u03b2[1] 0.0431 0.2379 0.4684 0.8644 2.0278 \u03b2[2] 0.0466 0.3036 0.6155 1.1934 2.4611 \u03b2[3] 0.1430 0.3609 0.6055 0.9700 1.9573 \u03b3[1] 0.0036 0.0135 0.0196 0.0306 0.1578 \u03b3[2] 0.0001 0.0009 0.0023 0.0051 0.1959 \u03c1[1] 0.4410 0.5331 0.5976 0.6875 0.9749 \u03c1[2] 55.8897 57.5529 58.3709 60.7289 66.2746 \u03c4 0.0000 0.0000 0.0000 0.0002 0.1029 Fit \u00b6 sdf = simtrajectories(cc, us, 1:200) f = plotvars(sdf, us) plot(f.fit, ylim=(0, maximum(us.active)*1.3)) Implications \u00b6 for fig in f.trajectories display(plot(fig)) end","title":"United States"},{"location":"us/#united-states","text":"us = CountryData(covdf, \"US\") CovidSEIR.CountryData{Float64,Int64}(3.2716743e8, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 \u2026 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], [0.0, 0.0, 0.0, 0.0, 0.0 , 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 2978.0, 3873.0, 4757.0, 5926.0, 7087.0, 8407. 0, 9619.0, 10783.0, 12722.0, 14695.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 \u2026 5644.0, 7024.0, 8474.0, 9001.0, 9707.0, 14652.0, 17448.0, 19581.0, 21763.0, 23559.0], [1.0, 1.0, 2.0, 2.0, 5.0, 5.0, 5.0, 5.0, 5.0, 7.0 \u2026 153209.0, 177275.0, 200141.0, 228835.0, 258792.0, 285794.0, 310005. 0, 336303.0, 361738.0, 390798.0]) using Turing mdl = CovidSEIR.TimeVarying.countrymodel(us) cc = Turing.psample(mdl, NUTS(0.65), 5000, 4) import JLD2 JLD2.@save \"$jmddir/us_tv_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/us_tv_2020-04-09.jld2\" cc;","title":"United States"},{"location":"us/#estimates","text":"plot(cc) describe(cc) 2-element Array{MCMCChains.ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.2677 0.2347 0.0019 0.0179 64.2570 1.2986 pE0 0.0000 0.0000 0.0000 0.0000 92.7828 1.1082 p[1] 0.0031 0.0084 0.0001 0.0007 64.2570 1.9974 p[2] 0.0330 0.1042 0.0008 0.0082 64.2570 1.3537 sigC 5836.1776 18850.7405 149.0282 1491.4526 64.2570 1.3202 sigD 91.7836 19.1570 0.1514 1.4549 64.2570 2.2207 sigRc 639.0054 63.7597 0.5041 4.2474 68.8767 1.3410 \u03b2[1] 0.6106 0.4985 0.0039 0.0347 64.2570 1.1899 \u03b2[2] 0.8140 0.6693 0.0053 0.0441 92.5536 1.0825 \u03b2[3] 0.7265 0.4735 0.0037 0.0328 73.8654 1.1344 \u03b3[1] 0.0321 0.0421 0.0003 0.0032 64.2570 1.0696 \u03b3[2] 0.0146 0.0443 0.0003 0.0035 64.2570 1.4583 \u03c1[1] 0.6454 0.1641 0.0013 0.0126 64.2570 2.2423 \u03c1[2] 59.2163 2.5749 0.0204 0.1971 64.2570 2.2997 \u03c4 0.0094 0.0271 0.0002 0.0021 64.2570 2.0329 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0746 0.1057 0.1802 0.3254 0.9654 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0001 0.0001 0.0001 0.0004 0.0258 p[2] 0.0045 0.0054 0.0067 0.0093 0.4796 sigC 1056.1344 1187.9289 1311.0349 1618.1653 96286.1349 sigD 53.3228 83.9691 96.3625 106.4339 118.4114 sigRc 495.7261 600.6894 645.1196 683.9092 751.8316 \u03b2[1] 0.0431 0.2379 0.4684 0.8644 2.0278 \u03b2[2] 0.0466 0.3036 0.6155 1.1934 2.4611 \u03b2[3] 0.1430 0.3609 0.6055 0.9700 1.9573 \u03b3[1] 0.0036 0.0135 0.0196 0.0306 0.1578 \u03b3[2] 0.0001 0.0009 0.0023 0.0051 0.1959 \u03c1[1] 0.4410 0.5331 0.5976 0.6875 0.9749 \u03c1[2] 55.8897 57.5529 58.3709 60.7289 66.2746 \u03c4 0.0000 0.0000 0.0000 0.0002 0.1029","title":"Estimates"},{"location":"us/#fit","text":"sdf = simtrajectories(cc, us, 1:200) f = plotvars(sdf, us) plot(f.fit, ylim=(0, maximum(us.active)*1.3))","title":"Fit"},{"location":"us/#implications","text":"for fig in f.trajectories display(plot(fig)) end","title":"Implications"}]}