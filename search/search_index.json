{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CovidSEIR.jl \u00b6 Index \u00b6 CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Package Docs"},{"location":"#covidseirjl","text":"","title":"CovidSEIR.jl"},{"location":"#index","text":"CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Index"},{"location":"covid/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License using Pkg #Pkg.activate(\".\") # If running on vse.syzygy.ca, you might need to uncomment this command #try using CovidSEIR #catch #Pkg.add(PackageSpec(url=\"https://github.com/schrimpf/CovidSEIR.jl\")) #using CovidSEIR #end using Plots Plots.pyplot() using DataFrames, JLD2 jmddir = normpath(joinpath(dirname(Base.find_package(\"CovidSEIR\")),\"..\",\"docs\",\"jmd\")) \"/home/paul/.julia/dev/CovidSEIR/docs/jmd\" Introduction \u00b6 Data \u00b6 We will use data from Johns Hopkins University Center for Systems Science and Engineering . It is gathered from a variety of sources and updated daily. JHU CSSE uses the data for this interactive website. . For another course, I wrote some notes using this data in python here. This data has daily cumulative counts of confirmed cases, recoveries, and deaths in each country (and provinces within some countries). covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-03-28 \u2502 67 \u2502 \u2502 2 \u2502 confirmed \u2502 486.367 \u2502 0 \u2502 0.0 \u2502 121478 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 79 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 177 \u2502 \u2502 5 \u2502 Lat \u2502 22.0528 \u2502 -41.4545 \u2502 23.8298 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 23.2675 \u2502 -135.0 \u2502 20.9394 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 18.9005 \u2502 0 \u2502 0.0 \u2502 10023 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 162.121 \u2502 0 \u2502 0.0 \u2502 62098 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 170 \u2502 \u2502 10 \u2502 cpop \u2502 2.27709e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502 Model \u00b6 We will estimate a susceptible, exposed, infectious, recovered (SEIR) epidemiological model of Covid transmission. In particular, we will use a version based on this webapp by Allison Hill . The model contains the following variables, all of which are functions of time $S$: Susceptible individuals $E$: Exposed individuals - infected but not yet infectious or symptomatic $I_i$: Undetected infected individuals in severity class $i$. Severity increaes with $i$ and we assume individuals must pass through all previous classes $I_1$: Mild infection $I_2$: Severe infection $C_i$ confirmed infected individuals in severity class $i$ $R = R_u + R_c$: individuals who have recovered from disease and are now immune $R_u$ recovered individuals whose infection were never detected $R_c$ recovered individuals who were confirmed cases $X$: Dead individuals Compared to Hill\u2019s model, we have reduced the number of severity classes and from 3 to 2, and we have added undetected infections and recoveries. In the data, we observe active confirmed cases $\\approx \\sum_i C_i$, deaths $\\approx X$, and confirmed recoveries $\\approx R_c$. These variables evolve according to the following system of differential equations. \\begin{align*} \\dot{S} & = -S \\left( \\sum_i \\beta_i (I_i + C_i) \\right) \\\\ \\dot{E} & = S \\left( \\sum_i \\beta_i (I_i + C_i) \\right) - a E \\\\ \\dot{I_1} & = a E - \\gamma_1 I_1 - p_1 I_1 - \\tau C_1 \\\\ \\dot{I_2} & = 0 \\\\ \\dot{C_1} & = \\tau I - \\gamma_1 C_1 - p_1 C_1 \\\\ \\dot{C_2} & = p_1(I_1 + C_1) - \\gamma_2 C_2 - p_2 C_2 \\\\ \\dot{R_u} & = \\sum_i \\gamma_i I_i \\\\ \\dot{R_c} & = \\sum_i \\gamma_i C_i \\\\ \\dot{X} & = p_2 C_2 \\end{align*} Where the parameters are : $\\beta_i$ rate at which infected individuals in class $i$ contact susceptibles and infect them $a$ rate of progression from the exposed to infected class $\\gamma_i$ rate at which infected individuals in class $i$ recover from disease and become immune $p_1$ rate at which infected individuals in class $i$ progress to class $i+1$ $p_2$ death rate for individuals in the most severe stage of disease $\\tau$ rate at which infections of class $1$ are detected Note that we are assuming that all severe infections are detected (and hence $I_2 = 0$). We are also assuming that confirmed and unconfirmed cases have the same recovery and progression rates. Empirical Model \u00b6 Our data has country population, $N$, daily cumulative confirmed cases, $c_t$, deaths, $d_t$, and recoveries, $r_t$. We will assume that at a known time 0, there is an unknown portion of exposed individuals, $p_0$, so \\begin{align*} S(0) = & (1-p_0) N \\\\ E(0) = & p_0 N \\end{align*} and all other model variables are 0 at time 0. We assume that the observed data is distributed as \\begin{align*} d_t \\sim & N(X(t), \\sigma_X^2) \\\\ r_t \\sim & N(R_c(t), \\sigma_R^2) \\\\ c_t - d_t - r_t \\sim & N(C_1(t) + C_2(t), \\sigma_C^2) \\end{align*} Model Limitations \u00b6 An important limitation is that the model assumes all parameters are constant over time. This is almost surely incorrect. Most countries have implemented quarantine and distancing policies to attempt to reduce $\\beta$. Efforts have also been made to increase $\\tau$. Innovations in treatment and crowding of the medical system likely lead to variation in $\\gamma$ and $p$. Single Country Estimates \u00b6 Priors \u00b6 We use the follow prior distributions. The means of these are loosely based on Hill\u2019s defaults . using Distributions defaultcountrypriors() = Dict( \"a\" => truncated(Normal(1/5, 3), 1/14, 1.0), \"p[1]\" => truncated(Normal(0.05, 0.3), 0, 1), \"p[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b3[1]\" => truncated(Normal(0.133, 0.5), 0, 3), \"\u03b3[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b2[1]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03b2[2]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03c4\" => truncated(Normal(0.2, 2), 0, 10), \"pE0\" => truncated(Normal(0.001, 0.1), 0, 1), \"sigD\" => InverseGamma(2,3), \"sigC\" => InverseGamma(2,3), \"sigRc\" => InverseGamma(2,3)) Summary statistics of draws from this prior distribution are below. pr = priorreport() pr.tbl Error: type NamedTuple has no field tbl The following plots show the implications of this prior for the observed data. The faint lines on each figure shows 1000 trajectories sampled from the prior distribution. The black line is the prior mean. The shaded region is a pointwise 90% prior credible interval. plot(pr.figs[1], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[2], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[3], xlabel=\"Days\", ylabel=\"Portion of population\") Subjectively this prior seems reasonable. It is perhaps too concentrated on relatively fast epidemics. I may alter it, but it\u2019s what I used for the current results. Estimation \u00b6 We estimate the model by MCMC. Specifically, we use the Turing.jl package (Ge, Xu, and Ghahramani 2018 ) . For sampling, we use the No-U-Turn-Sampler variant of Hamiltonian Monte Carlo. In the results below we use 4 chains with 1000 warmup iterations, and 1000 iterations for the results. Canada \u00b6 We estimate the model with the following code. It takes about an hour. canada = CountryData(covdf, \"Canada\"); using Turing canmod = countrymodel(canada) cc = Turing.psample(canmod, NUTS(0.65), 2000, 4) import JLD2 JLD2.@save \"$jmddir/canada_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/canada_2020-03-28.jld2\" cc; Estimates \u00b6 plot(cc) We can see that there might be convergence issues. There are large differences between the four chains for some parameters. describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.3088 0.2412 0.0038 0.0231 89.6474 1.0359 pE0 0.0000 0.0000 0.0000 0.0000 70.5632 1.0856 p[1] 0.1042 0.1802 0.0028 0.0271 16.0643 2.4066 p[2] 0.1835 0.1769 0.0028 0.0205 21.5262 1.2919 sigC 55.9872 5.3305 0.0843 0.4254 151.1913 1.0043 sigD 1.2701 0.1226 0.0019 0.0091 156.7255 1.0465 sigRc 17.4322 1.4134 0.0223 0.0887 303.4507 1.0111 \u03b2[1] 0.5243 0.3414 0.0054 0.0402 26.0625 1.1952 \u03b2[2] 0.9836 0.6433 0.0102 0.0441 170.9821 1.0298 \u03b3[1] 0.0504 0.1739 0.0027 0.0222 19.6993 1.3554 \u03b3[2] 0.2633 0.2855 0.0045 0.0318 26.4008 1.2485 \u03c4 1.4733 1.2375 0.0196 0.1117 60.5718 1.0828 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0750 0.1199 0.2164 0.4248 0.9082 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0021 0.0057 0.0098 0.1192 0.6038 p[2] 0.0024 0.0044 0.1515 0.2911 0.5979 sigC 46.3921 52.1740 55.7451 59.4129 66.9490 sigD 1.0686 1.1820 1.2583 1.3417 1.5536 sigRc 14.9106 16.3755 17.3844 18.3851 20.2662 \u03b2[1] 0.0931 0.3109 0.4274 0.6564 1.4965 \u03b2[2] 0.0789 0.5019 0.8582 1.3500 2.4933 \u03b3[1] 0.0007 0.0042 0.0072 0.0098 0.6798 \u03b3[2] 0.0022 0.0124 0.1721 0.4366 0.9681 \u03c4 0.0092 0.3943 1.2458 2.2669 4.2214 The parameter estimates are generally not very precise. Fit \u00b6 sdf = simtrajectories(cc, canada, 1:150) f = plotvars(sdf, canada) f.fit In this figure, solid lines are observed data, dashed lines are posterior means, and the shaded region is a pointwise 90% credible interval. Note that the last day of data used in the estimation was March 27th. The fit appears quite good. The fitted estimates are also remarkably precise. Although individual parameters are not precisely estimated, the combination of them that gives rise to the observed data is precisely estimated. Implications \u00b6 We now look at the model\u2019s projections for some observed and unobserved variables. for fig in f.trajectories display(fig) end In general we see a similar pattern as noted above: the posteriors for observed variables are fairly precise. However, the posteriors for unobserved variables, such as the portion of undetected infections and the portion of mild infections, are very imprecise. Italy \u00b6 italy = CountryData(covdf, \"Italy\"); itmod = countrymodel(italy) ci = Turing.psample(itmod, NUTS(0.65), 2000, 4) import JLD2 JLD2.@save \"$jmddir/italy_$(Dates.today()).jld2\" ci JLD2.@load \"$jmddir/italy_2020-03-28.jld2\" ci; Estimates \u00b6 plot(ci) describe(ci) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.1821 0.1772 0.0028 0.0227 16.0643 1.7055 pE0 0.0000 0.0000 0.0000 0.0000 16.0643 1.9103 p[1] 0.0006 0.0005 0.0000 0.0001 17.7140 1.4648 p[2] 0.0279 0.0209 0.0003 0.0033 16.0643 7.7417 sigC 439.9273 57.7940 0.9138 6.8324 16.6947 1.4674 sigD 86.8377 24.9425 0.3944 3.8063 16.0643 3.4150 sigRc 143.3689 11.7722 0.1861 0.6651 326.4399 1.0226 \u03b2[1] 1.3916 0.7617 0.0120 0.1072 16.2578 1.5885 \u03b2[2] 1.0478 0.7186 0.0114 0.0346 364.2459 1.0204 \u03b3[1] 0.2462 0.2050 0.0032 0.0291 16.5431 1.5453 \u03b3[2] 0.0251 0.0288 0.0005 0.0046 16.0643 7.8777 \u03c4 0.0001 0.0000 0.0000 0.0000 91.1094 1.0839 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0723 0.0826 0.1013 0.1903 0.7374 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0000 0.0001 0.0006 0.0010 0.0019 p[2] 0.0152 0.0155 0.0160 0.0278 0.0704 sigC 355.6332 397.2074 428.3271 473.3011 579.4653 sigD 39.8203 75.1277 96.2984 103.7001 117.2422 sigRc 122.0351 135.1442 142.6531 151.3082 167.1851 \u03b2[1] 0.3304 0.6782 1.3742 1.8807 2.9848 \u03b2[2] 0.0484 0.4801 0.9462 1.4963 2.7269 \u03b3[1] 0.0002 0.0482 0.2242 0.3697 0.7272 \u03b3[2] 0.0028 0.0075 0.0104 0.0267 0.0823 \u03c4 0.0000 0.0001 0.0001 0.0001 0.0001 Compared to Canada, Italy has a very low estimate of $\\tau$. Apparently a high number of undetected cases helps to explain the rapid growth in confirmed cases in Italy. Fit \u00b6 sdf = simtrajectories(ci, italy, 1:150) f = plotvars(sdf, italy) f.fit As with Canada, the fit is very good, and the posterior distribution of observables is very precise. Implications \u00b6 for fig in f.trajectories display(fig) end The posterior estimates imply that Italy has about 10 times as many undetected cases as detected. Extensions \u00b6 Estimate single country model for more countries/areas. Estimate a multi-country model with some parameters common across countries and others multi-level distributions. Allow time varying parameters. About this document \u00b6 This document was created using Weave.jl. The code is available in on github . Ge, Hong, Kai Xu, and Zoubin Ghahramani. 2018. \u201cTuring: A Language for Flexible Probabilistic Inference.\u201d In International Conference on Artificial Intelligence and Statistics, AISTATS 2018, 9-11 April 2018, Playa Blanca, Lanzarote, Canary Islands, Spain , 1682\u201390. http://proceedings.mlr.press/v84/ge18b.html .","title":"SEIR Model and Results"},{"location":"covid/#introduction","text":"","title":"Introduction"},{"location":"covid/#data","text":"We will use data from Johns Hopkins University Center for Systems Science and Engineering . It is gathered from a variety of sources and updated daily. JHU CSSE uses the data for this interactive website. . For another course, I wrote some notes using this data in python here. This data has daily cumulative counts of confirmed cases, recoveries, and deaths in each country (and provinces within some countries). covdf = covidjhudata() describe(covdf) 11\u00d78 DataFrame. Omitted printing of 2 columns \u2502 Row \u2502 variable \u2502 mean \u2502 min \u2502 median \u2502 max \u2502 nuni que \u2502 \u2502 \u2502 Symbol \u2502 Union\u2026 \u2502 Any \u2502 Union\u2026 \u2502 Any \u2502 Unio n\u2026 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 Date \u2502 \u2502 2020-01-22 \u2502 \u2502 2020-03-28 \u2502 67 \u2502 \u2502 2 \u2502 confirmed \u2502 486.367 \u2502 0 \u2502 0.0 \u2502 121478 \u2502 \u2502 \u2502 3 \u2502 Province \u2502 \u2502 Alberta \u2502 \u2502 Zhejiang \u2502 79 \u2502 \u2502 4 \u2502 Country \u2502 \u2502 Afghanistan \u2502 \u2502 Zimbabwe \u2502 177 \u2502 \u2502 5 \u2502 Lat \u2502 22.0528 \u2502 -41.4545 \u2502 23.8298 \u2502 71.7069 \u2502 \u2502 \u2502 6 \u2502 Long \u2502 23.2675 \u2502 -135.0 \u2502 20.9394 \u2502 178.065 \u2502 \u2502 \u2502 7 \u2502 deaths \u2502 18.9005 \u2502 0 \u2502 0.0 \u2502 10023 \u2502 \u2502 \u2502 8 \u2502 recovered \u2502 162.121 \u2502 0 \u2502 0.0 \u2502 62098 \u2502 \u2502 \u2502 9 \u2502 iso2c \u2502 \u2502 AD \u2502 \u2502 ZW \u2502 170 \u2502 \u2502 10 \u2502 cpop \u2502 2.27709e8 \u2502 33785.0 \u2502 2.49924e7 \u2502 1.39273e9 \u2502 \u2502 \u2502 11 \u2502 ppop \u2502 2.74801e7 \u2502 41078 \u2502 1.557e7 \u2502 111690000 \u2502 \u2502","title":"Data"},{"location":"covid/#model","text":"We will estimate a susceptible, exposed, infectious, recovered (SEIR) epidemiological model of Covid transmission. In particular, we will use a version based on this webapp by Allison Hill . The model contains the following variables, all of which are functions of time $S$: Susceptible individuals $E$: Exposed individuals - infected but not yet infectious or symptomatic $I_i$: Undetected infected individuals in severity class $i$. Severity increaes with $i$ and we assume individuals must pass through all previous classes $I_1$: Mild infection $I_2$: Severe infection $C_i$ confirmed infected individuals in severity class $i$ $R = R_u + R_c$: individuals who have recovered from disease and are now immune $R_u$ recovered individuals whose infection were never detected $R_c$ recovered individuals who were confirmed cases $X$: Dead individuals Compared to Hill\u2019s model, we have reduced the number of severity classes and from 3 to 2, and we have added undetected infections and recoveries. In the data, we observe active confirmed cases $\\approx \\sum_i C_i$, deaths $\\approx X$, and confirmed recoveries $\\approx R_c$. These variables evolve according to the following system of differential equations. \\begin{align*} \\dot{S} & = -S \\left( \\sum_i \\beta_i (I_i + C_i) \\right) \\\\ \\dot{E} & = S \\left( \\sum_i \\beta_i (I_i + C_i) \\right) - a E \\\\ \\dot{I_1} & = a E - \\gamma_1 I_1 - p_1 I_1 - \\tau C_1 \\\\ \\dot{I_2} & = 0 \\\\ \\dot{C_1} & = \\tau I - \\gamma_1 C_1 - p_1 C_1 \\\\ \\dot{C_2} & = p_1(I_1 + C_1) - \\gamma_2 C_2 - p_2 C_2 \\\\ \\dot{R_u} & = \\sum_i \\gamma_i I_i \\\\ \\dot{R_c} & = \\sum_i \\gamma_i C_i \\\\ \\dot{X} & = p_2 C_2 \\end{align*} Where the parameters are : $\\beta_i$ rate at which infected individuals in class $i$ contact susceptibles and infect them $a$ rate of progression from the exposed to infected class $\\gamma_i$ rate at which infected individuals in class $i$ recover from disease and become immune $p_1$ rate at which infected individuals in class $i$ progress to class $i+1$ $p_2$ death rate for individuals in the most severe stage of disease $\\tau$ rate at which infections of class $1$ are detected Note that we are assuming that all severe infections are detected (and hence $I_2 = 0$). We are also assuming that confirmed and unconfirmed cases have the same recovery and progression rates.","title":"Model"},{"location":"covid/#empirical-model","text":"Our data has country population, $N$, daily cumulative confirmed cases, $c_t$, deaths, $d_t$, and recoveries, $r_t$. We will assume that at a known time 0, there is an unknown portion of exposed individuals, $p_0$, so \\begin{align*} S(0) = & (1-p_0) N \\\\ E(0) = & p_0 N \\end{align*} and all other model variables are 0 at time 0. We assume that the observed data is distributed as \\begin{align*} d_t \\sim & N(X(t), \\sigma_X^2) \\\\ r_t \\sim & N(R_c(t), \\sigma_R^2) \\\\ c_t - d_t - r_t \\sim & N(C_1(t) + C_2(t), \\sigma_C^2) \\end{align*}","title":"Empirical Model"},{"location":"covid/#model-limitations","text":"An important limitation is that the model assumes all parameters are constant over time. This is almost surely incorrect. Most countries have implemented quarantine and distancing policies to attempt to reduce $\\beta$. Efforts have also been made to increase $\\tau$. Innovations in treatment and crowding of the medical system likely lead to variation in $\\gamma$ and $p$.","title":"Model Limitations"},{"location":"covid/#single-country-estimates","text":"","title":"Single Country Estimates"},{"location":"covid/#priors","text":"We use the follow prior distributions. The means of these are loosely based on Hill\u2019s defaults . using Distributions defaultcountrypriors() = Dict( \"a\" => truncated(Normal(1/5, 3), 1/14, 1.0), \"p[1]\" => truncated(Normal(0.05, 0.3), 0, 1), \"p[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b3[1]\" => truncated(Normal(0.133, 0.5), 0, 3), \"\u03b3[2]\" => truncated(Normal(0.05, 0.3), 0, 1), \"\u03b2[1]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03b2[2]\" => truncated(Normal(0.5, 1), 0, 10), \"\u03c4\" => truncated(Normal(0.2, 2), 0, 10), \"pE0\" => truncated(Normal(0.001, 0.1), 0, 1), \"sigD\" => InverseGamma(2,3), \"sigC\" => InverseGamma(2,3), \"sigRc\" => InverseGamma(2,3)) Summary statistics of draws from this prior distribution are below. pr = priorreport() pr.tbl Error: type NamedTuple has no field tbl The following plots show the implications of this prior for the observed data. The faint lines on each figure shows 1000 trajectories sampled from the prior distribution. The black line is the prior mean. The shaded region is a pointwise 90% prior credible interval. plot(pr.figs[1], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[2], xlabel=\"Days\", ylabel=\"Portion of population\") plot(pr.figs[3], xlabel=\"Days\", ylabel=\"Portion of population\") Subjectively this prior seems reasonable. It is perhaps too concentrated on relatively fast epidemics. I may alter it, but it\u2019s what I used for the current results.","title":"Priors"},{"location":"covid/#estimation","text":"We estimate the model by MCMC. Specifically, we use the Turing.jl package (Ge, Xu, and Ghahramani 2018 ) . For sampling, we use the No-U-Turn-Sampler variant of Hamiltonian Monte Carlo. In the results below we use 4 chains with 1000 warmup iterations, and 1000 iterations for the results.","title":"Estimation"},{"location":"covid/#canada","text":"We estimate the model with the following code. It takes about an hour. canada = CountryData(covdf, \"Canada\"); using Turing canmod = countrymodel(canada) cc = Turing.psample(canmod, NUTS(0.65), 2000, 4) import JLD2 JLD2.@save \"$jmddir/canada_$(Dates.today()).jld2\" cc JLD2.@load \"$jmddir/canada_2020-03-28.jld2\" cc;","title":"Canada"},{"location":"covid/#estimates","text":"plot(cc) We can see that there might be convergence issues. There are large differences between the four chains for some parameters. describe(cc) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.3088 0.2412 0.0038 0.0231 89.6474 1.0359 pE0 0.0000 0.0000 0.0000 0.0000 70.5632 1.0856 p[1] 0.1042 0.1802 0.0028 0.0271 16.0643 2.4066 p[2] 0.1835 0.1769 0.0028 0.0205 21.5262 1.2919 sigC 55.9872 5.3305 0.0843 0.4254 151.1913 1.0043 sigD 1.2701 0.1226 0.0019 0.0091 156.7255 1.0465 sigRc 17.4322 1.4134 0.0223 0.0887 303.4507 1.0111 \u03b2[1] 0.5243 0.3414 0.0054 0.0402 26.0625 1.1952 \u03b2[2] 0.9836 0.6433 0.0102 0.0441 170.9821 1.0298 \u03b3[1] 0.0504 0.1739 0.0027 0.0222 19.6993 1.3554 \u03b3[2] 0.2633 0.2855 0.0045 0.0318 26.4008 1.2485 \u03c4 1.4733 1.2375 0.0196 0.1117 60.5718 1.0828 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0750 0.1199 0.2164 0.4248 0.9082 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0021 0.0057 0.0098 0.1192 0.6038 p[2] 0.0024 0.0044 0.1515 0.2911 0.5979 sigC 46.3921 52.1740 55.7451 59.4129 66.9490 sigD 1.0686 1.1820 1.2583 1.3417 1.5536 sigRc 14.9106 16.3755 17.3844 18.3851 20.2662 \u03b2[1] 0.0931 0.3109 0.4274 0.6564 1.4965 \u03b2[2] 0.0789 0.5019 0.8582 1.3500 2.4933 \u03b3[1] 0.0007 0.0042 0.0072 0.0098 0.6798 \u03b3[2] 0.0022 0.0124 0.1721 0.4366 0.9681 \u03c4 0.0092 0.3943 1.2458 2.2669 4.2214 The parameter estimates are generally not very precise.","title":"Estimates"},{"location":"covid/#fit","text":"sdf = simtrajectories(cc, canada, 1:150) f = plotvars(sdf, canada) f.fit In this figure, solid lines are observed data, dashed lines are posterior means, and the shaded region is a pointwise 90% credible interval. Note that the last day of data used in the estimation was March 27th. The fit appears quite good. The fitted estimates are also remarkably precise. Although individual parameters are not precisely estimated, the combination of them that gives rise to the observed data is precisely estimated.","title":"Fit"},{"location":"covid/#implications","text":"We now look at the model\u2019s projections for some observed and unobserved variables. for fig in f.trajectories display(fig) end In general we see a similar pattern as noted above: the posteriors for observed variables are fairly precise. However, the posteriors for unobserved variables, such as the portion of undetected infections and the portion of mild infections, are very imprecise.","title":"Implications"},{"location":"covid/#italy","text":"italy = CountryData(covdf, \"Italy\"); itmod = countrymodel(italy) ci = Turing.psample(itmod, NUTS(0.65), 2000, 4) import JLD2 JLD2.@save \"$jmddir/italy_$(Dates.today()).jld2\" ci JLD2.@load \"$jmddir/italy_2020-03-28.jld2\" ci;","title":"Italy"},{"location":"covid/#estimates_1","text":"plot(ci) describe(ci) 2-element Array{ChainDataFrame,1} Summary Statistics parameters mean std naive_se mcse ess r_hat \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500 a 0.1821 0.1772 0.0028 0.0227 16.0643 1.7055 pE0 0.0000 0.0000 0.0000 0.0000 16.0643 1.9103 p[1] 0.0006 0.0005 0.0000 0.0001 17.7140 1.4648 p[2] 0.0279 0.0209 0.0003 0.0033 16.0643 7.7417 sigC 439.9273 57.7940 0.9138 6.8324 16.6947 1.4674 sigD 86.8377 24.9425 0.3944 3.8063 16.0643 3.4150 sigRc 143.3689 11.7722 0.1861 0.6651 326.4399 1.0226 \u03b2[1] 1.3916 0.7617 0.0120 0.1072 16.2578 1.5885 \u03b2[2] 1.0478 0.7186 0.0114 0.0346 364.2459 1.0204 \u03b3[1] 0.2462 0.2050 0.0032 0.0291 16.5431 1.5453 \u03b3[2] 0.0251 0.0288 0.0005 0.0046 16.0643 7.8777 \u03c4 0.0001 0.0000 0.0000 0.0000 91.1094 1.0839 Quantiles parameters 2.5% 25.0% 50.0% 75.0% 97.5% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 a 0.0723 0.0826 0.1013 0.1903 0.7374 pE0 0.0000 0.0000 0.0000 0.0000 0.0000 p[1] 0.0000 0.0001 0.0006 0.0010 0.0019 p[2] 0.0152 0.0155 0.0160 0.0278 0.0704 sigC 355.6332 397.2074 428.3271 473.3011 579.4653 sigD 39.8203 75.1277 96.2984 103.7001 117.2422 sigRc 122.0351 135.1442 142.6531 151.3082 167.1851 \u03b2[1] 0.3304 0.6782 1.3742 1.8807 2.9848 \u03b2[2] 0.0484 0.4801 0.9462 1.4963 2.7269 \u03b3[1] 0.0002 0.0482 0.2242 0.3697 0.7272 \u03b3[2] 0.0028 0.0075 0.0104 0.0267 0.0823 \u03c4 0.0000 0.0001 0.0001 0.0001 0.0001 Compared to Canada, Italy has a very low estimate of $\\tau$. Apparently a high number of undetected cases helps to explain the rapid growth in confirmed cases in Italy.","title":"Estimates"},{"location":"covid/#fit_1","text":"sdf = simtrajectories(ci, italy, 1:150) f = plotvars(sdf, italy) f.fit As with Canada, the fit is very good, and the posterior distribution of observables is very precise.","title":"Fit"},{"location":"covid/#implications_1","text":"for fig in f.trajectories display(fig) end The posterior estimates imply that Italy has about 10 times as many undetected cases as detected.","title":"Implications"},{"location":"covid/#extensions","text":"Estimate single country model for more countries/areas. Estimate a multi-country model with some parameters common across countries and others multi-level distributions. Allow time varying parameters.","title":"Extensions"},{"location":"covid/#about-this-document","text":"This document was created using Weave.jl. The code is available in on github . Ge, Hong, Kai Xu, and Zoubin Ghahramani. 2018. \u201cTuring: A Language for Flexible Probabilistic Inference.\u201d In International Conference on Artificial Intelligence and Statistics, AISTATS 2018, 9-11 April 2018, Playa Blanca, Lanzarote, Canary Islands, Spain , 1682\u201390. http://proceedings.mlr.press/v84/ge18b.html .","title":"About this document"},{"location":"functions/","text":"Function Reference \u00b6 # CovidSEIR.countrymodel \u2014 Function . countrymodel(data::CountryData, priors=defaultcountrypriors(), ::Type{R}=Float64) where {R <: Real} = begni Returns Turing model for single country source # CovidSEIR.covidjhudata \u2014 Method . covidjhudata() Downloads most recent JHU CSSE data on covid cases, deaths, and recoveries. Returns a DataFrame source # CovidSEIR.plotvars \u2014 Method . plotvars(simdf::DataFrames.AbstractDataFrame, data::CountryData; dayt0=Dates.Date(\"2020-01-21\"), # one day before JHU data begins colors=ColorSchemes.colorschemes[:Set1_9]) Create plots showing fit and implications of simulated trajectories. source # CovidSEIR.priorreport \u2014 Function . priorreport((priors=defaultcountrypriors(), T=100, population=1e7) Create tables and figures summarizing priors. source # CovidSEIR.simtrajectories \u2014 Method . simtrajectories(cc::AbstractMCMC.AbstractChains, data::CountryData, ts; ic=Iterators.product(StatsBase.sample(1:size(cc,1),300, replace=false), 1:size(cc,3))) Simulate trajectories based on parameter values in chain cc . source # CovidSEIR.odeSEIR \u2014 Method . odeSEIR() Sets up ODE for SEIR model with unconfirmed cases. Returns an ODEProblem source # CovidSEIR.paramvars \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.paramvec \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.systemvars \u2014 Method . Transfrom ODE variables to/from vector source # CovidSEIR.systemvec \u2014 Method . Transfrom ODE variables to/from vector source Index \u00b6 CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Functions"},{"location":"functions/#function-reference","text":"# CovidSEIR.countrymodel \u2014 Function . countrymodel(data::CountryData, priors=defaultcountrypriors(), ::Type{R}=Float64) where {R <: Real} = begni Returns Turing model for single country source # CovidSEIR.covidjhudata \u2014 Method . covidjhudata() Downloads most recent JHU CSSE data on covid cases, deaths, and recoveries. Returns a DataFrame source # CovidSEIR.plotvars \u2014 Method . plotvars(simdf::DataFrames.AbstractDataFrame, data::CountryData; dayt0=Dates.Date(\"2020-01-21\"), # one day before JHU data begins colors=ColorSchemes.colorschemes[:Set1_9]) Create plots showing fit and implications of simulated trajectories. source # CovidSEIR.priorreport \u2014 Function . priorreport((priors=defaultcountrypriors(), T=100, population=1e7) Create tables and figures summarizing priors. source # CovidSEIR.simtrajectories \u2014 Method . simtrajectories(cc::AbstractMCMC.AbstractChains, data::CountryData, ts; ic=Iterators.product(StatsBase.sample(1:size(cc,1),300, replace=false), 1:size(cc,3))) Simulate trajectories based on parameter values in chain cc . source # CovidSEIR.odeSEIR \u2014 Method . odeSEIR() Sets up ODE for SEIR model with unconfirmed cases. Returns an ODEProblem source # CovidSEIR.paramvars \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.paramvec \u2014 Method . Transfrom ODE parameters to/from vector source # CovidSEIR.systemvars \u2014 Method . Transfrom ODE variables to/from vector source # CovidSEIR.systemvec \u2014 Method . Transfrom ODE variables to/from vector source","title":"Function Reference"},{"location":"functions/#index","text":"CovidSEIR.countrymodel CovidSEIR.covidjhudata CovidSEIR.odeSEIR CovidSEIR.paramvars CovidSEIR.paramvec CovidSEIR.plotvars CovidSEIR.priorreport CovidSEIR.simtrajectories CovidSEIR.systemvars CovidSEIR.systemvec","title":"Index"},{"location":"license/","text":"The model and results are licensed under a Creative Commons Attribution-ShareAlike 4.0 International License and were written by Paul Schrimpf. BibTeX citation. The license for the package source code is here.","title":"License"}]}